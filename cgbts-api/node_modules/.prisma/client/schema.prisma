// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userID         Int              @id @default(autoincrement())
  username       String           @unique
  password       String
  email          String
  phone_number   String
  first_name     String
  middle_name    String?
  last_name      String
  date_of_birth  DateTime
  address        String?
  create_at      DateTime         @default(now())
  updated_at     DateTime?        @db.Timestamp(0)
  status         String           @default("1")
  last_login     DateTime?        @db.Timestamp(0)
  suffix         String?
  sex            String?
  barangay       String?
  city_municipal String?
  postal_code    Int?
  country        String?
  province       String?
  sss_id         String?
  pagibig_id     String?
  philhead_id    String?
  role_Id        Int?             @default(1)
  contributions  contributions[]
  notifications  notifications[]
  benefit_claims benefit_claims[]
  user_info      user_info[]
}

model user_info {
  id             Int      @id @default(autoincrement())
  first_name     String
  middle_name    String
  last_name      String
  suffix         String?
  DOB            DateTime
  relationship   String
  contact_number String?
  user           Users    @relation(fields: [users_id], references: [userID])
  users_id       Int
}

model user_roles {
  id          Int    @id @default(autoincrement())
  role_name   String
  description String
}

model contributions {
  contribution_id Int                @id @default(autoincrement())
  amount          Decimal
  post_date       DateTime
  status          String
  source          agency_information @relation(fields: [agency_id], references: [agency_id])
  user            Users              @relation(fields: [userID], references: [userID])
  userID          Int
  agency_id       Int
  notifications   notifications[]
}

model agency_information {
  agency_id      Int              @id @default(autoincrement())
  agency_name    String
  description    String
  contact_info   String
  contributions  contributions[]
  benefit_claims benefit_claims[]
}

model notifications {
  notification_id Int           @id @default(autoincrement())
  message         String
  is_read         Int
  created_at      DateTime      @default(now())
  user            Users         @relation(fields: [user_id], references: [userID])
  contributions   contributions @relation(fields: [Contribution_id], references: [contribution_id])
  user_id         Int
  Contribution_id Int
}

model benefit_claims {
  claim_id     Int                @id @default(autoincrement())
  claim_amount Decimal
  claim_status String
  submitted_at DateTime           @default(now())
  processed_ad DateTime?          @db.Timestamp(0)
  remarks      String
  users        Users              @relation(fields: [userID], references: [userID])
  agency       agency_information @relation(fields: [benefit_type], references: [agency_id])
  userID       Int
  benefit_type Int
}

model faq {
  faq_id   Int    @id @default(autoincrement())
  question String
  answer   String
  category String
}

model guides_tutorials {
  guide_id Int    @id @default(autoincrement())
  title    String
  content  String
  category String
}


/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model user_info
 * 
 */
export type user_info = $Result.DefaultSelection<Prisma.$user_infoPayload>
/**
 * Model user_roles
 * 
 */
export type user_roles = $Result.DefaultSelection<Prisma.$user_rolesPayload>
/**
 * Model contributions
 * 
 */
export type contributions = $Result.DefaultSelection<Prisma.$contributionsPayload>
/**
 * Model agency_information
 * 
 */
export type agency_information = $Result.DefaultSelection<Prisma.$agency_informationPayload>
/**
 * Model notifications
 * 
 */
export type notifications = $Result.DefaultSelection<Prisma.$notificationsPayload>
/**
 * Model benefit_claims
 * 
 */
export type benefit_claims = $Result.DefaultSelection<Prisma.$benefit_claimsPayload>
/**
 * Model faq
 * 
 */
export type faq = $Result.DefaultSelection<Prisma.$faqPayload>
/**
 * Model guides_tutorials
 * 
 */
export type guides_tutorials = $Result.DefaultSelection<Prisma.$guides_tutorialsPayload>
/**
 * Model benefits_types
 * 
 */
export type benefits_types = $Result.DefaultSelection<Prisma.$benefits_typesPayload>
/**
 * Model faqs_category
 * 
 */
export type faqs_category = $Result.DefaultSelection<Prisma.$faqs_categoryPayload>
/**
 * Model user_security_questions
 * 
 */
export type user_security_questions = $Result.DefaultSelection<Prisma.$user_security_questionsPayload>
/**
 * Model security_question
 * 
 */
export type security_question = $Result.DefaultSelection<Prisma.$security_questionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.user_info`: Exposes CRUD operations for the **user_info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_infos
    * const user_infos = await prisma.user_info.findMany()
    * ```
    */
  get user_info(): Prisma.user_infoDelegate<ExtArgs>;

  /**
   * `prisma.user_roles`: Exposes CRUD operations for the **user_roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_roles
    * const user_roles = await prisma.user_roles.findMany()
    * ```
    */
  get user_roles(): Prisma.user_rolesDelegate<ExtArgs>;

  /**
   * `prisma.contributions`: Exposes CRUD operations for the **contributions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contributions
    * const contributions = await prisma.contributions.findMany()
    * ```
    */
  get contributions(): Prisma.contributionsDelegate<ExtArgs>;

  /**
   * `prisma.agency_information`: Exposes CRUD operations for the **agency_information** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agency_informations
    * const agency_informations = await prisma.agency_information.findMany()
    * ```
    */
  get agency_information(): Prisma.agency_informationDelegate<ExtArgs>;

  /**
   * `prisma.notifications`: Exposes CRUD operations for the **notifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notifications.findMany()
    * ```
    */
  get notifications(): Prisma.notificationsDelegate<ExtArgs>;

  /**
   * `prisma.benefit_claims`: Exposes CRUD operations for the **benefit_claims** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Benefit_claims
    * const benefit_claims = await prisma.benefit_claims.findMany()
    * ```
    */
  get benefit_claims(): Prisma.benefit_claimsDelegate<ExtArgs>;

  /**
   * `prisma.faq`: Exposes CRUD operations for the **faq** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faqs
    * const faqs = await prisma.faq.findMany()
    * ```
    */
  get faq(): Prisma.faqDelegate<ExtArgs>;

  /**
   * `prisma.guides_tutorials`: Exposes CRUD operations for the **guides_tutorials** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guides_tutorials
    * const guides_tutorials = await prisma.guides_tutorials.findMany()
    * ```
    */
  get guides_tutorials(): Prisma.guides_tutorialsDelegate<ExtArgs>;

  /**
   * `prisma.benefits_types`: Exposes CRUD operations for the **benefits_types** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Benefits_types
    * const benefits_types = await prisma.benefits_types.findMany()
    * ```
    */
  get benefits_types(): Prisma.benefits_typesDelegate<ExtArgs>;

  /**
   * `prisma.faqs_category`: Exposes CRUD operations for the **faqs_category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faqs_categories
    * const faqs_categories = await prisma.faqs_category.findMany()
    * ```
    */
  get faqs_category(): Prisma.faqs_categoryDelegate<ExtArgs>;

  /**
   * `prisma.user_security_questions`: Exposes CRUD operations for the **user_security_questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_security_questions
    * const user_security_questions = await prisma.user_security_questions.findMany()
    * ```
    */
  get user_security_questions(): Prisma.user_security_questionsDelegate<ExtArgs>;

  /**
   * `prisma.security_question`: Exposes CRUD operations for the **security_question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Security_questions
    * const security_questions = await prisma.security_question.findMany()
    * ```
    */
  get security_question(): Prisma.security_questionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.1
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    user_info: 'user_info',
    user_roles: 'user_roles',
    contributions: 'contributions',
    agency_information: 'agency_information',
    notifications: 'notifications',
    benefit_claims: 'benefit_claims',
    faq: 'faq',
    guides_tutorials: 'guides_tutorials',
    benefits_types: 'benefits_types',
    faqs_category: 'faqs_category',
    user_security_questions: 'user_security_questions',
    security_question: 'security_question'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "user_info" | "user_roles" | "contributions" | "agency_information" | "notifications" | "benefit_claims" | "faq" | "guides_tutorials" | "benefits_types" | "faqs_category" | "user_security_questions" | "security_question"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      user_info: {
        payload: Prisma.$user_infoPayload<ExtArgs>
        fields: Prisma.user_infoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_infoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_infoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_infoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_infoPayload>
          }
          findFirst: {
            args: Prisma.user_infoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_infoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_infoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_infoPayload>
          }
          findMany: {
            args: Prisma.user_infoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_infoPayload>[]
          }
          create: {
            args: Prisma.user_infoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_infoPayload>
          }
          createMany: {
            args: Prisma.user_infoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_infoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_infoPayload>[]
          }
          delete: {
            args: Prisma.user_infoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_infoPayload>
          }
          update: {
            args: Prisma.user_infoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_infoPayload>
          }
          deleteMany: {
            args: Prisma.user_infoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_infoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.user_infoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_infoPayload>
          }
          aggregate: {
            args: Prisma.User_infoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_info>
          }
          groupBy: {
            args: Prisma.user_infoGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_infoGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_infoCountArgs<ExtArgs>
            result: $Utils.Optional<User_infoCountAggregateOutputType> | number
          }
        }
      }
      user_roles: {
        payload: Prisma.$user_rolesPayload<ExtArgs>
        fields: Prisma.user_rolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_rolesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_rolesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          findFirst: {
            args: Prisma.user_rolesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_rolesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          findMany: {
            args: Prisma.user_rolesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>[]
          }
          create: {
            args: Prisma.user_rolesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          createMany: {
            args: Prisma.user_rolesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_rolesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>[]
          }
          delete: {
            args: Prisma.user_rolesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          update: {
            args: Prisma.user_rolesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          deleteMany: {
            args: Prisma.user_rolesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_rolesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.user_rolesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          aggregate: {
            args: Prisma.User_rolesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_roles>
          }
          groupBy: {
            args: Prisma.user_rolesGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_rolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_rolesCountArgs<ExtArgs>
            result: $Utils.Optional<User_rolesCountAggregateOutputType> | number
          }
        }
      }
      contributions: {
        payload: Prisma.$contributionsPayload<ExtArgs>
        fields: Prisma.contributionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.contributionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.contributionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          findFirst: {
            args: Prisma.contributionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.contributionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          findMany: {
            args: Prisma.contributionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>[]
          }
          create: {
            args: Prisma.contributionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          createMany: {
            args: Prisma.contributionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.contributionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>[]
          }
          delete: {
            args: Prisma.contributionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          update: {
            args: Prisma.contributionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          deleteMany: {
            args: Prisma.contributionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.contributionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.contributionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          aggregate: {
            args: Prisma.ContributionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContributions>
          }
          groupBy: {
            args: Prisma.contributionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContributionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.contributionsCountArgs<ExtArgs>
            result: $Utils.Optional<ContributionsCountAggregateOutputType> | number
          }
        }
      }
      agency_information: {
        payload: Prisma.$agency_informationPayload<ExtArgs>
        fields: Prisma.agency_informationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.agency_informationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.agency_informationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          findFirst: {
            args: Prisma.agency_informationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.agency_informationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          findMany: {
            args: Prisma.agency_informationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>[]
          }
          create: {
            args: Prisma.agency_informationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          createMany: {
            args: Prisma.agency_informationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.agency_informationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>[]
          }
          delete: {
            args: Prisma.agency_informationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          update: {
            args: Prisma.agency_informationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          deleteMany: {
            args: Prisma.agency_informationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.agency_informationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.agency_informationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          aggregate: {
            args: Prisma.Agency_informationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgency_information>
          }
          groupBy: {
            args: Prisma.agency_informationGroupByArgs<ExtArgs>
            result: $Utils.Optional<Agency_informationGroupByOutputType>[]
          }
          count: {
            args: Prisma.agency_informationCountArgs<ExtArgs>
            result: $Utils.Optional<Agency_informationCountAggregateOutputType> | number
          }
        }
      }
      notifications: {
        payload: Prisma.$notificationsPayload<ExtArgs>
        fields: Prisma.notificationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.notificationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.notificationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          findFirst: {
            args: Prisma.notificationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.notificationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          findMany: {
            args: Prisma.notificationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>[]
          }
          create: {
            args: Prisma.notificationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          createMany: {
            args: Prisma.notificationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.notificationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>[]
          }
          delete: {
            args: Prisma.notificationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          update: {
            args: Prisma.notificationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          deleteMany: {
            args: Prisma.notificationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.notificationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.notificationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationsPayload>
          }
          aggregate: {
            args: Prisma.NotificationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotifications>
          }
          groupBy: {
            args: Prisma.notificationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.notificationsCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationsCountAggregateOutputType> | number
          }
        }
      }
      benefit_claims: {
        payload: Prisma.$benefit_claimsPayload<ExtArgs>
        fields: Prisma.benefit_claimsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.benefit_claimsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefit_claimsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.benefit_claimsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefit_claimsPayload>
          }
          findFirst: {
            args: Prisma.benefit_claimsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefit_claimsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.benefit_claimsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefit_claimsPayload>
          }
          findMany: {
            args: Prisma.benefit_claimsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefit_claimsPayload>[]
          }
          create: {
            args: Prisma.benefit_claimsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefit_claimsPayload>
          }
          createMany: {
            args: Prisma.benefit_claimsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.benefit_claimsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefit_claimsPayload>[]
          }
          delete: {
            args: Prisma.benefit_claimsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefit_claimsPayload>
          }
          update: {
            args: Prisma.benefit_claimsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefit_claimsPayload>
          }
          deleteMany: {
            args: Prisma.benefit_claimsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.benefit_claimsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.benefit_claimsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefit_claimsPayload>
          }
          aggregate: {
            args: Prisma.Benefit_claimsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBenefit_claims>
          }
          groupBy: {
            args: Prisma.benefit_claimsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Benefit_claimsGroupByOutputType>[]
          }
          count: {
            args: Prisma.benefit_claimsCountArgs<ExtArgs>
            result: $Utils.Optional<Benefit_claimsCountAggregateOutputType> | number
          }
        }
      }
      faq: {
        payload: Prisma.$faqPayload<ExtArgs>
        fields: Prisma.faqFieldRefs
        operations: {
          findUnique: {
            args: Prisma.faqFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.faqFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqPayload>
          }
          findFirst: {
            args: Prisma.faqFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.faqFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqPayload>
          }
          findMany: {
            args: Prisma.faqFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqPayload>[]
          }
          create: {
            args: Prisma.faqCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqPayload>
          }
          createMany: {
            args: Prisma.faqCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.faqCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqPayload>[]
          }
          delete: {
            args: Prisma.faqDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqPayload>
          }
          update: {
            args: Prisma.faqUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqPayload>
          }
          deleteMany: {
            args: Prisma.faqDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.faqUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.faqUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqPayload>
          }
          aggregate: {
            args: Prisma.FaqAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFaq>
          }
          groupBy: {
            args: Prisma.faqGroupByArgs<ExtArgs>
            result: $Utils.Optional<FaqGroupByOutputType>[]
          }
          count: {
            args: Prisma.faqCountArgs<ExtArgs>
            result: $Utils.Optional<FaqCountAggregateOutputType> | number
          }
        }
      }
      guides_tutorials: {
        payload: Prisma.$guides_tutorialsPayload<ExtArgs>
        fields: Prisma.guides_tutorialsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.guides_tutorialsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guides_tutorialsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.guides_tutorialsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guides_tutorialsPayload>
          }
          findFirst: {
            args: Prisma.guides_tutorialsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guides_tutorialsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.guides_tutorialsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guides_tutorialsPayload>
          }
          findMany: {
            args: Prisma.guides_tutorialsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guides_tutorialsPayload>[]
          }
          create: {
            args: Prisma.guides_tutorialsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guides_tutorialsPayload>
          }
          createMany: {
            args: Prisma.guides_tutorialsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.guides_tutorialsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guides_tutorialsPayload>[]
          }
          delete: {
            args: Prisma.guides_tutorialsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guides_tutorialsPayload>
          }
          update: {
            args: Prisma.guides_tutorialsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guides_tutorialsPayload>
          }
          deleteMany: {
            args: Prisma.guides_tutorialsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.guides_tutorialsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.guides_tutorialsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$guides_tutorialsPayload>
          }
          aggregate: {
            args: Prisma.Guides_tutorialsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGuides_tutorials>
          }
          groupBy: {
            args: Prisma.guides_tutorialsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Guides_tutorialsGroupByOutputType>[]
          }
          count: {
            args: Prisma.guides_tutorialsCountArgs<ExtArgs>
            result: $Utils.Optional<Guides_tutorialsCountAggregateOutputType> | number
          }
        }
      }
      benefits_types: {
        payload: Prisma.$benefits_typesPayload<ExtArgs>
        fields: Prisma.benefits_typesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.benefits_typesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefits_typesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.benefits_typesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefits_typesPayload>
          }
          findFirst: {
            args: Prisma.benefits_typesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefits_typesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.benefits_typesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefits_typesPayload>
          }
          findMany: {
            args: Prisma.benefits_typesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefits_typesPayload>[]
          }
          create: {
            args: Prisma.benefits_typesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefits_typesPayload>
          }
          createMany: {
            args: Prisma.benefits_typesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.benefits_typesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefits_typesPayload>[]
          }
          delete: {
            args: Prisma.benefits_typesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefits_typesPayload>
          }
          update: {
            args: Prisma.benefits_typesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefits_typesPayload>
          }
          deleteMany: {
            args: Prisma.benefits_typesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.benefits_typesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.benefits_typesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$benefits_typesPayload>
          }
          aggregate: {
            args: Prisma.Benefits_typesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBenefits_types>
          }
          groupBy: {
            args: Prisma.benefits_typesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Benefits_typesGroupByOutputType>[]
          }
          count: {
            args: Prisma.benefits_typesCountArgs<ExtArgs>
            result: $Utils.Optional<Benefits_typesCountAggregateOutputType> | number
          }
        }
      }
      faqs_category: {
        payload: Prisma.$faqs_categoryPayload<ExtArgs>
        fields: Prisma.faqs_categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.faqs_categoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqs_categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.faqs_categoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqs_categoryPayload>
          }
          findFirst: {
            args: Prisma.faqs_categoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqs_categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.faqs_categoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqs_categoryPayload>
          }
          findMany: {
            args: Prisma.faqs_categoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqs_categoryPayload>[]
          }
          create: {
            args: Prisma.faqs_categoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqs_categoryPayload>
          }
          createMany: {
            args: Prisma.faqs_categoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.faqs_categoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqs_categoryPayload>[]
          }
          delete: {
            args: Prisma.faqs_categoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqs_categoryPayload>
          }
          update: {
            args: Prisma.faqs_categoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqs_categoryPayload>
          }
          deleteMany: {
            args: Prisma.faqs_categoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.faqs_categoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.faqs_categoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$faqs_categoryPayload>
          }
          aggregate: {
            args: Prisma.Faqs_categoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFaqs_category>
          }
          groupBy: {
            args: Prisma.faqs_categoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<Faqs_categoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.faqs_categoryCountArgs<ExtArgs>
            result: $Utils.Optional<Faqs_categoryCountAggregateOutputType> | number
          }
        }
      }
      user_security_questions: {
        payload: Prisma.$user_security_questionsPayload<ExtArgs>
        fields: Prisma.user_security_questionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_security_questionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_security_questionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_security_questionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_security_questionsPayload>
          }
          findFirst: {
            args: Prisma.user_security_questionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_security_questionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_security_questionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_security_questionsPayload>
          }
          findMany: {
            args: Prisma.user_security_questionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_security_questionsPayload>[]
          }
          create: {
            args: Prisma.user_security_questionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_security_questionsPayload>
          }
          createMany: {
            args: Prisma.user_security_questionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_security_questionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_security_questionsPayload>[]
          }
          delete: {
            args: Prisma.user_security_questionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_security_questionsPayload>
          }
          update: {
            args: Prisma.user_security_questionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_security_questionsPayload>
          }
          deleteMany: {
            args: Prisma.user_security_questionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_security_questionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.user_security_questionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_security_questionsPayload>
          }
          aggregate: {
            args: Prisma.User_security_questionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_security_questions>
          }
          groupBy: {
            args: Prisma.user_security_questionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_security_questionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_security_questionsCountArgs<ExtArgs>
            result: $Utils.Optional<User_security_questionsCountAggregateOutputType> | number
          }
        }
      }
      security_question: {
        payload: Prisma.$security_questionPayload<ExtArgs>
        fields: Prisma.security_questionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.security_questionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$security_questionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.security_questionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$security_questionPayload>
          }
          findFirst: {
            args: Prisma.security_questionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$security_questionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.security_questionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$security_questionPayload>
          }
          findMany: {
            args: Prisma.security_questionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$security_questionPayload>[]
          }
          create: {
            args: Prisma.security_questionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$security_questionPayload>
          }
          createMany: {
            args: Prisma.security_questionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.security_questionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$security_questionPayload>[]
          }
          delete: {
            args: Prisma.security_questionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$security_questionPayload>
          }
          update: {
            args: Prisma.security_questionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$security_questionPayload>
          }
          deleteMany: {
            args: Prisma.security_questionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.security_questionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.security_questionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$security_questionPayload>
          }
          aggregate: {
            args: Prisma.Security_questionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSecurity_question>
          }
          groupBy: {
            args: Prisma.security_questionGroupByArgs<ExtArgs>
            result: $Utils.Optional<Security_questionGroupByOutputType>[]
          }
          count: {
            args: Prisma.security_questionCountArgs<ExtArgs>
            result: $Utils.Optional<Security_questionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    contributions: number
    notifications: number
    benefit_claims: number
    user_info: number
    security_questions: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | UsersCountOutputTypeCountContributionsArgs
    notifications?: boolean | UsersCountOutputTypeCountNotificationsArgs
    benefit_claims?: boolean | UsersCountOutputTypeCountBenefit_claimsArgs
    user_info?: boolean | UsersCountOutputTypeCountUser_infoArgs
    security_questions?: boolean | UsersCountOutputTypeCountSecurity_questionsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contributionsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBenefit_claimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: benefit_claimsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUser_infoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_infoWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSecurity_questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_security_questionsWhereInput
  }


  /**
   * Count Type ContributionsCountOutputType
   */

  export type ContributionsCountOutputType = {
    notifications: number
  }

  export type ContributionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | ContributionsCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * ContributionsCountOutputType without action
   */
  export type ContributionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContributionsCountOutputType
     */
    select?: ContributionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContributionsCountOutputType without action
   */
  export type ContributionsCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }


  /**
   * Count Type Agency_informationCountOutputType
   */

  export type Agency_informationCountOutputType = {
    contributions: number
    benefit_claims: number
    benefits_types: number
    notifications: number
  }

  export type Agency_informationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | Agency_informationCountOutputTypeCountContributionsArgs
    benefit_claims?: boolean | Agency_informationCountOutputTypeCountBenefit_claimsArgs
    benefits_types?: boolean | Agency_informationCountOutputTypeCountBenefits_typesArgs
    notifications?: boolean | Agency_informationCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * Agency_informationCountOutputType without action
   */
  export type Agency_informationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency_informationCountOutputType
     */
    select?: Agency_informationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Agency_informationCountOutputType without action
   */
  export type Agency_informationCountOutputTypeCountContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contributionsWhereInput
  }

  /**
   * Agency_informationCountOutputType without action
   */
  export type Agency_informationCountOutputTypeCountBenefit_claimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: benefit_claimsWhereInput
  }

  /**
   * Agency_informationCountOutputType without action
   */
  export type Agency_informationCountOutputTypeCountBenefits_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: benefits_typesWhereInput
  }

  /**
   * Agency_informationCountOutputType without action
   */
  export type Agency_informationCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
  }


  /**
   * Count Type Benefits_typesCountOutputType
   */

  export type Benefits_typesCountOutputType = {
    benefit_claims: number
  }

  export type Benefits_typesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    benefit_claims?: boolean | Benefits_typesCountOutputTypeCountBenefit_claimsArgs
  }

  // Custom InputTypes
  /**
   * Benefits_typesCountOutputType without action
   */
  export type Benefits_typesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Benefits_typesCountOutputType
     */
    select?: Benefits_typesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Benefits_typesCountOutputType without action
   */
  export type Benefits_typesCountOutputTypeCountBenefit_claimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: benefit_claimsWhereInput
  }


  /**
   * Count Type Faqs_categoryCountOutputType
   */

  export type Faqs_categoryCountOutputType = {
    faq: number
  }

  export type Faqs_categoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faq?: boolean | Faqs_categoryCountOutputTypeCountFaqArgs
  }

  // Custom InputTypes
  /**
   * Faqs_categoryCountOutputType without action
   */
  export type Faqs_categoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faqs_categoryCountOutputType
     */
    select?: Faqs_categoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Faqs_categoryCountOutputType without action
   */
  export type Faqs_categoryCountOutputTypeCountFaqArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: faqWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    userID: number | null
    isVerified: number | null
    postal_code: number | null
    role_Id: number | null
  }

  export type UsersSumAggregateOutputType = {
    userID: number | null
    isVerified: number | null
    postal_code: number | null
    role_Id: number | null
  }

  export type UsersMinAggregateOutputType = {
    userID: number | null
    username: string | null
    password: string | null
    email: string | null
    phone_number: string | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    date_of_birth: Date | null
    address: string | null
    telephone_number: string | null
    create_at: Date | null
    updated_at: Date | null
    status: string | null
    isVerified: number | null
    last_login: Date | null
    workStartDate: Date | null
    suffix: string | null
    sex: string | null
    barangay: string | null
    city_municipal: string | null
    postal_code: number | null
    country: string | null
    province: string | null
    sss_id: string | null
    pagibig_id: string | null
    philhealth_id: string | null
    tin: string | null
    nationality: string | null
    civil_status: string | null
    placeof_birth: string | null
    religion: string | null
    subdivision: string | null
    street: string | null
    house: string | null
    room: string | null
    role_Id: number | null
  }

  export type UsersMaxAggregateOutputType = {
    userID: number | null
    username: string | null
    password: string | null
    email: string | null
    phone_number: string | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    date_of_birth: Date | null
    address: string | null
    telephone_number: string | null
    create_at: Date | null
    updated_at: Date | null
    status: string | null
    isVerified: number | null
    last_login: Date | null
    workStartDate: Date | null
    suffix: string | null
    sex: string | null
    barangay: string | null
    city_municipal: string | null
    postal_code: number | null
    country: string | null
    province: string | null
    sss_id: string | null
    pagibig_id: string | null
    philhealth_id: string | null
    tin: string | null
    nationality: string | null
    civil_status: string | null
    placeof_birth: string | null
    religion: string | null
    subdivision: string | null
    street: string | null
    house: string | null
    room: string | null
    role_Id: number | null
  }

  export type UsersCountAggregateOutputType = {
    userID: number
    username: number
    password: number
    email: number
    phone_number: number
    first_name: number
    middle_name: number
    last_name: number
    date_of_birth: number
    address: number
    telephone_number: number
    create_at: number
    updated_at: number
    status: number
    isVerified: number
    last_login: number
    workStartDate: number
    suffix: number
    sex: number
    barangay: number
    city_municipal: number
    postal_code: number
    country: number
    province: number
    sss_id: number
    pagibig_id: number
    philhealth_id: number
    tin: number
    nationality: number
    civil_status: number
    placeof_birth: number
    religion: number
    subdivision: number
    street: number
    house: number
    room: number
    role_Id: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    userID?: true
    isVerified?: true
    postal_code?: true
    role_Id?: true
  }

  export type UsersSumAggregateInputType = {
    userID?: true
    isVerified?: true
    postal_code?: true
    role_Id?: true
  }

  export type UsersMinAggregateInputType = {
    userID?: true
    username?: true
    password?: true
    email?: true
    phone_number?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    date_of_birth?: true
    address?: true
    telephone_number?: true
    create_at?: true
    updated_at?: true
    status?: true
    isVerified?: true
    last_login?: true
    workStartDate?: true
    suffix?: true
    sex?: true
    barangay?: true
    city_municipal?: true
    postal_code?: true
    country?: true
    province?: true
    sss_id?: true
    pagibig_id?: true
    philhealth_id?: true
    tin?: true
    nationality?: true
    civil_status?: true
    placeof_birth?: true
    religion?: true
    subdivision?: true
    street?: true
    house?: true
    room?: true
    role_Id?: true
  }

  export type UsersMaxAggregateInputType = {
    userID?: true
    username?: true
    password?: true
    email?: true
    phone_number?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    date_of_birth?: true
    address?: true
    telephone_number?: true
    create_at?: true
    updated_at?: true
    status?: true
    isVerified?: true
    last_login?: true
    workStartDate?: true
    suffix?: true
    sex?: true
    barangay?: true
    city_municipal?: true
    postal_code?: true
    country?: true
    province?: true
    sss_id?: true
    pagibig_id?: true
    philhealth_id?: true
    tin?: true
    nationality?: true
    civil_status?: true
    placeof_birth?: true
    religion?: true
    subdivision?: true
    street?: true
    house?: true
    room?: true
    role_Id?: true
  }

  export type UsersCountAggregateInputType = {
    userID?: true
    username?: true
    password?: true
    email?: true
    phone_number?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    date_of_birth?: true
    address?: true
    telephone_number?: true
    create_at?: true
    updated_at?: true
    status?: true
    isVerified?: true
    last_login?: true
    workStartDate?: true
    suffix?: true
    sex?: true
    barangay?: true
    city_municipal?: true
    postal_code?: true
    country?: true
    province?: true
    sss_id?: true
    pagibig_id?: true
    philhealth_id?: true
    tin?: true
    nationality?: true
    civil_status?: true
    placeof_birth?: true
    religion?: true
    subdivision?: true
    street?: true
    house?: true
    room?: true
    role_Id?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    userID: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name: string | null
    last_name: string
    date_of_birth: Date
    address: string | null
    telephone_number: string | null
    create_at: Date
    updated_at: Date | null
    status: string
    isVerified: number
    last_login: Date | null
    workStartDate: Date | null
    suffix: string | null
    sex: string | null
    barangay: string | null
    city_municipal: string | null
    postal_code: number | null
    country: string | null
    province: string | null
    sss_id: string | null
    pagibig_id: string | null
    philhealth_id: string | null
    tin: string | null
    nationality: string | null
    civil_status: string | null
    placeof_birth: string | null
    religion: string | null
    subdivision: string | null
    street: string | null
    house: string | null
    room: string | null
    role_Id: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userID?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phone_number?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    date_of_birth?: boolean
    address?: boolean
    telephone_number?: boolean
    create_at?: boolean
    updated_at?: boolean
    status?: boolean
    isVerified?: boolean
    last_login?: boolean
    workStartDate?: boolean
    suffix?: boolean
    sex?: boolean
    barangay?: boolean
    city_municipal?: boolean
    postal_code?: boolean
    country?: boolean
    province?: boolean
    sss_id?: boolean
    pagibig_id?: boolean
    philhealth_id?: boolean
    tin?: boolean
    nationality?: boolean
    civil_status?: boolean
    placeof_birth?: boolean
    religion?: boolean
    subdivision?: boolean
    street?: boolean
    house?: boolean
    room?: boolean
    role_Id?: boolean
    contributions?: boolean | Users$contributionsArgs<ExtArgs>
    notifications?: boolean | Users$notificationsArgs<ExtArgs>
    benefit_claims?: boolean | Users$benefit_claimsArgs<ExtArgs>
    user_info?: boolean | Users$user_infoArgs<ExtArgs>
    security_questions?: boolean | Users$security_questionsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userID?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phone_number?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    date_of_birth?: boolean
    address?: boolean
    telephone_number?: boolean
    create_at?: boolean
    updated_at?: boolean
    status?: boolean
    isVerified?: boolean
    last_login?: boolean
    workStartDate?: boolean
    suffix?: boolean
    sex?: boolean
    barangay?: boolean
    city_municipal?: boolean
    postal_code?: boolean
    country?: boolean
    province?: boolean
    sss_id?: boolean
    pagibig_id?: boolean
    philhealth_id?: boolean
    tin?: boolean
    nationality?: boolean
    civil_status?: boolean
    placeof_birth?: boolean
    religion?: boolean
    subdivision?: boolean
    street?: boolean
    house?: boolean
    room?: boolean
    role_Id?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    userID?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phone_number?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    date_of_birth?: boolean
    address?: boolean
    telephone_number?: boolean
    create_at?: boolean
    updated_at?: boolean
    status?: boolean
    isVerified?: boolean
    last_login?: boolean
    workStartDate?: boolean
    suffix?: boolean
    sex?: boolean
    barangay?: boolean
    city_municipal?: boolean
    postal_code?: boolean
    country?: boolean
    province?: boolean
    sss_id?: boolean
    pagibig_id?: boolean
    philhealth_id?: boolean
    tin?: boolean
    nationality?: boolean
    civil_status?: boolean
    placeof_birth?: boolean
    religion?: boolean
    subdivision?: boolean
    street?: boolean
    house?: boolean
    room?: boolean
    role_Id?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | Users$contributionsArgs<ExtArgs>
    notifications?: boolean | Users$notificationsArgs<ExtArgs>
    benefit_claims?: boolean | Users$benefit_claimsArgs<ExtArgs>
    user_info?: boolean | Users$user_infoArgs<ExtArgs>
    security_questions?: boolean | Users$security_questionsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      contributions: Prisma.$contributionsPayload<ExtArgs>[]
      notifications: Prisma.$notificationsPayload<ExtArgs>[]
      benefit_claims: Prisma.$benefit_claimsPayload<ExtArgs>[]
      user_info: Prisma.$user_infoPayload<ExtArgs>[]
      security_questions: Prisma.$user_security_questionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userID: number
      username: string
      password: string
      email: string
      phone_number: string
      first_name: string
      middle_name: string | null
      last_name: string
      date_of_birth: Date
      address: string | null
      telephone_number: string | null
      create_at: Date
      updated_at: Date | null
      status: string
      isVerified: number
      last_login: Date | null
      workStartDate: Date | null
      suffix: string | null
      sex: string | null
      barangay: string | null
      city_municipal: string | null
      postal_code: number | null
      country: string | null
      province: string | null
      sss_id: string | null
      pagibig_id: string | null
      philhealth_id: string | null
      tin: string | null
      nationality: string | null
      civil_status: string | null
      placeof_birth: string | null
      religion: string | null
      subdivision: string | null
      street: string | null
      house: string | null
      room: string | null
      role_Id: number | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `userID`
     * const usersWithUserIDOnly = await prisma.users.findMany({ select: { userID: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userID`
     * const usersWithUserIDOnly = await prisma.users.createManyAndReturn({ 
     *   select: { userID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contributions<T extends Users$contributionsArgs<ExtArgs> = {}>(args?: Subset<T, Users$contributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends Users$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Users$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findMany"> | Null>
    benefit_claims<T extends Users$benefit_claimsArgs<ExtArgs> = {}>(args?: Subset<T, Users$benefit_claimsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "findMany"> | Null>
    user_info<T extends Users$user_infoArgs<ExtArgs> = {}>(args?: Subset<T, Users$user_infoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "findMany"> | Null>
    security_questions<T extends Users$security_questionsArgs<ExtArgs> = {}>(args?: Subset<T, Users$security_questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly userID: FieldRef<"Users", 'Int'>
    readonly username: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly phone_number: FieldRef<"Users", 'String'>
    readonly first_name: FieldRef<"Users", 'String'>
    readonly middle_name: FieldRef<"Users", 'String'>
    readonly last_name: FieldRef<"Users", 'String'>
    readonly date_of_birth: FieldRef<"Users", 'DateTime'>
    readonly address: FieldRef<"Users", 'String'>
    readonly telephone_number: FieldRef<"Users", 'String'>
    readonly create_at: FieldRef<"Users", 'DateTime'>
    readonly updated_at: FieldRef<"Users", 'DateTime'>
    readonly status: FieldRef<"Users", 'String'>
    readonly isVerified: FieldRef<"Users", 'Int'>
    readonly last_login: FieldRef<"Users", 'DateTime'>
    readonly workStartDate: FieldRef<"Users", 'DateTime'>
    readonly suffix: FieldRef<"Users", 'String'>
    readonly sex: FieldRef<"Users", 'String'>
    readonly barangay: FieldRef<"Users", 'String'>
    readonly city_municipal: FieldRef<"Users", 'String'>
    readonly postal_code: FieldRef<"Users", 'Int'>
    readonly country: FieldRef<"Users", 'String'>
    readonly province: FieldRef<"Users", 'String'>
    readonly sss_id: FieldRef<"Users", 'String'>
    readonly pagibig_id: FieldRef<"Users", 'String'>
    readonly philhealth_id: FieldRef<"Users", 'String'>
    readonly tin: FieldRef<"Users", 'String'>
    readonly nationality: FieldRef<"Users", 'String'>
    readonly civil_status: FieldRef<"Users", 'String'>
    readonly placeof_birth: FieldRef<"Users", 'String'>
    readonly religion: FieldRef<"Users", 'String'>
    readonly subdivision: FieldRef<"Users", 'String'>
    readonly street: FieldRef<"Users", 'String'>
    readonly house: FieldRef<"Users", 'String'>
    readonly room: FieldRef<"Users", 'String'>
    readonly role_Id: FieldRef<"Users", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.contributions
   */
  export type Users$contributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    where?: contributionsWhereInput
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    cursor?: contributionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContributionsScalarFieldEnum | ContributionsScalarFieldEnum[]
  }

  /**
   * Users.notifications
   */
  export type Users$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * Users.benefit_claims
   */
  export type Users$benefit_claimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    where?: benefit_claimsWhereInput
    orderBy?: benefit_claimsOrderByWithRelationInput | benefit_claimsOrderByWithRelationInput[]
    cursor?: benefit_claimsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Benefit_claimsScalarFieldEnum | Benefit_claimsScalarFieldEnum[]
  }

  /**
   * Users.user_info
   */
  export type Users$user_infoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
    where?: user_infoWhereInput
    orderBy?: user_infoOrderByWithRelationInput | user_infoOrderByWithRelationInput[]
    cursor?: user_infoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_infoScalarFieldEnum | User_infoScalarFieldEnum[]
  }

  /**
   * Users.security_questions
   */
  export type Users$security_questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
    where?: user_security_questionsWhereInput
    orderBy?: user_security_questionsOrderByWithRelationInput | user_security_questionsOrderByWithRelationInput[]
    cursor?: user_security_questionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_security_questionsScalarFieldEnum | User_security_questionsScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model user_info
   */

  export type AggregateUser_info = {
    _count: User_infoCountAggregateOutputType | null
    _avg: User_infoAvgAggregateOutputType | null
    _sum: User_infoSumAggregateOutputType | null
    _min: User_infoMinAggregateOutputType | null
    _max: User_infoMaxAggregateOutputType | null
  }

  export type User_infoAvgAggregateOutputType = {
    id: number | null
    users_id: number | null
  }

  export type User_infoSumAggregateOutputType = {
    id: number | null
    users_id: number | null
  }

  export type User_infoMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    suffix: string | null
    DOB: Date | null
    relationship: string | null
    contact_number: string | null
    user_sex: string | null
    education: string | null
    users_id: number | null
  }

  export type User_infoMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    suffix: string | null
    DOB: Date | null
    relationship: string | null
    contact_number: string | null
    user_sex: string | null
    education: string | null
    users_id: number | null
  }

  export type User_infoCountAggregateOutputType = {
    id: number
    first_name: number
    middle_name: number
    last_name: number
    suffix: number
    DOB: number
    relationship: number
    contact_number: number
    user_sex: number
    education: number
    users_id: number
    _all: number
  }


  export type User_infoAvgAggregateInputType = {
    id?: true
    users_id?: true
  }

  export type User_infoSumAggregateInputType = {
    id?: true
    users_id?: true
  }

  export type User_infoMinAggregateInputType = {
    id?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    suffix?: true
    DOB?: true
    relationship?: true
    contact_number?: true
    user_sex?: true
    education?: true
    users_id?: true
  }

  export type User_infoMaxAggregateInputType = {
    id?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    suffix?: true
    DOB?: true
    relationship?: true
    contact_number?: true
    user_sex?: true
    education?: true
    users_id?: true
  }

  export type User_infoCountAggregateInputType = {
    id?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    suffix?: true
    DOB?: true
    relationship?: true
    contact_number?: true
    user_sex?: true
    education?: true
    users_id?: true
    _all?: true
  }

  export type User_infoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_info to aggregate.
     */
    where?: user_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_infos to fetch.
     */
    orderBy?: user_infoOrderByWithRelationInput | user_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_infos
    **/
    _count?: true | User_infoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_infoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_infoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_infoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_infoMaxAggregateInputType
  }

  export type GetUser_infoAggregateType<T extends User_infoAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_info]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_info[P]>
      : GetScalarType<T[P], AggregateUser_info[P]>
  }




  export type user_infoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_infoWhereInput
    orderBy?: user_infoOrderByWithAggregationInput | user_infoOrderByWithAggregationInput[]
    by: User_infoScalarFieldEnum[] | User_infoScalarFieldEnum
    having?: user_infoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_infoCountAggregateInputType | true
    _avg?: User_infoAvgAggregateInputType
    _sum?: User_infoSumAggregateInputType
    _min?: User_infoMinAggregateInputType
    _max?: User_infoMaxAggregateInputType
  }

  export type User_infoGroupByOutputType = {
    id: number
    first_name: string
    middle_name: string
    last_name: string
    suffix: string | null
    DOB: Date
    relationship: string
    contact_number: string | null
    user_sex: string | null
    education: string | null
    users_id: number
    _count: User_infoCountAggregateOutputType | null
    _avg: User_infoAvgAggregateOutputType | null
    _sum: User_infoSumAggregateOutputType | null
    _min: User_infoMinAggregateOutputType | null
    _max: User_infoMaxAggregateOutputType | null
  }

  type GetUser_infoGroupByPayload<T extends user_infoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_infoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_infoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_infoGroupByOutputType[P]>
            : GetScalarType<T[P], User_infoGroupByOutputType[P]>
        }
      >
    >


  export type user_infoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    suffix?: boolean
    DOB?: boolean
    relationship?: boolean
    contact_number?: boolean
    user_sex?: boolean
    education?: boolean
    users_id?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_info"]>

  export type user_infoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    suffix?: boolean
    DOB?: boolean
    relationship?: boolean
    contact_number?: boolean
    user_sex?: boolean
    education?: boolean
    users_id?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_info"]>

  export type user_infoSelectScalar = {
    id?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    suffix?: boolean
    DOB?: boolean
    relationship?: boolean
    contact_number?: boolean
    user_sex?: boolean
    education?: boolean
    users_id?: boolean
  }

  export type user_infoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type user_infoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $user_infoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_info"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      first_name: string
      middle_name: string
      last_name: string
      suffix: string | null
      DOB: Date
      relationship: string
      contact_number: string | null
      user_sex: string | null
      education: string | null
      users_id: number
    }, ExtArgs["result"]["user_info"]>
    composites: {}
  }

  type user_infoGetPayload<S extends boolean | null | undefined | user_infoDefaultArgs> = $Result.GetResult<Prisma.$user_infoPayload, S>

  type user_infoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_infoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_infoCountAggregateInputType | true
    }

  export interface user_infoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_info'], meta: { name: 'user_info' } }
    /**
     * Find zero or one User_info that matches the filter.
     * @param {user_infoFindUniqueArgs} args - Arguments to find a User_info
     * @example
     * // Get one User_info
     * const user_info = await prisma.user_info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_infoFindUniqueArgs>(args: SelectSubset<T, user_infoFindUniqueArgs<ExtArgs>>): Prisma__user_infoClient<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User_info that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {user_infoFindUniqueOrThrowArgs} args - Arguments to find a User_info
     * @example
     * // Get one User_info
     * const user_info = await prisma.user_info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_infoFindUniqueOrThrowArgs>(args: SelectSubset<T, user_infoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_infoClient<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User_info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_infoFindFirstArgs} args - Arguments to find a User_info
     * @example
     * // Get one User_info
     * const user_info = await prisma.user_info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_infoFindFirstArgs>(args?: SelectSubset<T, user_infoFindFirstArgs<ExtArgs>>): Prisma__user_infoClient<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User_info that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_infoFindFirstOrThrowArgs} args - Arguments to find a User_info
     * @example
     * // Get one User_info
     * const user_info = await prisma.user_info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_infoFindFirstOrThrowArgs>(args?: SelectSubset<T, user_infoFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_infoClient<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more User_infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_infoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_infos
     * const user_infos = await prisma.user_info.findMany()
     * 
     * // Get first 10 User_infos
     * const user_infos = await prisma.user_info.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_infoWithIdOnly = await prisma.user_info.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_infoFindManyArgs>(args?: SelectSubset<T, user_infoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User_info.
     * @param {user_infoCreateArgs} args - Arguments to create a User_info.
     * @example
     * // Create one User_info
     * const User_info = await prisma.user_info.create({
     *   data: {
     *     // ... data to create a User_info
     *   }
     * })
     * 
     */
    create<T extends user_infoCreateArgs>(args: SelectSubset<T, user_infoCreateArgs<ExtArgs>>): Prisma__user_infoClient<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many User_infos.
     * @param {user_infoCreateManyArgs} args - Arguments to create many User_infos.
     * @example
     * // Create many User_infos
     * const user_info = await prisma.user_info.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_infoCreateManyArgs>(args?: SelectSubset<T, user_infoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_infos and returns the data saved in the database.
     * @param {user_infoCreateManyAndReturnArgs} args - Arguments to create many User_infos.
     * @example
     * // Create many User_infos
     * const user_info = await prisma.user_info.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_infos and only return the `id`
     * const user_infoWithIdOnly = await prisma.user_info.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_infoCreateManyAndReturnArgs>(args?: SelectSubset<T, user_infoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User_info.
     * @param {user_infoDeleteArgs} args - Arguments to delete one User_info.
     * @example
     * // Delete one User_info
     * const User_info = await prisma.user_info.delete({
     *   where: {
     *     // ... filter to delete one User_info
     *   }
     * })
     * 
     */
    delete<T extends user_infoDeleteArgs>(args: SelectSubset<T, user_infoDeleteArgs<ExtArgs>>): Prisma__user_infoClient<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User_info.
     * @param {user_infoUpdateArgs} args - Arguments to update one User_info.
     * @example
     * // Update one User_info
     * const user_info = await prisma.user_info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_infoUpdateArgs>(args: SelectSubset<T, user_infoUpdateArgs<ExtArgs>>): Prisma__user_infoClient<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more User_infos.
     * @param {user_infoDeleteManyArgs} args - Arguments to filter User_infos to delete.
     * @example
     * // Delete a few User_infos
     * const { count } = await prisma.user_info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_infoDeleteManyArgs>(args?: SelectSubset<T, user_infoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_infoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_infos
     * const user_info = await prisma.user_info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_infoUpdateManyArgs>(args: SelectSubset<T, user_infoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_info.
     * @param {user_infoUpsertArgs} args - Arguments to update or create a User_info.
     * @example
     * // Update or create a User_info
     * const user_info = await prisma.user_info.upsert({
     *   create: {
     *     // ... data to create a User_info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_info we want to update
     *   }
     * })
     */
    upsert<T extends user_infoUpsertArgs>(args: SelectSubset<T, user_infoUpsertArgs<ExtArgs>>): Prisma__user_infoClient<$Result.GetResult<Prisma.$user_infoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of User_infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_infoCountArgs} args - Arguments to filter User_infos to count.
     * @example
     * // Count the number of User_infos
     * const count = await prisma.user_info.count({
     *   where: {
     *     // ... the filter for the User_infos we want to count
     *   }
     * })
    **/
    count<T extends user_infoCountArgs>(
      args?: Subset<T, user_infoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_infoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_infoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_infoAggregateArgs>(args: Subset<T, User_infoAggregateArgs>): Prisma.PrismaPromise<GetUser_infoAggregateType<T>>

    /**
     * Group by User_info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_infoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_infoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_infoGroupByArgs['orderBy'] }
        : { orderBy?: user_infoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_infoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_infoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_info model
   */
  readonly fields: user_infoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_infoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_info model
   */ 
  interface user_infoFieldRefs {
    readonly id: FieldRef<"user_info", 'Int'>
    readonly first_name: FieldRef<"user_info", 'String'>
    readonly middle_name: FieldRef<"user_info", 'String'>
    readonly last_name: FieldRef<"user_info", 'String'>
    readonly suffix: FieldRef<"user_info", 'String'>
    readonly DOB: FieldRef<"user_info", 'DateTime'>
    readonly relationship: FieldRef<"user_info", 'String'>
    readonly contact_number: FieldRef<"user_info", 'String'>
    readonly user_sex: FieldRef<"user_info", 'String'>
    readonly education: FieldRef<"user_info", 'String'>
    readonly users_id: FieldRef<"user_info", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * user_info findUnique
   */
  export type user_infoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
    /**
     * Filter, which user_info to fetch.
     */
    where: user_infoWhereUniqueInput
  }

  /**
   * user_info findUniqueOrThrow
   */
  export type user_infoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
    /**
     * Filter, which user_info to fetch.
     */
    where: user_infoWhereUniqueInput
  }

  /**
   * user_info findFirst
   */
  export type user_infoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
    /**
     * Filter, which user_info to fetch.
     */
    where?: user_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_infos to fetch.
     */
    orderBy?: user_infoOrderByWithRelationInput | user_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_infos.
     */
    cursor?: user_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_infos.
     */
    distinct?: User_infoScalarFieldEnum | User_infoScalarFieldEnum[]
  }

  /**
   * user_info findFirstOrThrow
   */
  export type user_infoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
    /**
     * Filter, which user_info to fetch.
     */
    where?: user_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_infos to fetch.
     */
    orderBy?: user_infoOrderByWithRelationInput | user_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_infos.
     */
    cursor?: user_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_infos.
     */
    distinct?: User_infoScalarFieldEnum | User_infoScalarFieldEnum[]
  }

  /**
   * user_info findMany
   */
  export type user_infoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
    /**
     * Filter, which user_infos to fetch.
     */
    where?: user_infoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_infos to fetch.
     */
    orderBy?: user_infoOrderByWithRelationInput | user_infoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_infos.
     */
    cursor?: user_infoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_infos.
     */
    skip?: number
    distinct?: User_infoScalarFieldEnum | User_infoScalarFieldEnum[]
  }

  /**
   * user_info create
   */
  export type user_infoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
    /**
     * The data needed to create a user_info.
     */
    data: XOR<user_infoCreateInput, user_infoUncheckedCreateInput>
  }

  /**
   * user_info createMany
   */
  export type user_infoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_infos.
     */
    data: user_infoCreateManyInput | user_infoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_info createManyAndReturn
   */
  export type user_infoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many user_infos.
     */
    data: user_infoCreateManyInput | user_infoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_info update
   */
  export type user_infoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
    /**
     * The data needed to update a user_info.
     */
    data: XOR<user_infoUpdateInput, user_infoUncheckedUpdateInput>
    /**
     * Choose, which user_info to update.
     */
    where: user_infoWhereUniqueInput
  }

  /**
   * user_info updateMany
   */
  export type user_infoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_infos.
     */
    data: XOR<user_infoUpdateManyMutationInput, user_infoUncheckedUpdateManyInput>
    /**
     * Filter which user_infos to update
     */
    where?: user_infoWhereInput
  }

  /**
   * user_info upsert
   */
  export type user_infoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
    /**
     * The filter to search for the user_info to update in case it exists.
     */
    where: user_infoWhereUniqueInput
    /**
     * In case the user_info found by the `where` argument doesn't exist, create a new user_info with this data.
     */
    create: XOR<user_infoCreateInput, user_infoUncheckedCreateInput>
    /**
     * In case the user_info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_infoUpdateInput, user_infoUncheckedUpdateInput>
  }

  /**
   * user_info delete
   */
  export type user_infoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
    /**
     * Filter which user_info to delete.
     */
    where: user_infoWhereUniqueInput
  }

  /**
   * user_info deleteMany
   */
  export type user_infoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_infos to delete
     */
    where?: user_infoWhereInput
  }

  /**
   * user_info without action
   */
  export type user_infoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_info
     */
    select?: user_infoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_infoInclude<ExtArgs> | null
  }


  /**
   * Model user_roles
   */

  export type AggregateUser_roles = {
    _count: User_rolesCountAggregateOutputType | null
    _avg: User_rolesAvgAggregateOutputType | null
    _sum: User_rolesSumAggregateOutputType | null
    _min: User_rolesMinAggregateOutputType | null
    _max: User_rolesMaxAggregateOutputType | null
  }

  export type User_rolesAvgAggregateOutputType = {
    id: number | null
  }

  export type User_rolesSumAggregateOutputType = {
    id: number | null
  }

  export type User_rolesMinAggregateOutputType = {
    id: number | null
    role_name: string | null
    description: string | null
  }

  export type User_rolesMaxAggregateOutputType = {
    id: number | null
    role_name: string | null
    description: string | null
  }

  export type User_rolesCountAggregateOutputType = {
    id: number
    role_name: number
    description: number
    _all: number
  }


  export type User_rolesAvgAggregateInputType = {
    id?: true
  }

  export type User_rolesSumAggregateInputType = {
    id?: true
  }

  export type User_rolesMinAggregateInputType = {
    id?: true
    role_name?: true
    description?: true
  }

  export type User_rolesMaxAggregateInputType = {
    id?: true
    role_name?: true
    description?: true
  }

  export type User_rolesCountAggregateInputType = {
    id?: true
    role_name?: true
    description?: true
    _all?: true
  }

  export type User_rolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_roles to aggregate.
     */
    where?: user_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_roles to fetch.
     */
    orderBy?: user_rolesOrderByWithRelationInput | user_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_roles
    **/
    _count?: true | User_rolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_rolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_rolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_rolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_rolesMaxAggregateInputType
  }

  export type GetUser_rolesAggregateType<T extends User_rolesAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_roles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_roles[P]>
      : GetScalarType<T[P], AggregateUser_roles[P]>
  }




  export type user_rolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_rolesWhereInput
    orderBy?: user_rolesOrderByWithAggregationInput | user_rolesOrderByWithAggregationInput[]
    by: User_rolesScalarFieldEnum[] | User_rolesScalarFieldEnum
    having?: user_rolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_rolesCountAggregateInputType | true
    _avg?: User_rolesAvgAggregateInputType
    _sum?: User_rolesSumAggregateInputType
    _min?: User_rolesMinAggregateInputType
    _max?: User_rolesMaxAggregateInputType
  }

  export type User_rolesGroupByOutputType = {
    id: number
    role_name: string
    description: string
    _count: User_rolesCountAggregateOutputType | null
    _avg: User_rolesAvgAggregateOutputType | null
    _sum: User_rolesSumAggregateOutputType | null
    _min: User_rolesMinAggregateOutputType | null
    _max: User_rolesMaxAggregateOutputType | null
  }

  type GetUser_rolesGroupByPayload<T extends user_rolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_rolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_rolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_rolesGroupByOutputType[P]>
            : GetScalarType<T[P], User_rolesGroupByOutputType[P]>
        }
      >
    >


  export type user_rolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role_name?: boolean
    description?: boolean
  }, ExtArgs["result"]["user_roles"]>

  export type user_rolesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role_name?: boolean
    description?: boolean
  }, ExtArgs["result"]["user_roles"]>

  export type user_rolesSelectScalar = {
    id?: boolean
    role_name?: boolean
    description?: boolean
  }


  export type $user_rolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_roles"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role_name: string
      description: string
    }, ExtArgs["result"]["user_roles"]>
    composites: {}
  }

  type user_rolesGetPayload<S extends boolean | null | undefined | user_rolesDefaultArgs> = $Result.GetResult<Prisma.$user_rolesPayload, S>

  type user_rolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_rolesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_rolesCountAggregateInputType | true
    }

  export interface user_rolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_roles'], meta: { name: 'user_roles' } }
    /**
     * Find zero or one User_roles that matches the filter.
     * @param {user_rolesFindUniqueArgs} args - Arguments to find a User_roles
     * @example
     * // Get one User_roles
     * const user_roles = await prisma.user_roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_rolesFindUniqueArgs>(args: SelectSubset<T, user_rolesFindUniqueArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User_roles that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {user_rolesFindUniqueOrThrowArgs} args - Arguments to find a User_roles
     * @example
     * // Get one User_roles
     * const user_roles = await prisma.user_roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_rolesFindUniqueOrThrowArgs>(args: SelectSubset<T, user_rolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesFindFirstArgs} args - Arguments to find a User_roles
     * @example
     * // Get one User_roles
     * const user_roles = await prisma.user_roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_rolesFindFirstArgs>(args?: SelectSubset<T, user_rolesFindFirstArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User_roles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesFindFirstOrThrowArgs} args - Arguments to find a User_roles
     * @example
     * // Get one User_roles
     * const user_roles = await prisma.user_roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_rolesFindFirstOrThrowArgs>(args?: SelectSubset<T, user_rolesFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more User_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_roles
     * const user_roles = await prisma.user_roles.findMany()
     * 
     * // Get first 10 User_roles
     * const user_roles = await prisma.user_roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_rolesWithIdOnly = await prisma.user_roles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_rolesFindManyArgs>(args?: SelectSubset<T, user_rolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User_roles.
     * @param {user_rolesCreateArgs} args - Arguments to create a User_roles.
     * @example
     * // Create one User_roles
     * const User_roles = await prisma.user_roles.create({
     *   data: {
     *     // ... data to create a User_roles
     *   }
     * })
     * 
     */
    create<T extends user_rolesCreateArgs>(args: SelectSubset<T, user_rolesCreateArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many User_roles.
     * @param {user_rolesCreateManyArgs} args - Arguments to create many User_roles.
     * @example
     * // Create many User_roles
     * const user_roles = await prisma.user_roles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_rolesCreateManyArgs>(args?: SelectSubset<T, user_rolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_roles and returns the data saved in the database.
     * @param {user_rolesCreateManyAndReturnArgs} args - Arguments to create many User_roles.
     * @example
     * // Create many User_roles
     * const user_roles = await prisma.user_roles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_roles and only return the `id`
     * const user_rolesWithIdOnly = await prisma.user_roles.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_rolesCreateManyAndReturnArgs>(args?: SelectSubset<T, user_rolesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User_roles.
     * @param {user_rolesDeleteArgs} args - Arguments to delete one User_roles.
     * @example
     * // Delete one User_roles
     * const User_roles = await prisma.user_roles.delete({
     *   where: {
     *     // ... filter to delete one User_roles
     *   }
     * })
     * 
     */
    delete<T extends user_rolesDeleteArgs>(args: SelectSubset<T, user_rolesDeleteArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User_roles.
     * @param {user_rolesUpdateArgs} args - Arguments to update one User_roles.
     * @example
     * // Update one User_roles
     * const user_roles = await prisma.user_roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_rolesUpdateArgs>(args: SelectSubset<T, user_rolesUpdateArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more User_roles.
     * @param {user_rolesDeleteManyArgs} args - Arguments to filter User_roles to delete.
     * @example
     * // Delete a few User_roles
     * const { count } = await prisma.user_roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_rolesDeleteManyArgs>(args?: SelectSubset<T, user_rolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_roles
     * const user_roles = await prisma.user_roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_rolesUpdateManyArgs>(args: SelectSubset<T, user_rolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_roles.
     * @param {user_rolesUpsertArgs} args - Arguments to update or create a User_roles.
     * @example
     * // Update or create a User_roles
     * const user_roles = await prisma.user_roles.upsert({
     *   create: {
     *     // ... data to create a User_roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_roles we want to update
     *   }
     * })
     */
    upsert<T extends user_rolesUpsertArgs>(args: SelectSubset<T, user_rolesUpsertArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of User_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesCountArgs} args - Arguments to filter User_roles to count.
     * @example
     * // Count the number of User_roles
     * const count = await prisma.user_roles.count({
     *   where: {
     *     // ... the filter for the User_roles we want to count
     *   }
     * })
    **/
    count<T extends user_rolesCountArgs>(
      args?: Subset<T, user_rolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_rolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_rolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_rolesAggregateArgs>(args: Subset<T, User_rolesAggregateArgs>): Prisma.PrismaPromise<GetUser_rolesAggregateType<T>>

    /**
     * Group by User_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_rolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_rolesGroupByArgs['orderBy'] }
        : { orderBy?: user_rolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_rolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_rolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_roles model
   */
  readonly fields: user_rolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_rolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_roles model
   */ 
  interface user_rolesFieldRefs {
    readonly id: FieldRef<"user_roles", 'Int'>
    readonly role_name: FieldRef<"user_roles", 'String'>
    readonly description: FieldRef<"user_roles", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user_roles findUnique
   */
  export type user_rolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter, which user_roles to fetch.
     */
    where: user_rolesWhereUniqueInput
  }

  /**
   * user_roles findUniqueOrThrow
   */
  export type user_rolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter, which user_roles to fetch.
     */
    where: user_rolesWhereUniqueInput
  }

  /**
   * user_roles findFirst
   */
  export type user_rolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter, which user_roles to fetch.
     */
    where?: user_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_roles to fetch.
     */
    orderBy?: user_rolesOrderByWithRelationInput | user_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_roles.
     */
    cursor?: user_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_roles.
     */
    distinct?: User_rolesScalarFieldEnum | User_rolesScalarFieldEnum[]
  }

  /**
   * user_roles findFirstOrThrow
   */
  export type user_rolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter, which user_roles to fetch.
     */
    where?: user_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_roles to fetch.
     */
    orderBy?: user_rolesOrderByWithRelationInput | user_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_roles.
     */
    cursor?: user_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_roles.
     */
    distinct?: User_rolesScalarFieldEnum | User_rolesScalarFieldEnum[]
  }

  /**
   * user_roles findMany
   */
  export type user_rolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter, which user_roles to fetch.
     */
    where?: user_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_roles to fetch.
     */
    orderBy?: user_rolesOrderByWithRelationInput | user_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_roles.
     */
    cursor?: user_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_roles.
     */
    skip?: number
    distinct?: User_rolesScalarFieldEnum | User_rolesScalarFieldEnum[]
  }

  /**
   * user_roles create
   */
  export type user_rolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * The data needed to create a user_roles.
     */
    data: XOR<user_rolesCreateInput, user_rolesUncheckedCreateInput>
  }

  /**
   * user_roles createMany
   */
  export type user_rolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_roles.
     */
    data: user_rolesCreateManyInput | user_rolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_roles createManyAndReturn
   */
  export type user_rolesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many user_roles.
     */
    data: user_rolesCreateManyInput | user_rolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_roles update
   */
  export type user_rolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * The data needed to update a user_roles.
     */
    data: XOR<user_rolesUpdateInput, user_rolesUncheckedUpdateInput>
    /**
     * Choose, which user_roles to update.
     */
    where: user_rolesWhereUniqueInput
  }

  /**
   * user_roles updateMany
   */
  export type user_rolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_roles.
     */
    data: XOR<user_rolesUpdateManyMutationInput, user_rolesUncheckedUpdateManyInput>
    /**
     * Filter which user_roles to update
     */
    where?: user_rolesWhereInput
  }

  /**
   * user_roles upsert
   */
  export type user_rolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * The filter to search for the user_roles to update in case it exists.
     */
    where: user_rolesWhereUniqueInput
    /**
     * In case the user_roles found by the `where` argument doesn't exist, create a new user_roles with this data.
     */
    create: XOR<user_rolesCreateInput, user_rolesUncheckedCreateInput>
    /**
     * In case the user_roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_rolesUpdateInput, user_rolesUncheckedUpdateInput>
  }

  /**
   * user_roles delete
   */
  export type user_rolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter which user_roles to delete.
     */
    where: user_rolesWhereUniqueInput
  }

  /**
   * user_roles deleteMany
   */
  export type user_rolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_roles to delete
     */
    where?: user_rolesWhereInput
  }

  /**
   * user_roles without action
   */
  export type user_rolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
  }


  /**
   * Model contributions
   */

  export type AggregateContributions = {
    _count: ContributionsCountAggregateOutputType | null
    _avg: ContributionsAvgAggregateOutputType | null
    _sum: ContributionsSumAggregateOutputType | null
    _min: ContributionsMinAggregateOutputType | null
    _max: ContributionsMaxAggregateOutputType | null
  }

  export type ContributionsAvgAggregateOutputType = {
    contribution_id: number | null
    amount: Decimal | null
    userID: number | null
    agency_id: number | null
  }

  export type ContributionsSumAggregateOutputType = {
    contribution_id: number | null
    amount: Decimal | null
    userID: number | null
    agency_id: number | null
  }

  export type ContributionsMinAggregateOutputType = {
    contribution_id: number | null
    amount: Decimal | null
    post_date: Date | null
    status: string | null
    userID: number | null
    agency_id: number | null
  }

  export type ContributionsMaxAggregateOutputType = {
    contribution_id: number | null
    amount: Decimal | null
    post_date: Date | null
    status: string | null
    userID: number | null
    agency_id: number | null
  }

  export type ContributionsCountAggregateOutputType = {
    contribution_id: number
    amount: number
    post_date: number
    status: number
    userID: number
    agency_id: number
    _all: number
  }


  export type ContributionsAvgAggregateInputType = {
    contribution_id?: true
    amount?: true
    userID?: true
    agency_id?: true
  }

  export type ContributionsSumAggregateInputType = {
    contribution_id?: true
    amount?: true
    userID?: true
    agency_id?: true
  }

  export type ContributionsMinAggregateInputType = {
    contribution_id?: true
    amount?: true
    post_date?: true
    status?: true
    userID?: true
    agency_id?: true
  }

  export type ContributionsMaxAggregateInputType = {
    contribution_id?: true
    amount?: true
    post_date?: true
    status?: true
    userID?: true
    agency_id?: true
  }

  export type ContributionsCountAggregateInputType = {
    contribution_id?: true
    amount?: true
    post_date?: true
    status?: true
    userID?: true
    agency_id?: true
    _all?: true
  }

  export type ContributionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contributions to aggregate.
     */
    where?: contributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contributions to fetch.
     */
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: contributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contributions
    **/
    _count?: true | ContributionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContributionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContributionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContributionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContributionsMaxAggregateInputType
  }

  export type GetContributionsAggregateType<T extends ContributionsAggregateArgs> = {
        [P in keyof T & keyof AggregateContributions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContributions[P]>
      : GetScalarType<T[P], AggregateContributions[P]>
  }




  export type contributionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contributionsWhereInput
    orderBy?: contributionsOrderByWithAggregationInput | contributionsOrderByWithAggregationInput[]
    by: ContributionsScalarFieldEnum[] | ContributionsScalarFieldEnum
    having?: contributionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContributionsCountAggregateInputType | true
    _avg?: ContributionsAvgAggregateInputType
    _sum?: ContributionsSumAggregateInputType
    _min?: ContributionsMinAggregateInputType
    _max?: ContributionsMaxAggregateInputType
  }

  export type ContributionsGroupByOutputType = {
    contribution_id: number
    amount: Decimal
    post_date: Date
    status: string
    userID: number
    agency_id: number
    _count: ContributionsCountAggregateOutputType | null
    _avg: ContributionsAvgAggregateOutputType | null
    _sum: ContributionsSumAggregateOutputType | null
    _min: ContributionsMinAggregateOutputType | null
    _max: ContributionsMaxAggregateOutputType | null
  }

  type GetContributionsGroupByPayload<T extends contributionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContributionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContributionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContributionsGroupByOutputType[P]>
            : GetScalarType<T[P], ContributionsGroupByOutputType[P]>
        }
      >
    >


  export type contributionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    contribution_id?: boolean
    amount?: boolean
    post_date?: boolean
    status?: boolean
    userID?: boolean
    agency_id?: boolean
    source?: boolean | agency_informationDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
    notifications?: boolean | contributions$notificationsArgs<ExtArgs>
    _count?: boolean | ContributionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contributions"]>

  export type contributionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    contribution_id?: boolean
    amount?: boolean
    post_date?: boolean
    status?: boolean
    userID?: boolean
    agency_id?: boolean
    source?: boolean | agency_informationDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contributions"]>

  export type contributionsSelectScalar = {
    contribution_id?: boolean
    amount?: boolean
    post_date?: boolean
    status?: boolean
    userID?: boolean
    agency_id?: boolean
  }

  export type contributionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    source?: boolean | agency_informationDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
    notifications?: boolean | contributions$notificationsArgs<ExtArgs>
    _count?: boolean | ContributionsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type contributionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    source?: boolean | agency_informationDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $contributionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "contributions"
    objects: {
      source: Prisma.$agency_informationPayload<ExtArgs>
      user: Prisma.$UsersPayload<ExtArgs>
      notifications: Prisma.$notificationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      contribution_id: number
      amount: Prisma.Decimal
      post_date: Date
      status: string
      userID: number
      agency_id: number
    }, ExtArgs["result"]["contributions"]>
    composites: {}
  }

  type contributionsGetPayload<S extends boolean | null | undefined | contributionsDefaultArgs> = $Result.GetResult<Prisma.$contributionsPayload, S>

  type contributionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<contributionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContributionsCountAggregateInputType | true
    }

  export interface contributionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['contributions'], meta: { name: 'contributions' } }
    /**
     * Find zero or one Contributions that matches the filter.
     * @param {contributionsFindUniqueArgs} args - Arguments to find a Contributions
     * @example
     * // Get one Contributions
     * const contributions = await prisma.contributions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends contributionsFindUniqueArgs>(args: SelectSubset<T, contributionsFindUniqueArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contributions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {contributionsFindUniqueOrThrowArgs} args - Arguments to find a Contributions
     * @example
     * // Get one Contributions
     * const contributions = await prisma.contributions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends contributionsFindUniqueOrThrowArgs>(args: SelectSubset<T, contributionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsFindFirstArgs} args - Arguments to find a Contributions
     * @example
     * // Get one Contributions
     * const contributions = await prisma.contributions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends contributionsFindFirstArgs>(args?: SelectSubset<T, contributionsFindFirstArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contributions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsFindFirstOrThrowArgs} args - Arguments to find a Contributions
     * @example
     * // Get one Contributions
     * const contributions = await prisma.contributions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends contributionsFindFirstOrThrowArgs>(args?: SelectSubset<T, contributionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contributions
     * const contributions = await prisma.contributions.findMany()
     * 
     * // Get first 10 Contributions
     * const contributions = await prisma.contributions.findMany({ take: 10 })
     * 
     * // Only select the `contribution_id`
     * const contributionsWithContribution_idOnly = await prisma.contributions.findMany({ select: { contribution_id: true } })
     * 
     */
    findMany<T extends contributionsFindManyArgs>(args?: SelectSubset<T, contributionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contributions.
     * @param {contributionsCreateArgs} args - Arguments to create a Contributions.
     * @example
     * // Create one Contributions
     * const Contributions = await prisma.contributions.create({
     *   data: {
     *     // ... data to create a Contributions
     *   }
     * })
     * 
     */
    create<T extends contributionsCreateArgs>(args: SelectSubset<T, contributionsCreateArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contributions.
     * @param {contributionsCreateManyArgs} args - Arguments to create many Contributions.
     * @example
     * // Create many Contributions
     * const contributions = await prisma.contributions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends contributionsCreateManyArgs>(args?: SelectSubset<T, contributionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contributions and returns the data saved in the database.
     * @param {contributionsCreateManyAndReturnArgs} args - Arguments to create many Contributions.
     * @example
     * // Create many Contributions
     * const contributions = await prisma.contributions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contributions and only return the `contribution_id`
     * const contributionsWithContribution_idOnly = await prisma.contributions.createManyAndReturn({ 
     *   select: { contribution_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends contributionsCreateManyAndReturnArgs>(args?: SelectSubset<T, contributionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contributions.
     * @param {contributionsDeleteArgs} args - Arguments to delete one Contributions.
     * @example
     * // Delete one Contributions
     * const Contributions = await prisma.contributions.delete({
     *   where: {
     *     // ... filter to delete one Contributions
     *   }
     * })
     * 
     */
    delete<T extends contributionsDeleteArgs>(args: SelectSubset<T, contributionsDeleteArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contributions.
     * @param {contributionsUpdateArgs} args - Arguments to update one Contributions.
     * @example
     * // Update one Contributions
     * const contributions = await prisma.contributions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends contributionsUpdateArgs>(args: SelectSubset<T, contributionsUpdateArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contributions.
     * @param {contributionsDeleteManyArgs} args - Arguments to filter Contributions to delete.
     * @example
     * // Delete a few Contributions
     * const { count } = await prisma.contributions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends contributionsDeleteManyArgs>(args?: SelectSubset<T, contributionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contributions
     * const contributions = await prisma.contributions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends contributionsUpdateManyArgs>(args: SelectSubset<T, contributionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contributions.
     * @param {contributionsUpsertArgs} args - Arguments to update or create a Contributions.
     * @example
     * // Update or create a Contributions
     * const contributions = await prisma.contributions.upsert({
     *   create: {
     *     // ... data to create a Contributions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contributions we want to update
     *   }
     * })
     */
    upsert<T extends contributionsUpsertArgs>(args: SelectSubset<T, contributionsUpsertArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsCountArgs} args - Arguments to filter Contributions to count.
     * @example
     * // Count the number of Contributions
     * const count = await prisma.contributions.count({
     *   where: {
     *     // ... the filter for the Contributions we want to count
     *   }
     * })
    **/
    count<T extends contributionsCountArgs>(
      args?: Subset<T, contributionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContributionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContributionsAggregateArgs>(args: Subset<T, ContributionsAggregateArgs>): Prisma.PrismaPromise<GetContributionsAggregateType<T>>

    /**
     * Group by Contributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends contributionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: contributionsGroupByArgs['orderBy'] }
        : { orderBy?: contributionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, contributionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContributionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the contributions model
   */
  readonly fields: contributionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for contributions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__contributionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    source<T extends agency_informationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, agency_informationDefaultArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    notifications<T extends contributions$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, contributions$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the contributions model
   */ 
  interface contributionsFieldRefs {
    readonly contribution_id: FieldRef<"contributions", 'Int'>
    readonly amount: FieldRef<"contributions", 'Decimal'>
    readonly post_date: FieldRef<"contributions", 'DateTime'>
    readonly status: FieldRef<"contributions", 'String'>
    readonly userID: FieldRef<"contributions", 'Int'>
    readonly agency_id: FieldRef<"contributions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * contributions findUnique
   */
  export type contributionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter, which contributions to fetch.
     */
    where: contributionsWhereUniqueInput
  }

  /**
   * contributions findUniqueOrThrow
   */
  export type contributionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter, which contributions to fetch.
     */
    where: contributionsWhereUniqueInput
  }

  /**
   * contributions findFirst
   */
  export type contributionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter, which contributions to fetch.
     */
    where?: contributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contributions to fetch.
     */
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contributions.
     */
    cursor?: contributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contributions.
     */
    distinct?: ContributionsScalarFieldEnum | ContributionsScalarFieldEnum[]
  }

  /**
   * contributions findFirstOrThrow
   */
  export type contributionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter, which contributions to fetch.
     */
    where?: contributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contributions to fetch.
     */
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contributions.
     */
    cursor?: contributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contributions.
     */
    distinct?: ContributionsScalarFieldEnum | ContributionsScalarFieldEnum[]
  }

  /**
   * contributions findMany
   */
  export type contributionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter, which contributions to fetch.
     */
    where?: contributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contributions to fetch.
     */
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contributions.
     */
    cursor?: contributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contributions.
     */
    skip?: number
    distinct?: ContributionsScalarFieldEnum | ContributionsScalarFieldEnum[]
  }

  /**
   * contributions create
   */
  export type contributionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * The data needed to create a contributions.
     */
    data: XOR<contributionsCreateInput, contributionsUncheckedCreateInput>
  }

  /**
   * contributions createMany
   */
  export type contributionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many contributions.
     */
    data: contributionsCreateManyInput | contributionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * contributions createManyAndReturn
   */
  export type contributionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many contributions.
     */
    data: contributionsCreateManyInput | contributionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * contributions update
   */
  export type contributionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * The data needed to update a contributions.
     */
    data: XOR<contributionsUpdateInput, contributionsUncheckedUpdateInput>
    /**
     * Choose, which contributions to update.
     */
    where: contributionsWhereUniqueInput
  }

  /**
   * contributions updateMany
   */
  export type contributionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update contributions.
     */
    data: XOR<contributionsUpdateManyMutationInput, contributionsUncheckedUpdateManyInput>
    /**
     * Filter which contributions to update
     */
    where?: contributionsWhereInput
  }

  /**
   * contributions upsert
   */
  export type contributionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * The filter to search for the contributions to update in case it exists.
     */
    where: contributionsWhereUniqueInput
    /**
     * In case the contributions found by the `where` argument doesn't exist, create a new contributions with this data.
     */
    create: XOR<contributionsCreateInput, contributionsUncheckedCreateInput>
    /**
     * In case the contributions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<contributionsUpdateInput, contributionsUncheckedUpdateInput>
  }

  /**
   * contributions delete
   */
  export type contributionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter which contributions to delete.
     */
    where: contributionsWhereUniqueInput
  }

  /**
   * contributions deleteMany
   */
  export type contributionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contributions to delete
     */
    where?: contributionsWhereInput
  }

  /**
   * contributions.notifications
   */
  export type contributions$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * contributions without action
   */
  export type contributionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
  }


  /**
   * Model agency_information
   */

  export type AggregateAgency_information = {
    _count: Agency_informationCountAggregateOutputType | null
    _avg: Agency_informationAvgAggregateOutputType | null
    _sum: Agency_informationSumAggregateOutputType | null
    _min: Agency_informationMinAggregateOutputType | null
    _max: Agency_informationMaxAggregateOutputType | null
  }

  export type Agency_informationAvgAggregateOutputType = {
    agency_id: number | null
  }

  export type Agency_informationSumAggregateOutputType = {
    agency_id: number | null
  }

  export type Agency_informationMinAggregateOutputType = {
    agency_id: number | null
    agency_name: string | null
    description: string | null
    contact_info: string | null
  }

  export type Agency_informationMaxAggregateOutputType = {
    agency_id: number | null
    agency_name: string | null
    description: string | null
    contact_info: string | null
  }

  export type Agency_informationCountAggregateOutputType = {
    agency_id: number
    agency_name: number
    description: number
    contact_info: number
    _all: number
  }


  export type Agency_informationAvgAggregateInputType = {
    agency_id?: true
  }

  export type Agency_informationSumAggregateInputType = {
    agency_id?: true
  }

  export type Agency_informationMinAggregateInputType = {
    agency_id?: true
    agency_name?: true
    description?: true
    contact_info?: true
  }

  export type Agency_informationMaxAggregateInputType = {
    agency_id?: true
    agency_name?: true
    description?: true
    contact_info?: true
  }

  export type Agency_informationCountAggregateInputType = {
    agency_id?: true
    agency_name?: true
    description?: true
    contact_info?: true
    _all?: true
  }

  export type Agency_informationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which agency_information to aggregate.
     */
    where?: agency_informationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agency_informations to fetch.
     */
    orderBy?: agency_informationOrderByWithRelationInput | agency_informationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: agency_informationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agency_informations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agency_informations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned agency_informations
    **/
    _count?: true | Agency_informationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Agency_informationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Agency_informationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Agency_informationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Agency_informationMaxAggregateInputType
  }

  export type GetAgency_informationAggregateType<T extends Agency_informationAggregateArgs> = {
        [P in keyof T & keyof AggregateAgency_information]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgency_information[P]>
      : GetScalarType<T[P], AggregateAgency_information[P]>
  }




  export type agency_informationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: agency_informationWhereInput
    orderBy?: agency_informationOrderByWithAggregationInput | agency_informationOrderByWithAggregationInput[]
    by: Agency_informationScalarFieldEnum[] | Agency_informationScalarFieldEnum
    having?: agency_informationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Agency_informationCountAggregateInputType | true
    _avg?: Agency_informationAvgAggregateInputType
    _sum?: Agency_informationSumAggregateInputType
    _min?: Agency_informationMinAggregateInputType
    _max?: Agency_informationMaxAggregateInputType
  }

  export type Agency_informationGroupByOutputType = {
    agency_id: number
    agency_name: string
    description: string
    contact_info: string
    _count: Agency_informationCountAggregateOutputType | null
    _avg: Agency_informationAvgAggregateOutputType | null
    _sum: Agency_informationSumAggregateOutputType | null
    _min: Agency_informationMinAggregateOutputType | null
    _max: Agency_informationMaxAggregateOutputType | null
  }

  type GetAgency_informationGroupByPayload<T extends agency_informationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Agency_informationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Agency_informationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Agency_informationGroupByOutputType[P]>
            : GetScalarType<T[P], Agency_informationGroupByOutputType[P]>
        }
      >
    >


  export type agency_informationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    agency_id?: boolean
    agency_name?: boolean
    description?: boolean
    contact_info?: boolean
    contributions?: boolean | agency_information$contributionsArgs<ExtArgs>
    benefit_claims?: boolean | agency_information$benefit_claimsArgs<ExtArgs>
    benefits_types?: boolean | agency_information$benefits_typesArgs<ExtArgs>
    notifications?: boolean | agency_information$notificationsArgs<ExtArgs>
    _count?: boolean | Agency_informationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agency_information"]>

  export type agency_informationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    agency_id?: boolean
    agency_name?: boolean
    description?: boolean
    contact_info?: boolean
  }, ExtArgs["result"]["agency_information"]>

  export type agency_informationSelectScalar = {
    agency_id?: boolean
    agency_name?: boolean
    description?: boolean
    contact_info?: boolean
  }

  export type agency_informationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | agency_information$contributionsArgs<ExtArgs>
    benefit_claims?: boolean | agency_information$benefit_claimsArgs<ExtArgs>
    benefits_types?: boolean | agency_information$benefits_typesArgs<ExtArgs>
    notifications?: boolean | agency_information$notificationsArgs<ExtArgs>
    _count?: boolean | Agency_informationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type agency_informationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $agency_informationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "agency_information"
    objects: {
      contributions: Prisma.$contributionsPayload<ExtArgs>[]
      benefit_claims: Prisma.$benefit_claimsPayload<ExtArgs>[]
      benefits_types: Prisma.$benefits_typesPayload<ExtArgs>[]
      notifications: Prisma.$notificationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      agency_id: number
      agency_name: string
      description: string
      contact_info: string
    }, ExtArgs["result"]["agency_information"]>
    composites: {}
  }

  type agency_informationGetPayload<S extends boolean | null | undefined | agency_informationDefaultArgs> = $Result.GetResult<Prisma.$agency_informationPayload, S>

  type agency_informationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<agency_informationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Agency_informationCountAggregateInputType | true
    }

  export interface agency_informationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['agency_information'], meta: { name: 'agency_information' } }
    /**
     * Find zero or one Agency_information that matches the filter.
     * @param {agency_informationFindUniqueArgs} args - Arguments to find a Agency_information
     * @example
     * // Get one Agency_information
     * const agency_information = await prisma.agency_information.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends agency_informationFindUniqueArgs>(args: SelectSubset<T, agency_informationFindUniqueArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Agency_information that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {agency_informationFindUniqueOrThrowArgs} args - Arguments to find a Agency_information
     * @example
     * // Get one Agency_information
     * const agency_information = await prisma.agency_information.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends agency_informationFindUniqueOrThrowArgs>(args: SelectSubset<T, agency_informationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Agency_information that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationFindFirstArgs} args - Arguments to find a Agency_information
     * @example
     * // Get one Agency_information
     * const agency_information = await prisma.agency_information.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends agency_informationFindFirstArgs>(args?: SelectSubset<T, agency_informationFindFirstArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Agency_information that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationFindFirstOrThrowArgs} args - Arguments to find a Agency_information
     * @example
     * // Get one Agency_information
     * const agency_information = await prisma.agency_information.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends agency_informationFindFirstOrThrowArgs>(args?: SelectSubset<T, agency_informationFindFirstOrThrowArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Agency_informations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agency_informations
     * const agency_informations = await prisma.agency_information.findMany()
     * 
     * // Get first 10 Agency_informations
     * const agency_informations = await prisma.agency_information.findMany({ take: 10 })
     * 
     * // Only select the `agency_id`
     * const agency_informationWithAgency_idOnly = await prisma.agency_information.findMany({ select: { agency_id: true } })
     * 
     */
    findMany<T extends agency_informationFindManyArgs>(args?: SelectSubset<T, agency_informationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Agency_information.
     * @param {agency_informationCreateArgs} args - Arguments to create a Agency_information.
     * @example
     * // Create one Agency_information
     * const Agency_information = await prisma.agency_information.create({
     *   data: {
     *     // ... data to create a Agency_information
     *   }
     * })
     * 
     */
    create<T extends agency_informationCreateArgs>(args: SelectSubset<T, agency_informationCreateArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Agency_informations.
     * @param {agency_informationCreateManyArgs} args - Arguments to create many Agency_informations.
     * @example
     * // Create many Agency_informations
     * const agency_information = await prisma.agency_information.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends agency_informationCreateManyArgs>(args?: SelectSubset<T, agency_informationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agency_informations and returns the data saved in the database.
     * @param {agency_informationCreateManyAndReturnArgs} args - Arguments to create many Agency_informations.
     * @example
     * // Create many Agency_informations
     * const agency_information = await prisma.agency_information.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agency_informations and only return the `agency_id`
     * const agency_informationWithAgency_idOnly = await prisma.agency_information.createManyAndReturn({ 
     *   select: { agency_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends agency_informationCreateManyAndReturnArgs>(args?: SelectSubset<T, agency_informationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Agency_information.
     * @param {agency_informationDeleteArgs} args - Arguments to delete one Agency_information.
     * @example
     * // Delete one Agency_information
     * const Agency_information = await prisma.agency_information.delete({
     *   where: {
     *     // ... filter to delete one Agency_information
     *   }
     * })
     * 
     */
    delete<T extends agency_informationDeleteArgs>(args: SelectSubset<T, agency_informationDeleteArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Agency_information.
     * @param {agency_informationUpdateArgs} args - Arguments to update one Agency_information.
     * @example
     * // Update one Agency_information
     * const agency_information = await prisma.agency_information.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends agency_informationUpdateArgs>(args: SelectSubset<T, agency_informationUpdateArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Agency_informations.
     * @param {agency_informationDeleteManyArgs} args - Arguments to filter Agency_informations to delete.
     * @example
     * // Delete a few Agency_informations
     * const { count } = await prisma.agency_information.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends agency_informationDeleteManyArgs>(args?: SelectSubset<T, agency_informationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agency_informations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agency_informations
     * const agency_information = await prisma.agency_information.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends agency_informationUpdateManyArgs>(args: SelectSubset<T, agency_informationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agency_information.
     * @param {agency_informationUpsertArgs} args - Arguments to update or create a Agency_information.
     * @example
     * // Update or create a Agency_information
     * const agency_information = await prisma.agency_information.upsert({
     *   create: {
     *     // ... data to create a Agency_information
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agency_information we want to update
     *   }
     * })
     */
    upsert<T extends agency_informationUpsertArgs>(args: SelectSubset<T, agency_informationUpsertArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Agency_informations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationCountArgs} args - Arguments to filter Agency_informations to count.
     * @example
     * // Count the number of Agency_informations
     * const count = await prisma.agency_information.count({
     *   where: {
     *     // ... the filter for the Agency_informations we want to count
     *   }
     * })
    **/
    count<T extends agency_informationCountArgs>(
      args?: Subset<T, agency_informationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Agency_informationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agency_information.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Agency_informationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Agency_informationAggregateArgs>(args: Subset<T, Agency_informationAggregateArgs>): Prisma.PrismaPromise<GetAgency_informationAggregateType<T>>

    /**
     * Group by Agency_information.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends agency_informationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: agency_informationGroupByArgs['orderBy'] }
        : { orderBy?: agency_informationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, agency_informationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgency_informationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the agency_information model
   */
  readonly fields: agency_informationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for agency_information.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__agency_informationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contributions<T extends agency_information$contributionsArgs<ExtArgs> = {}>(args?: Subset<T, agency_information$contributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findMany"> | Null>
    benefit_claims<T extends agency_information$benefit_claimsArgs<ExtArgs> = {}>(args?: Subset<T, agency_information$benefit_claimsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "findMany"> | Null>
    benefits_types<T extends agency_information$benefits_typesArgs<ExtArgs> = {}>(args?: Subset<T, agency_information$benefits_typesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends agency_information$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, agency_information$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the agency_information model
   */ 
  interface agency_informationFieldRefs {
    readonly agency_id: FieldRef<"agency_information", 'Int'>
    readonly agency_name: FieldRef<"agency_information", 'String'>
    readonly description: FieldRef<"agency_information", 'String'>
    readonly contact_info: FieldRef<"agency_information", 'String'>
  }
    

  // Custom InputTypes
  /**
   * agency_information findUnique
   */
  export type agency_informationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter, which agency_information to fetch.
     */
    where: agency_informationWhereUniqueInput
  }

  /**
   * agency_information findUniqueOrThrow
   */
  export type agency_informationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter, which agency_information to fetch.
     */
    where: agency_informationWhereUniqueInput
  }

  /**
   * agency_information findFirst
   */
  export type agency_informationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter, which agency_information to fetch.
     */
    where?: agency_informationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agency_informations to fetch.
     */
    orderBy?: agency_informationOrderByWithRelationInput | agency_informationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for agency_informations.
     */
    cursor?: agency_informationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agency_informations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agency_informations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of agency_informations.
     */
    distinct?: Agency_informationScalarFieldEnum | Agency_informationScalarFieldEnum[]
  }

  /**
   * agency_information findFirstOrThrow
   */
  export type agency_informationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter, which agency_information to fetch.
     */
    where?: agency_informationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agency_informations to fetch.
     */
    orderBy?: agency_informationOrderByWithRelationInput | agency_informationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for agency_informations.
     */
    cursor?: agency_informationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agency_informations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agency_informations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of agency_informations.
     */
    distinct?: Agency_informationScalarFieldEnum | Agency_informationScalarFieldEnum[]
  }

  /**
   * agency_information findMany
   */
  export type agency_informationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter, which agency_informations to fetch.
     */
    where?: agency_informationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agency_informations to fetch.
     */
    orderBy?: agency_informationOrderByWithRelationInput | agency_informationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing agency_informations.
     */
    cursor?: agency_informationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agency_informations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agency_informations.
     */
    skip?: number
    distinct?: Agency_informationScalarFieldEnum | Agency_informationScalarFieldEnum[]
  }

  /**
   * agency_information create
   */
  export type agency_informationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * The data needed to create a agency_information.
     */
    data: XOR<agency_informationCreateInput, agency_informationUncheckedCreateInput>
  }

  /**
   * agency_information createMany
   */
  export type agency_informationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many agency_informations.
     */
    data: agency_informationCreateManyInput | agency_informationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * agency_information createManyAndReturn
   */
  export type agency_informationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many agency_informations.
     */
    data: agency_informationCreateManyInput | agency_informationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * agency_information update
   */
  export type agency_informationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * The data needed to update a agency_information.
     */
    data: XOR<agency_informationUpdateInput, agency_informationUncheckedUpdateInput>
    /**
     * Choose, which agency_information to update.
     */
    where: agency_informationWhereUniqueInput
  }

  /**
   * agency_information updateMany
   */
  export type agency_informationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update agency_informations.
     */
    data: XOR<agency_informationUpdateManyMutationInput, agency_informationUncheckedUpdateManyInput>
    /**
     * Filter which agency_informations to update
     */
    where?: agency_informationWhereInput
  }

  /**
   * agency_information upsert
   */
  export type agency_informationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * The filter to search for the agency_information to update in case it exists.
     */
    where: agency_informationWhereUniqueInput
    /**
     * In case the agency_information found by the `where` argument doesn't exist, create a new agency_information with this data.
     */
    create: XOR<agency_informationCreateInput, agency_informationUncheckedCreateInput>
    /**
     * In case the agency_information was found with the provided `where` argument, update it with this data.
     */
    update: XOR<agency_informationUpdateInput, agency_informationUncheckedUpdateInput>
  }

  /**
   * agency_information delete
   */
  export type agency_informationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter which agency_information to delete.
     */
    where: agency_informationWhereUniqueInput
  }

  /**
   * agency_information deleteMany
   */
  export type agency_informationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which agency_informations to delete
     */
    where?: agency_informationWhereInput
  }

  /**
   * agency_information.contributions
   */
  export type agency_information$contributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    where?: contributionsWhereInput
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    cursor?: contributionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContributionsScalarFieldEnum | ContributionsScalarFieldEnum[]
  }

  /**
   * agency_information.benefit_claims
   */
  export type agency_information$benefit_claimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    where?: benefit_claimsWhereInput
    orderBy?: benefit_claimsOrderByWithRelationInput | benefit_claimsOrderByWithRelationInput[]
    cursor?: benefit_claimsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Benefit_claimsScalarFieldEnum | Benefit_claimsScalarFieldEnum[]
  }

  /**
   * agency_information.benefits_types
   */
  export type agency_information$benefits_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
    where?: benefits_typesWhereInput
    orderBy?: benefits_typesOrderByWithRelationInput | benefits_typesOrderByWithRelationInput[]
    cursor?: benefits_typesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Benefits_typesScalarFieldEnum | Benefits_typesScalarFieldEnum[]
  }

  /**
   * agency_information.notifications
   */
  export type agency_information$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    cursor?: notificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * agency_information without action
   */
  export type agency_informationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
  }


  /**
   * Model notifications
   */

  export type AggregateNotifications = {
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  export type NotificationsAvgAggregateOutputType = {
    notification_id: number | null
    is_read: number | null
    user_id: number | null
    Contribution_id: number | null
    agency_id: number | null
  }

  export type NotificationsSumAggregateOutputType = {
    notification_id: number | null
    is_read: number | null
    user_id: number | null
    Contribution_id: number | null
    agency_id: number | null
  }

  export type NotificationsMinAggregateOutputType = {
    notification_id: number | null
    message: string | null
    is_read: number | null
    created_at: Date | null
    user_id: number | null
    Contribution_id: number | null
    agency_id: number | null
  }

  export type NotificationsMaxAggregateOutputType = {
    notification_id: number | null
    message: string | null
    is_read: number | null
    created_at: Date | null
    user_id: number | null
    Contribution_id: number | null
    agency_id: number | null
  }

  export type NotificationsCountAggregateOutputType = {
    notification_id: number
    message: number
    is_read: number
    created_at: number
    user_id: number
    Contribution_id: number
    agency_id: number
    _all: number
  }


  export type NotificationsAvgAggregateInputType = {
    notification_id?: true
    is_read?: true
    user_id?: true
    Contribution_id?: true
    agency_id?: true
  }

  export type NotificationsSumAggregateInputType = {
    notification_id?: true
    is_read?: true
    user_id?: true
    Contribution_id?: true
    agency_id?: true
  }

  export type NotificationsMinAggregateInputType = {
    notification_id?: true
    message?: true
    is_read?: true
    created_at?: true
    user_id?: true
    Contribution_id?: true
    agency_id?: true
  }

  export type NotificationsMaxAggregateInputType = {
    notification_id?: true
    message?: true
    is_read?: true
    created_at?: true
    user_id?: true
    Contribution_id?: true
    agency_id?: true
  }

  export type NotificationsCountAggregateInputType = {
    notification_id?: true
    message?: true
    is_read?: true
    created_at?: true
    user_id?: true
    Contribution_id?: true
    agency_id?: true
    _all?: true
  }

  export type NotificationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to aggregate.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notifications
    **/
    _count?: true | NotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationsMaxAggregateInputType
  }

  export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifications[P]>
      : GetScalarType<T[P], AggregateNotifications[P]>
  }




  export type notificationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationsWhereInput
    orderBy?: notificationsOrderByWithAggregationInput | notificationsOrderByWithAggregationInput[]
    by: NotificationsScalarFieldEnum[] | NotificationsScalarFieldEnum
    having?: notificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationsCountAggregateInputType | true
    _avg?: NotificationsAvgAggregateInputType
    _sum?: NotificationsSumAggregateInputType
    _min?: NotificationsMinAggregateInputType
    _max?: NotificationsMaxAggregateInputType
  }

  export type NotificationsGroupByOutputType = {
    notification_id: number
    message: string
    is_read: number
    created_at: Date
    user_id: number
    Contribution_id: number
    agency_id: number
    _count: NotificationsCountAggregateOutputType | null
    _avg: NotificationsAvgAggregateOutputType | null
    _sum: NotificationsSumAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  type GetNotificationsGroupByPayload<T extends notificationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
        }
      >
    >


  export type notificationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    notification_id?: boolean
    message?: boolean
    is_read?: boolean
    created_at?: boolean
    user_id?: boolean
    Contribution_id?: boolean
    agency_id?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    contributions?: boolean | contributionsDefaultArgs<ExtArgs>
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>

  export type notificationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    notification_id?: boolean
    message?: boolean
    is_read?: boolean
    created_at?: boolean
    user_id?: boolean
    Contribution_id?: boolean
    agency_id?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    contributions?: boolean | contributionsDefaultArgs<ExtArgs>
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>

  export type notificationsSelectScalar = {
    notification_id?: boolean
    message?: boolean
    is_read?: boolean
    created_at?: boolean
    user_id?: boolean
    Contribution_id?: boolean
    agency_id?: boolean
  }

  export type notificationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    contributions?: boolean | contributionsDefaultArgs<ExtArgs>
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
  }
  export type notificationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    contributions?: boolean | contributionsDefaultArgs<ExtArgs>
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
  }

  export type $notificationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "notifications"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      contributions: Prisma.$contributionsPayload<ExtArgs>
      agency: Prisma.$agency_informationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      notification_id: number
      message: string
      is_read: number
      created_at: Date
      user_id: number
      Contribution_id: number
      agency_id: number
    }, ExtArgs["result"]["notifications"]>
    composites: {}
  }

  type notificationsGetPayload<S extends boolean | null | undefined | notificationsDefaultArgs> = $Result.GetResult<Prisma.$notificationsPayload, S>

  type notificationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<notificationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationsCountAggregateInputType | true
    }

  export interface notificationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['notifications'], meta: { name: 'notifications' } }
    /**
     * Find zero or one Notifications that matches the filter.
     * @param {notificationsFindUniqueArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends notificationsFindUniqueArgs>(args: SelectSubset<T, notificationsFindUniqueArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notifications that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {notificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends notificationsFindUniqueOrThrowArgs>(args: SelectSubset<T, notificationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindFirstArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends notificationsFindFirstArgs>(args?: SelectSubset<T, notificationsFindFirstArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notifications that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends notificationsFindFirstOrThrowArgs>(args?: SelectSubset<T, notificationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notifications.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notifications.findMany({ take: 10 })
     * 
     * // Only select the `notification_id`
     * const notificationsWithNotification_idOnly = await prisma.notifications.findMany({ select: { notification_id: true } })
     * 
     */
    findMany<T extends notificationsFindManyArgs>(args?: SelectSubset<T, notificationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notifications.
     * @param {notificationsCreateArgs} args - Arguments to create a Notifications.
     * @example
     * // Create one Notifications
     * const Notifications = await prisma.notifications.create({
     *   data: {
     *     // ... data to create a Notifications
     *   }
     * })
     * 
     */
    create<T extends notificationsCreateArgs>(args: SelectSubset<T, notificationsCreateArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {notificationsCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notifications = await prisma.notifications.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends notificationsCreateManyArgs>(args?: SelectSubset<T, notificationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {notificationsCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notifications = await prisma.notifications.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `notification_id`
     * const notificationsWithNotification_idOnly = await prisma.notifications.createManyAndReturn({ 
     *   select: { notification_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends notificationsCreateManyAndReturnArgs>(args?: SelectSubset<T, notificationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notifications.
     * @param {notificationsDeleteArgs} args - Arguments to delete one Notifications.
     * @example
     * // Delete one Notifications
     * const Notifications = await prisma.notifications.delete({
     *   where: {
     *     // ... filter to delete one Notifications
     *   }
     * })
     * 
     */
    delete<T extends notificationsDeleteArgs>(args: SelectSubset<T, notificationsDeleteArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notifications.
     * @param {notificationsUpdateArgs} args - Arguments to update one Notifications.
     * @example
     * // Update one Notifications
     * const notifications = await prisma.notifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends notificationsUpdateArgs>(args: SelectSubset<T, notificationsUpdateArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {notificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends notificationsDeleteManyArgs>(args?: SelectSubset<T, notificationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends notificationsUpdateManyArgs>(args: SelectSubset<T, notificationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notifications.
     * @param {notificationsUpsertArgs} args - Arguments to update or create a Notifications.
     * @example
     * // Update or create a Notifications
     * const notifications = await prisma.notifications.upsert({
     *   create: {
     *     // ... data to create a Notifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifications we want to update
     *   }
     * })
     */
    upsert<T extends notificationsUpsertArgs>(args: SelectSubset<T, notificationsUpsertArgs<ExtArgs>>): Prisma__notificationsClient<$Result.GetResult<Prisma.$notificationsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notifications.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends notificationsCountArgs>(
      args?: Subset<T, notificationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationsAggregateArgs>(args: Subset<T, NotificationsAggregateArgs>): Prisma.PrismaPromise<GetNotificationsAggregateType<T>>

    /**
     * Group by Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends notificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: notificationsGroupByArgs['orderBy'] }
        : { orderBy?: notificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, notificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the notifications model
   */
  readonly fields: notificationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for notifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__notificationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contributions<T extends contributionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contributionsDefaultArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    agency<T extends agency_informationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, agency_informationDefaultArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the notifications model
   */ 
  interface notificationsFieldRefs {
    readonly notification_id: FieldRef<"notifications", 'Int'>
    readonly message: FieldRef<"notifications", 'String'>
    readonly is_read: FieldRef<"notifications", 'Int'>
    readonly created_at: FieldRef<"notifications", 'DateTime'>
    readonly user_id: FieldRef<"notifications", 'Int'>
    readonly Contribution_id: FieldRef<"notifications", 'Int'>
    readonly agency_id: FieldRef<"notifications", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * notifications findUnique
   */
  export type notificationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where: notificationsWhereUniqueInput
  }

  /**
   * notifications findUniqueOrThrow
   */
  export type notificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where: notificationsWhereUniqueInput
  }

  /**
   * notifications findFirst
   */
  export type notificationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * notifications findFirstOrThrow
   */
  export type notificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * notifications findMany
   */
  export type notificationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationsOrderByWithRelationInput | notificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notifications.
     */
    cursor?: notificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * notifications create
   */
  export type notificationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The data needed to create a notifications.
     */
    data: XOR<notificationsCreateInput, notificationsUncheckedCreateInput>
  }

  /**
   * notifications createMany
   */
  export type notificationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many notifications.
     */
    data: notificationsCreateManyInput | notificationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * notifications createManyAndReturn
   */
  export type notificationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many notifications.
     */
    data: notificationsCreateManyInput | notificationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * notifications update
   */
  export type notificationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The data needed to update a notifications.
     */
    data: XOR<notificationsUpdateInput, notificationsUncheckedUpdateInput>
    /**
     * Choose, which notifications to update.
     */
    where: notificationsWhereUniqueInput
  }

  /**
   * notifications updateMany
   */
  export type notificationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update notifications.
     */
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     */
    where?: notificationsWhereInput
  }

  /**
   * notifications upsert
   */
  export type notificationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * The filter to search for the notifications to update in case it exists.
     */
    where: notificationsWhereUniqueInput
    /**
     * In case the notifications found by the `where` argument doesn't exist, create a new notifications with this data.
     */
    create: XOR<notificationsCreateInput, notificationsUncheckedCreateInput>
    /**
     * In case the notifications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<notificationsUpdateInput, notificationsUncheckedUpdateInput>
  }

  /**
   * notifications delete
   */
  export type notificationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
    /**
     * Filter which notifications to delete.
     */
    where: notificationsWhereUniqueInput
  }

  /**
   * notifications deleteMany
   */
  export type notificationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to delete
     */
    where?: notificationsWhereInput
  }

  /**
   * notifications without action
   */
  export type notificationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notifications
     */
    select?: notificationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationsInclude<ExtArgs> | null
  }


  /**
   * Model benefit_claims
   */

  export type AggregateBenefit_claims = {
    _count: Benefit_claimsCountAggregateOutputType | null
    _avg: Benefit_claimsAvgAggregateOutputType | null
    _sum: Benefit_claimsSumAggregateOutputType | null
    _min: Benefit_claimsMinAggregateOutputType | null
    _max: Benefit_claimsMaxAggregateOutputType | null
  }

  export type Benefit_claimsAvgAggregateOutputType = {
    claim_id: number | null
    claim_amount: Decimal | null
    claim_status: number | null
    userID: number | null
    agency_id: number | null
    btype_id: number | null
  }

  export type Benefit_claimsSumAggregateOutputType = {
    claim_id: number | null
    claim_amount: Decimal | null
    claim_status: number | null
    userID: number | null
    agency_id: number | null
    btype_id: number | null
  }

  export type Benefit_claimsMinAggregateOutputType = {
    claim_id: number | null
    claim_amount: Decimal | null
    claim_status: number | null
    submitted_at: Date | null
    processed_at: Date | null
    remarks: string | null
    userID: number | null
    agency_id: number | null
    btype_id: number | null
  }

  export type Benefit_claimsMaxAggregateOutputType = {
    claim_id: number | null
    claim_amount: Decimal | null
    claim_status: number | null
    submitted_at: Date | null
    processed_at: Date | null
    remarks: string | null
    userID: number | null
    agency_id: number | null
    btype_id: number | null
  }

  export type Benefit_claimsCountAggregateOutputType = {
    claim_id: number
    claim_amount: number
    claim_status: number
    submitted_at: number
    processed_at: number
    remarks: number
    userID: number
    agency_id: number
    btype_id: number
    _all: number
  }


  export type Benefit_claimsAvgAggregateInputType = {
    claim_id?: true
    claim_amount?: true
    claim_status?: true
    userID?: true
    agency_id?: true
    btype_id?: true
  }

  export type Benefit_claimsSumAggregateInputType = {
    claim_id?: true
    claim_amount?: true
    claim_status?: true
    userID?: true
    agency_id?: true
    btype_id?: true
  }

  export type Benefit_claimsMinAggregateInputType = {
    claim_id?: true
    claim_amount?: true
    claim_status?: true
    submitted_at?: true
    processed_at?: true
    remarks?: true
    userID?: true
    agency_id?: true
    btype_id?: true
  }

  export type Benefit_claimsMaxAggregateInputType = {
    claim_id?: true
    claim_amount?: true
    claim_status?: true
    submitted_at?: true
    processed_at?: true
    remarks?: true
    userID?: true
    agency_id?: true
    btype_id?: true
  }

  export type Benefit_claimsCountAggregateInputType = {
    claim_id?: true
    claim_amount?: true
    claim_status?: true
    submitted_at?: true
    processed_at?: true
    remarks?: true
    userID?: true
    agency_id?: true
    btype_id?: true
    _all?: true
  }

  export type Benefit_claimsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which benefit_claims to aggregate.
     */
    where?: benefit_claimsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of benefit_claims to fetch.
     */
    orderBy?: benefit_claimsOrderByWithRelationInput | benefit_claimsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: benefit_claimsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` benefit_claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` benefit_claims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned benefit_claims
    **/
    _count?: true | Benefit_claimsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Benefit_claimsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Benefit_claimsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Benefit_claimsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Benefit_claimsMaxAggregateInputType
  }

  export type GetBenefit_claimsAggregateType<T extends Benefit_claimsAggregateArgs> = {
        [P in keyof T & keyof AggregateBenefit_claims]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBenefit_claims[P]>
      : GetScalarType<T[P], AggregateBenefit_claims[P]>
  }




  export type benefit_claimsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: benefit_claimsWhereInput
    orderBy?: benefit_claimsOrderByWithAggregationInput | benefit_claimsOrderByWithAggregationInput[]
    by: Benefit_claimsScalarFieldEnum[] | Benefit_claimsScalarFieldEnum
    having?: benefit_claimsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Benefit_claimsCountAggregateInputType | true
    _avg?: Benefit_claimsAvgAggregateInputType
    _sum?: Benefit_claimsSumAggregateInputType
    _min?: Benefit_claimsMinAggregateInputType
    _max?: Benefit_claimsMaxAggregateInputType
  }

  export type Benefit_claimsGroupByOutputType = {
    claim_id: number
    claim_amount: Decimal
    claim_status: number
    submitted_at: Date
    processed_at: Date | null
    remarks: string
    userID: number
    agency_id: number
    btype_id: number
    _count: Benefit_claimsCountAggregateOutputType | null
    _avg: Benefit_claimsAvgAggregateOutputType | null
    _sum: Benefit_claimsSumAggregateOutputType | null
    _min: Benefit_claimsMinAggregateOutputType | null
    _max: Benefit_claimsMaxAggregateOutputType | null
  }

  type GetBenefit_claimsGroupByPayload<T extends benefit_claimsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Benefit_claimsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Benefit_claimsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Benefit_claimsGroupByOutputType[P]>
            : GetScalarType<T[P], Benefit_claimsGroupByOutputType[P]>
        }
      >
    >


  export type benefit_claimsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    claim_id?: boolean
    claim_amount?: boolean
    claim_status?: boolean
    submitted_at?: boolean
    processed_at?: boolean
    remarks?: boolean
    userID?: boolean
    agency_id?: boolean
    btype_id?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
    benefits_type?: boolean | benefits_typesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["benefit_claims"]>

  export type benefit_claimsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    claim_id?: boolean
    claim_amount?: boolean
    claim_status?: boolean
    submitted_at?: boolean
    processed_at?: boolean
    remarks?: boolean
    userID?: boolean
    agency_id?: boolean
    btype_id?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
    benefits_type?: boolean | benefits_typesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["benefit_claims"]>

  export type benefit_claimsSelectScalar = {
    claim_id?: boolean
    claim_amount?: boolean
    claim_status?: boolean
    submitted_at?: boolean
    processed_at?: boolean
    remarks?: boolean
    userID?: boolean
    agency_id?: boolean
    btype_id?: boolean
  }

  export type benefit_claimsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
    benefits_type?: boolean | benefits_typesDefaultArgs<ExtArgs>
  }
  export type benefit_claimsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
    benefits_type?: boolean | benefits_typesDefaultArgs<ExtArgs>
  }

  export type $benefit_claimsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "benefit_claims"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>
      agency: Prisma.$agency_informationPayload<ExtArgs>
      benefits_type: Prisma.$benefits_typesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      claim_id: number
      claim_amount: Prisma.Decimal
      claim_status: number
      submitted_at: Date
      processed_at: Date | null
      remarks: string
      userID: number
      agency_id: number
      btype_id: number
    }, ExtArgs["result"]["benefit_claims"]>
    composites: {}
  }

  type benefit_claimsGetPayload<S extends boolean | null | undefined | benefit_claimsDefaultArgs> = $Result.GetResult<Prisma.$benefit_claimsPayload, S>

  type benefit_claimsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<benefit_claimsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Benefit_claimsCountAggregateInputType | true
    }

  export interface benefit_claimsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['benefit_claims'], meta: { name: 'benefit_claims' } }
    /**
     * Find zero or one Benefit_claims that matches the filter.
     * @param {benefit_claimsFindUniqueArgs} args - Arguments to find a Benefit_claims
     * @example
     * // Get one Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends benefit_claimsFindUniqueArgs>(args: SelectSubset<T, benefit_claimsFindUniqueArgs<ExtArgs>>): Prisma__benefit_claimsClient<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Benefit_claims that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {benefit_claimsFindUniqueOrThrowArgs} args - Arguments to find a Benefit_claims
     * @example
     * // Get one Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends benefit_claimsFindUniqueOrThrowArgs>(args: SelectSubset<T, benefit_claimsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__benefit_claimsClient<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Benefit_claims that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefit_claimsFindFirstArgs} args - Arguments to find a Benefit_claims
     * @example
     * // Get one Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends benefit_claimsFindFirstArgs>(args?: SelectSubset<T, benefit_claimsFindFirstArgs<ExtArgs>>): Prisma__benefit_claimsClient<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Benefit_claims that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefit_claimsFindFirstOrThrowArgs} args - Arguments to find a Benefit_claims
     * @example
     * // Get one Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends benefit_claimsFindFirstOrThrowArgs>(args?: SelectSubset<T, benefit_claimsFindFirstOrThrowArgs<ExtArgs>>): Prisma__benefit_claimsClient<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Benefit_claims that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefit_claimsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.findMany()
     * 
     * // Get first 10 Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.findMany({ take: 10 })
     * 
     * // Only select the `claim_id`
     * const benefit_claimsWithClaim_idOnly = await prisma.benefit_claims.findMany({ select: { claim_id: true } })
     * 
     */
    findMany<T extends benefit_claimsFindManyArgs>(args?: SelectSubset<T, benefit_claimsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Benefit_claims.
     * @param {benefit_claimsCreateArgs} args - Arguments to create a Benefit_claims.
     * @example
     * // Create one Benefit_claims
     * const Benefit_claims = await prisma.benefit_claims.create({
     *   data: {
     *     // ... data to create a Benefit_claims
     *   }
     * })
     * 
     */
    create<T extends benefit_claimsCreateArgs>(args: SelectSubset<T, benefit_claimsCreateArgs<ExtArgs>>): Prisma__benefit_claimsClient<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Benefit_claims.
     * @param {benefit_claimsCreateManyArgs} args - Arguments to create many Benefit_claims.
     * @example
     * // Create many Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends benefit_claimsCreateManyArgs>(args?: SelectSubset<T, benefit_claimsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Benefit_claims and returns the data saved in the database.
     * @param {benefit_claimsCreateManyAndReturnArgs} args - Arguments to create many Benefit_claims.
     * @example
     * // Create many Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Benefit_claims and only return the `claim_id`
     * const benefit_claimsWithClaim_idOnly = await prisma.benefit_claims.createManyAndReturn({ 
     *   select: { claim_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends benefit_claimsCreateManyAndReturnArgs>(args?: SelectSubset<T, benefit_claimsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Benefit_claims.
     * @param {benefit_claimsDeleteArgs} args - Arguments to delete one Benefit_claims.
     * @example
     * // Delete one Benefit_claims
     * const Benefit_claims = await prisma.benefit_claims.delete({
     *   where: {
     *     // ... filter to delete one Benefit_claims
     *   }
     * })
     * 
     */
    delete<T extends benefit_claimsDeleteArgs>(args: SelectSubset<T, benefit_claimsDeleteArgs<ExtArgs>>): Prisma__benefit_claimsClient<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Benefit_claims.
     * @param {benefit_claimsUpdateArgs} args - Arguments to update one Benefit_claims.
     * @example
     * // Update one Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends benefit_claimsUpdateArgs>(args: SelectSubset<T, benefit_claimsUpdateArgs<ExtArgs>>): Prisma__benefit_claimsClient<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Benefit_claims.
     * @param {benefit_claimsDeleteManyArgs} args - Arguments to filter Benefit_claims to delete.
     * @example
     * // Delete a few Benefit_claims
     * const { count } = await prisma.benefit_claims.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends benefit_claimsDeleteManyArgs>(args?: SelectSubset<T, benefit_claimsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Benefit_claims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefit_claimsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends benefit_claimsUpdateManyArgs>(args: SelectSubset<T, benefit_claimsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Benefit_claims.
     * @param {benefit_claimsUpsertArgs} args - Arguments to update or create a Benefit_claims.
     * @example
     * // Update or create a Benefit_claims
     * const benefit_claims = await prisma.benefit_claims.upsert({
     *   create: {
     *     // ... data to create a Benefit_claims
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Benefit_claims we want to update
     *   }
     * })
     */
    upsert<T extends benefit_claimsUpsertArgs>(args: SelectSubset<T, benefit_claimsUpsertArgs<ExtArgs>>): Prisma__benefit_claimsClient<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Benefit_claims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefit_claimsCountArgs} args - Arguments to filter Benefit_claims to count.
     * @example
     * // Count the number of Benefit_claims
     * const count = await prisma.benefit_claims.count({
     *   where: {
     *     // ... the filter for the Benefit_claims we want to count
     *   }
     * })
    **/
    count<T extends benefit_claimsCountArgs>(
      args?: Subset<T, benefit_claimsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Benefit_claimsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Benefit_claims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Benefit_claimsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Benefit_claimsAggregateArgs>(args: Subset<T, Benefit_claimsAggregateArgs>): Prisma.PrismaPromise<GetBenefit_claimsAggregateType<T>>

    /**
     * Group by Benefit_claims.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefit_claimsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends benefit_claimsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: benefit_claimsGroupByArgs['orderBy'] }
        : { orderBy?: benefit_claimsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, benefit_claimsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBenefit_claimsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the benefit_claims model
   */
  readonly fields: benefit_claimsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for benefit_claims.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__benefit_claimsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    agency<T extends agency_informationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, agency_informationDefaultArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    benefits_type<T extends benefits_typesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, benefits_typesDefaultArgs<ExtArgs>>): Prisma__benefits_typesClient<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the benefit_claims model
   */ 
  interface benefit_claimsFieldRefs {
    readonly claim_id: FieldRef<"benefit_claims", 'Int'>
    readonly claim_amount: FieldRef<"benefit_claims", 'Decimal'>
    readonly claim_status: FieldRef<"benefit_claims", 'Int'>
    readonly submitted_at: FieldRef<"benefit_claims", 'DateTime'>
    readonly processed_at: FieldRef<"benefit_claims", 'DateTime'>
    readonly remarks: FieldRef<"benefit_claims", 'String'>
    readonly userID: FieldRef<"benefit_claims", 'Int'>
    readonly agency_id: FieldRef<"benefit_claims", 'Int'>
    readonly btype_id: FieldRef<"benefit_claims", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * benefit_claims findUnique
   */
  export type benefit_claimsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    /**
     * Filter, which benefit_claims to fetch.
     */
    where: benefit_claimsWhereUniqueInput
  }

  /**
   * benefit_claims findUniqueOrThrow
   */
  export type benefit_claimsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    /**
     * Filter, which benefit_claims to fetch.
     */
    where: benefit_claimsWhereUniqueInput
  }

  /**
   * benefit_claims findFirst
   */
  export type benefit_claimsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    /**
     * Filter, which benefit_claims to fetch.
     */
    where?: benefit_claimsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of benefit_claims to fetch.
     */
    orderBy?: benefit_claimsOrderByWithRelationInput | benefit_claimsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for benefit_claims.
     */
    cursor?: benefit_claimsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` benefit_claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` benefit_claims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of benefit_claims.
     */
    distinct?: Benefit_claimsScalarFieldEnum | Benefit_claimsScalarFieldEnum[]
  }

  /**
   * benefit_claims findFirstOrThrow
   */
  export type benefit_claimsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    /**
     * Filter, which benefit_claims to fetch.
     */
    where?: benefit_claimsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of benefit_claims to fetch.
     */
    orderBy?: benefit_claimsOrderByWithRelationInput | benefit_claimsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for benefit_claims.
     */
    cursor?: benefit_claimsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` benefit_claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` benefit_claims.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of benefit_claims.
     */
    distinct?: Benefit_claimsScalarFieldEnum | Benefit_claimsScalarFieldEnum[]
  }

  /**
   * benefit_claims findMany
   */
  export type benefit_claimsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    /**
     * Filter, which benefit_claims to fetch.
     */
    where?: benefit_claimsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of benefit_claims to fetch.
     */
    orderBy?: benefit_claimsOrderByWithRelationInput | benefit_claimsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing benefit_claims.
     */
    cursor?: benefit_claimsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` benefit_claims from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` benefit_claims.
     */
    skip?: number
    distinct?: Benefit_claimsScalarFieldEnum | Benefit_claimsScalarFieldEnum[]
  }

  /**
   * benefit_claims create
   */
  export type benefit_claimsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    /**
     * The data needed to create a benefit_claims.
     */
    data: XOR<benefit_claimsCreateInput, benefit_claimsUncheckedCreateInput>
  }

  /**
   * benefit_claims createMany
   */
  export type benefit_claimsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many benefit_claims.
     */
    data: benefit_claimsCreateManyInput | benefit_claimsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * benefit_claims createManyAndReturn
   */
  export type benefit_claimsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many benefit_claims.
     */
    data: benefit_claimsCreateManyInput | benefit_claimsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * benefit_claims update
   */
  export type benefit_claimsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    /**
     * The data needed to update a benefit_claims.
     */
    data: XOR<benefit_claimsUpdateInput, benefit_claimsUncheckedUpdateInput>
    /**
     * Choose, which benefit_claims to update.
     */
    where: benefit_claimsWhereUniqueInput
  }

  /**
   * benefit_claims updateMany
   */
  export type benefit_claimsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update benefit_claims.
     */
    data: XOR<benefit_claimsUpdateManyMutationInput, benefit_claimsUncheckedUpdateManyInput>
    /**
     * Filter which benefit_claims to update
     */
    where?: benefit_claimsWhereInput
  }

  /**
   * benefit_claims upsert
   */
  export type benefit_claimsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    /**
     * The filter to search for the benefit_claims to update in case it exists.
     */
    where: benefit_claimsWhereUniqueInput
    /**
     * In case the benefit_claims found by the `where` argument doesn't exist, create a new benefit_claims with this data.
     */
    create: XOR<benefit_claimsCreateInput, benefit_claimsUncheckedCreateInput>
    /**
     * In case the benefit_claims was found with the provided `where` argument, update it with this data.
     */
    update: XOR<benefit_claimsUpdateInput, benefit_claimsUncheckedUpdateInput>
  }

  /**
   * benefit_claims delete
   */
  export type benefit_claimsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    /**
     * Filter which benefit_claims to delete.
     */
    where: benefit_claimsWhereUniqueInput
  }

  /**
   * benefit_claims deleteMany
   */
  export type benefit_claimsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which benefit_claims to delete
     */
    where?: benefit_claimsWhereInput
  }

  /**
   * benefit_claims without action
   */
  export type benefit_claimsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
  }


  /**
   * Model faq
   */

  export type AggregateFaq = {
    _count: FaqCountAggregateOutputType | null
    _avg: FaqAvgAggregateOutputType | null
    _sum: FaqSumAggregateOutputType | null
    _min: FaqMinAggregateOutputType | null
    _max: FaqMaxAggregateOutputType | null
  }

  export type FaqAvgAggregateOutputType = {
    faq_id: number | null
    category_id: number | null
  }

  export type FaqSumAggregateOutputType = {
    faq_id: number | null
    category_id: number | null
  }

  export type FaqMinAggregateOutputType = {
    faq_id: number | null
    question: string | null
    answer: string | null
    category_id: number | null
  }

  export type FaqMaxAggregateOutputType = {
    faq_id: number | null
    question: string | null
    answer: string | null
    category_id: number | null
  }

  export type FaqCountAggregateOutputType = {
    faq_id: number
    question: number
    answer: number
    category_id: number
    _all: number
  }


  export type FaqAvgAggregateInputType = {
    faq_id?: true
    category_id?: true
  }

  export type FaqSumAggregateInputType = {
    faq_id?: true
    category_id?: true
  }

  export type FaqMinAggregateInputType = {
    faq_id?: true
    question?: true
    answer?: true
    category_id?: true
  }

  export type FaqMaxAggregateInputType = {
    faq_id?: true
    question?: true
    answer?: true
    category_id?: true
  }

  export type FaqCountAggregateInputType = {
    faq_id?: true
    question?: true
    answer?: true
    category_id?: true
    _all?: true
  }

  export type FaqAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which faq to aggregate.
     */
    where?: faqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs to fetch.
     */
    orderBy?: faqOrderByWithRelationInput | faqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: faqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned faqs
    **/
    _count?: true | FaqCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaqAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaqSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaqMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaqMaxAggregateInputType
  }

  export type GetFaqAggregateType<T extends FaqAggregateArgs> = {
        [P in keyof T & keyof AggregateFaq]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaq[P]>
      : GetScalarType<T[P], AggregateFaq[P]>
  }




  export type faqGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: faqWhereInput
    orderBy?: faqOrderByWithAggregationInput | faqOrderByWithAggregationInput[]
    by: FaqScalarFieldEnum[] | FaqScalarFieldEnum
    having?: faqScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaqCountAggregateInputType | true
    _avg?: FaqAvgAggregateInputType
    _sum?: FaqSumAggregateInputType
    _min?: FaqMinAggregateInputType
    _max?: FaqMaxAggregateInputType
  }

  export type FaqGroupByOutputType = {
    faq_id: number
    question: string
    answer: string
    category_id: number
    _count: FaqCountAggregateOutputType | null
    _avg: FaqAvgAggregateOutputType | null
    _sum: FaqSumAggregateOutputType | null
    _min: FaqMinAggregateOutputType | null
    _max: FaqMaxAggregateOutputType | null
  }

  type GetFaqGroupByPayload<T extends faqGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FaqGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaqGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaqGroupByOutputType[P]>
            : GetScalarType<T[P], FaqGroupByOutputType[P]>
        }
      >
    >


  export type faqSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    faq_id?: boolean
    question?: boolean
    answer?: boolean
    category_id?: boolean
    category?: boolean | faqs_categoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faq"]>

  export type faqSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    faq_id?: boolean
    question?: boolean
    answer?: boolean
    category_id?: boolean
    category?: boolean | faqs_categoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faq"]>

  export type faqSelectScalar = {
    faq_id?: boolean
    question?: boolean
    answer?: boolean
    category_id?: boolean
  }

  export type faqInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | faqs_categoryDefaultArgs<ExtArgs>
  }
  export type faqIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | faqs_categoryDefaultArgs<ExtArgs>
  }

  export type $faqPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "faq"
    objects: {
      category: Prisma.$faqs_categoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      faq_id: number
      question: string
      answer: string
      category_id: number
    }, ExtArgs["result"]["faq"]>
    composites: {}
  }

  type faqGetPayload<S extends boolean | null | undefined | faqDefaultArgs> = $Result.GetResult<Prisma.$faqPayload, S>

  type faqCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<faqFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FaqCountAggregateInputType | true
    }

  export interface faqDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['faq'], meta: { name: 'faq' } }
    /**
     * Find zero or one Faq that matches the filter.
     * @param {faqFindUniqueArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends faqFindUniqueArgs>(args: SelectSubset<T, faqFindUniqueArgs<ExtArgs>>): Prisma__faqClient<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Faq that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {faqFindUniqueOrThrowArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends faqFindUniqueOrThrowArgs>(args: SelectSubset<T, faqFindUniqueOrThrowArgs<ExtArgs>>): Prisma__faqClient<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Faq that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqFindFirstArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends faqFindFirstArgs>(args?: SelectSubset<T, faqFindFirstArgs<ExtArgs>>): Prisma__faqClient<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Faq that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqFindFirstOrThrowArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends faqFindFirstOrThrowArgs>(args?: SelectSubset<T, faqFindFirstOrThrowArgs<ExtArgs>>): Prisma__faqClient<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Faqs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faqs
     * const faqs = await prisma.faq.findMany()
     * 
     * // Get first 10 Faqs
     * const faqs = await prisma.faq.findMany({ take: 10 })
     * 
     * // Only select the `faq_id`
     * const faqWithFaq_idOnly = await prisma.faq.findMany({ select: { faq_id: true } })
     * 
     */
    findMany<T extends faqFindManyArgs>(args?: SelectSubset<T, faqFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Faq.
     * @param {faqCreateArgs} args - Arguments to create a Faq.
     * @example
     * // Create one Faq
     * const Faq = await prisma.faq.create({
     *   data: {
     *     // ... data to create a Faq
     *   }
     * })
     * 
     */
    create<T extends faqCreateArgs>(args: SelectSubset<T, faqCreateArgs<ExtArgs>>): Prisma__faqClient<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Faqs.
     * @param {faqCreateManyArgs} args - Arguments to create many Faqs.
     * @example
     * // Create many Faqs
     * const faq = await prisma.faq.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends faqCreateManyArgs>(args?: SelectSubset<T, faqCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Faqs and returns the data saved in the database.
     * @param {faqCreateManyAndReturnArgs} args - Arguments to create many Faqs.
     * @example
     * // Create many Faqs
     * const faq = await prisma.faq.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Faqs and only return the `faq_id`
     * const faqWithFaq_idOnly = await prisma.faq.createManyAndReturn({ 
     *   select: { faq_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends faqCreateManyAndReturnArgs>(args?: SelectSubset<T, faqCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Faq.
     * @param {faqDeleteArgs} args - Arguments to delete one Faq.
     * @example
     * // Delete one Faq
     * const Faq = await prisma.faq.delete({
     *   where: {
     *     // ... filter to delete one Faq
     *   }
     * })
     * 
     */
    delete<T extends faqDeleteArgs>(args: SelectSubset<T, faqDeleteArgs<ExtArgs>>): Prisma__faqClient<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Faq.
     * @param {faqUpdateArgs} args - Arguments to update one Faq.
     * @example
     * // Update one Faq
     * const faq = await prisma.faq.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends faqUpdateArgs>(args: SelectSubset<T, faqUpdateArgs<ExtArgs>>): Prisma__faqClient<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Faqs.
     * @param {faqDeleteManyArgs} args - Arguments to filter Faqs to delete.
     * @example
     * // Delete a few Faqs
     * const { count } = await prisma.faq.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends faqDeleteManyArgs>(args?: SelectSubset<T, faqDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faqs
     * const faq = await prisma.faq.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends faqUpdateManyArgs>(args: SelectSubset<T, faqUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Faq.
     * @param {faqUpsertArgs} args - Arguments to update or create a Faq.
     * @example
     * // Update or create a Faq
     * const faq = await prisma.faq.upsert({
     *   create: {
     *     // ... data to create a Faq
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Faq we want to update
     *   }
     * })
     */
    upsert<T extends faqUpsertArgs>(args: SelectSubset<T, faqUpsertArgs<ExtArgs>>): Prisma__faqClient<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Faqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqCountArgs} args - Arguments to filter Faqs to count.
     * @example
     * // Count the number of Faqs
     * const count = await prisma.faq.count({
     *   where: {
     *     // ... the filter for the Faqs we want to count
     *   }
     * })
    **/
    count<T extends faqCountArgs>(
      args?: Subset<T, faqCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaqCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Faq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaqAggregateArgs>(args: Subset<T, FaqAggregateArgs>): Prisma.PrismaPromise<GetFaqAggregateType<T>>

    /**
     * Group by Faq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends faqGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: faqGroupByArgs['orderBy'] }
        : { orderBy?: faqGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, faqGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaqGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the faq model
   */
  readonly fields: faqFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for faq.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__faqClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends faqs_categoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, faqs_categoryDefaultArgs<ExtArgs>>): Prisma__faqs_categoryClient<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the faq model
   */ 
  interface faqFieldRefs {
    readonly faq_id: FieldRef<"faq", 'Int'>
    readonly question: FieldRef<"faq", 'String'>
    readonly answer: FieldRef<"faq", 'String'>
    readonly category_id: FieldRef<"faq", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * faq findUnique
   */
  export type faqFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
    /**
     * Filter, which faq to fetch.
     */
    where: faqWhereUniqueInput
  }

  /**
   * faq findUniqueOrThrow
   */
  export type faqFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
    /**
     * Filter, which faq to fetch.
     */
    where: faqWhereUniqueInput
  }

  /**
   * faq findFirst
   */
  export type faqFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
    /**
     * Filter, which faq to fetch.
     */
    where?: faqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs to fetch.
     */
    orderBy?: faqOrderByWithRelationInput | faqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for faqs.
     */
    cursor?: faqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of faqs.
     */
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * faq findFirstOrThrow
   */
  export type faqFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
    /**
     * Filter, which faq to fetch.
     */
    where?: faqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs to fetch.
     */
    orderBy?: faqOrderByWithRelationInput | faqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for faqs.
     */
    cursor?: faqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of faqs.
     */
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * faq findMany
   */
  export type faqFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
    /**
     * Filter, which faqs to fetch.
     */
    where?: faqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs to fetch.
     */
    orderBy?: faqOrderByWithRelationInput | faqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing faqs.
     */
    cursor?: faqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs.
     */
    skip?: number
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * faq create
   */
  export type faqCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
    /**
     * The data needed to create a faq.
     */
    data: XOR<faqCreateInput, faqUncheckedCreateInput>
  }

  /**
   * faq createMany
   */
  export type faqCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many faqs.
     */
    data: faqCreateManyInput | faqCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * faq createManyAndReturn
   */
  export type faqCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many faqs.
     */
    data: faqCreateManyInput | faqCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * faq update
   */
  export type faqUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
    /**
     * The data needed to update a faq.
     */
    data: XOR<faqUpdateInput, faqUncheckedUpdateInput>
    /**
     * Choose, which faq to update.
     */
    where: faqWhereUniqueInput
  }

  /**
   * faq updateMany
   */
  export type faqUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update faqs.
     */
    data: XOR<faqUpdateManyMutationInput, faqUncheckedUpdateManyInput>
    /**
     * Filter which faqs to update
     */
    where?: faqWhereInput
  }

  /**
   * faq upsert
   */
  export type faqUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
    /**
     * The filter to search for the faq to update in case it exists.
     */
    where: faqWhereUniqueInput
    /**
     * In case the faq found by the `where` argument doesn't exist, create a new faq with this data.
     */
    create: XOR<faqCreateInput, faqUncheckedCreateInput>
    /**
     * In case the faq was found with the provided `where` argument, update it with this data.
     */
    update: XOR<faqUpdateInput, faqUncheckedUpdateInput>
  }

  /**
   * faq delete
   */
  export type faqDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
    /**
     * Filter which faq to delete.
     */
    where: faqWhereUniqueInput
  }

  /**
   * faq deleteMany
   */
  export type faqDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which faqs to delete
     */
    where?: faqWhereInput
  }

  /**
   * faq without action
   */
  export type faqDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
  }


  /**
   * Model guides_tutorials
   */

  export type AggregateGuides_tutorials = {
    _count: Guides_tutorialsCountAggregateOutputType | null
    _avg: Guides_tutorialsAvgAggregateOutputType | null
    _sum: Guides_tutorialsSumAggregateOutputType | null
    _min: Guides_tutorialsMinAggregateOutputType | null
    _max: Guides_tutorialsMaxAggregateOutputType | null
  }

  export type Guides_tutorialsAvgAggregateOutputType = {
    guide_id: number | null
  }

  export type Guides_tutorialsSumAggregateOutputType = {
    guide_id: number | null
  }

  export type Guides_tutorialsMinAggregateOutputType = {
    guide_id: number | null
    title: string | null
    content: string | null
    category: string | null
  }

  export type Guides_tutorialsMaxAggregateOutputType = {
    guide_id: number | null
    title: string | null
    content: string | null
    category: string | null
  }

  export type Guides_tutorialsCountAggregateOutputType = {
    guide_id: number
    title: number
    content: number
    category: number
    _all: number
  }


  export type Guides_tutorialsAvgAggregateInputType = {
    guide_id?: true
  }

  export type Guides_tutorialsSumAggregateInputType = {
    guide_id?: true
  }

  export type Guides_tutorialsMinAggregateInputType = {
    guide_id?: true
    title?: true
    content?: true
    category?: true
  }

  export type Guides_tutorialsMaxAggregateInputType = {
    guide_id?: true
    title?: true
    content?: true
    category?: true
  }

  export type Guides_tutorialsCountAggregateInputType = {
    guide_id?: true
    title?: true
    content?: true
    category?: true
    _all?: true
  }

  export type Guides_tutorialsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which guides_tutorials to aggregate.
     */
    where?: guides_tutorialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guides_tutorials to fetch.
     */
    orderBy?: guides_tutorialsOrderByWithRelationInput | guides_tutorialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: guides_tutorialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guides_tutorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guides_tutorials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned guides_tutorials
    **/
    _count?: true | Guides_tutorialsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Guides_tutorialsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Guides_tutorialsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Guides_tutorialsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Guides_tutorialsMaxAggregateInputType
  }

  export type GetGuides_tutorialsAggregateType<T extends Guides_tutorialsAggregateArgs> = {
        [P in keyof T & keyof AggregateGuides_tutorials]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuides_tutorials[P]>
      : GetScalarType<T[P], AggregateGuides_tutorials[P]>
  }




  export type guides_tutorialsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: guides_tutorialsWhereInput
    orderBy?: guides_tutorialsOrderByWithAggregationInput | guides_tutorialsOrderByWithAggregationInput[]
    by: Guides_tutorialsScalarFieldEnum[] | Guides_tutorialsScalarFieldEnum
    having?: guides_tutorialsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Guides_tutorialsCountAggregateInputType | true
    _avg?: Guides_tutorialsAvgAggregateInputType
    _sum?: Guides_tutorialsSumAggregateInputType
    _min?: Guides_tutorialsMinAggregateInputType
    _max?: Guides_tutorialsMaxAggregateInputType
  }

  export type Guides_tutorialsGroupByOutputType = {
    guide_id: number
    title: string
    content: string
    category: string
    _count: Guides_tutorialsCountAggregateOutputType | null
    _avg: Guides_tutorialsAvgAggregateOutputType | null
    _sum: Guides_tutorialsSumAggregateOutputType | null
    _min: Guides_tutorialsMinAggregateOutputType | null
    _max: Guides_tutorialsMaxAggregateOutputType | null
  }

  type GetGuides_tutorialsGroupByPayload<T extends guides_tutorialsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Guides_tutorialsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Guides_tutorialsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Guides_tutorialsGroupByOutputType[P]>
            : GetScalarType<T[P], Guides_tutorialsGroupByOutputType[P]>
        }
      >
    >


  export type guides_tutorialsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    guide_id?: boolean
    title?: boolean
    content?: boolean
    category?: boolean
  }, ExtArgs["result"]["guides_tutorials"]>

  export type guides_tutorialsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    guide_id?: boolean
    title?: boolean
    content?: boolean
    category?: boolean
  }, ExtArgs["result"]["guides_tutorials"]>

  export type guides_tutorialsSelectScalar = {
    guide_id?: boolean
    title?: boolean
    content?: boolean
    category?: boolean
  }


  export type $guides_tutorialsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "guides_tutorials"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      guide_id: number
      title: string
      content: string
      category: string
    }, ExtArgs["result"]["guides_tutorials"]>
    composites: {}
  }

  type guides_tutorialsGetPayload<S extends boolean | null | undefined | guides_tutorialsDefaultArgs> = $Result.GetResult<Prisma.$guides_tutorialsPayload, S>

  type guides_tutorialsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<guides_tutorialsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Guides_tutorialsCountAggregateInputType | true
    }

  export interface guides_tutorialsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['guides_tutorials'], meta: { name: 'guides_tutorials' } }
    /**
     * Find zero or one Guides_tutorials that matches the filter.
     * @param {guides_tutorialsFindUniqueArgs} args - Arguments to find a Guides_tutorials
     * @example
     * // Get one Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends guides_tutorialsFindUniqueArgs>(args: SelectSubset<T, guides_tutorialsFindUniqueArgs<ExtArgs>>): Prisma__guides_tutorialsClient<$Result.GetResult<Prisma.$guides_tutorialsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Guides_tutorials that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {guides_tutorialsFindUniqueOrThrowArgs} args - Arguments to find a Guides_tutorials
     * @example
     * // Get one Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends guides_tutorialsFindUniqueOrThrowArgs>(args: SelectSubset<T, guides_tutorialsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__guides_tutorialsClient<$Result.GetResult<Prisma.$guides_tutorialsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Guides_tutorials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guides_tutorialsFindFirstArgs} args - Arguments to find a Guides_tutorials
     * @example
     * // Get one Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends guides_tutorialsFindFirstArgs>(args?: SelectSubset<T, guides_tutorialsFindFirstArgs<ExtArgs>>): Prisma__guides_tutorialsClient<$Result.GetResult<Prisma.$guides_tutorialsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Guides_tutorials that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guides_tutorialsFindFirstOrThrowArgs} args - Arguments to find a Guides_tutorials
     * @example
     * // Get one Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends guides_tutorialsFindFirstOrThrowArgs>(args?: SelectSubset<T, guides_tutorialsFindFirstOrThrowArgs<ExtArgs>>): Prisma__guides_tutorialsClient<$Result.GetResult<Prisma.$guides_tutorialsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Guides_tutorials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guides_tutorialsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.findMany()
     * 
     * // Get first 10 Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.findMany({ take: 10 })
     * 
     * // Only select the `guide_id`
     * const guides_tutorialsWithGuide_idOnly = await prisma.guides_tutorials.findMany({ select: { guide_id: true } })
     * 
     */
    findMany<T extends guides_tutorialsFindManyArgs>(args?: SelectSubset<T, guides_tutorialsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$guides_tutorialsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Guides_tutorials.
     * @param {guides_tutorialsCreateArgs} args - Arguments to create a Guides_tutorials.
     * @example
     * // Create one Guides_tutorials
     * const Guides_tutorials = await prisma.guides_tutorials.create({
     *   data: {
     *     // ... data to create a Guides_tutorials
     *   }
     * })
     * 
     */
    create<T extends guides_tutorialsCreateArgs>(args: SelectSubset<T, guides_tutorialsCreateArgs<ExtArgs>>): Prisma__guides_tutorialsClient<$Result.GetResult<Prisma.$guides_tutorialsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Guides_tutorials.
     * @param {guides_tutorialsCreateManyArgs} args - Arguments to create many Guides_tutorials.
     * @example
     * // Create many Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends guides_tutorialsCreateManyArgs>(args?: SelectSubset<T, guides_tutorialsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Guides_tutorials and returns the data saved in the database.
     * @param {guides_tutorialsCreateManyAndReturnArgs} args - Arguments to create many Guides_tutorials.
     * @example
     * // Create many Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Guides_tutorials and only return the `guide_id`
     * const guides_tutorialsWithGuide_idOnly = await prisma.guides_tutorials.createManyAndReturn({ 
     *   select: { guide_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends guides_tutorialsCreateManyAndReturnArgs>(args?: SelectSubset<T, guides_tutorialsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$guides_tutorialsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Guides_tutorials.
     * @param {guides_tutorialsDeleteArgs} args - Arguments to delete one Guides_tutorials.
     * @example
     * // Delete one Guides_tutorials
     * const Guides_tutorials = await prisma.guides_tutorials.delete({
     *   where: {
     *     // ... filter to delete one Guides_tutorials
     *   }
     * })
     * 
     */
    delete<T extends guides_tutorialsDeleteArgs>(args: SelectSubset<T, guides_tutorialsDeleteArgs<ExtArgs>>): Prisma__guides_tutorialsClient<$Result.GetResult<Prisma.$guides_tutorialsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Guides_tutorials.
     * @param {guides_tutorialsUpdateArgs} args - Arguments to update one Guides_tutorials.
     * @example
     * // Update one Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends guides_tutorialsUpdateArgs>(args: SelectSubset<T, guides_tutorialsUpdateArgs<ExtArgs>>): Prisma__guides_tutorialsClient<$Result.GetResult<Prisma.$guides_tutorialsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Guides_tutorials.
     * @param {guides_tutorialsDeleteManyArgs} args - Arguments to filter Guides_tutorials to delete.
     * @example
     * // Delete a few Guides_tutorials
     * const { count } = await prisma.guides_tutorials.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends guides_tutorialsDeleteManyArgs>(args?: SelectSubset<T, guides_tutorialsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guides_tutorials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guides_tutorialsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends guides_tutorialsUpdateManyArgs>(args: SelectSubset<T, guides_tutorialsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Guides_tutorials.
     * @param {guides_tutorialsUpsertArgs} args - Arguments to update or create a Guides_tutorials.
     * @example
     * // Update or create a Guides_tutorials
     * const guides_tutorials = await prisma.guides_tutorials.upsert({
     *   create: {
     *     // ... data to create a Guides_tutorials
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guides_tutorials we want to update
     *   }
     * })
     */
    upsert<T extends guides_tutorialsUpsertArgs>(args: SelectSubset<T, guides_tutorialsUpsertArgs<ExtArgs>>): Prisma__guides_tutorialsClient<$Result.GetResult<Prisma.$guides_tutorialsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Guides_tutorials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guides_tutorialsCountArgs} args - Arguments to filter Guides_tutorials to count.
     * @example
     * // Count the number of Guides_tutorials
     * const count = await prisma.guides_tutorials.count({
     *   where: {
     *     // ... the filter for the Guides_tutorials we want to count
     *   }
     * })
    **/
    count<T extends guides_tutorialsCountArgs>(
      args?: Subset<T, guides_tutorialsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Guides_tutorialsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guides_tutorials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Guides_tutorialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Guides_tutorialsAggregateArgs>(args: Subset<T, Guides_tutorialsAggregateArgs>): Prisma.PrismaPromise<GetGuides_tutorialsAggregateType<T>>

    /**
     * Group by Guides_tutorials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guides_tutorialsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends guides_tutorialsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: guides_tutorialsGroupByArgs['orderBy'] }
        : { orderBy?: guides_tutorialsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, guides_tutorialsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuides_tutorialsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the guides_tutorials model
   */
  readonly fields: guides_tutorialsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for guides_tutorials.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__guides_tutorialsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the guides_tutorials model
   */ 
  interface guides_tutorialsFieldRefs {
    readonly guide_id: FieldRef<"guides_tutorials", 'Int'>
    readonly title: FieldRef<"guides_tutorials", 'String'>
    readonly content: FieldRef<"guides_tutorials", 'String'>
    readonly category: FieldRef<"guides_tutorials", 'String'>
  }
    

  // Custom InputTypes
  /**
   * guides_tutorials findUnique
   */
  export type guides_tutorialsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelect<ExtArgs> | null
    /**
     * Filter, which guides_tutorials to fetch.
     */
    where: guides_tutorialsWhereUniqueInput
  }

  /**
   * guides_tutorials findUniqueOrThrow
   */
  export type guides_tutorialsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelect<ExtArgs> | null
    /**
     * Filter, which guides_tutorials to fetch.
     */
    where: guides_tutorialsWhereUniqueInput
  }

  /**
   * guides_tutorials findFirst
   */
  export type guides_tutorialsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelect<ExtArgs> | null
    /**
     * Filter, which guides_tutorials to fetch.
     */
    where?: guides_tutorialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guides_tutorials to fetch.
     */
    orderBy?: guides_tutorialsOrderByWithRelationInput | guides_tutorialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for guides_tutorials.
     */
    cursor?: guides_tutorialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guides_tutorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guides_tutorials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of guides_tutorials.
     */
    distinct?: Guides_tutorialsScalarFieldEnum | Guides_tutorialsScalarFieldEnum[]
  }

  /**
   * guides_tutorials findFirstOrThrow
   */
  export type guides_tutorialsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelect<ExtArgs> | null
    /**
     * Filter, which guides_tutorials to fetch.
     */
    where?: guides_tutorialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guides_tutorials to fetch.
     */
    orderBy?: guides_tutorialsOrderByWithRelationInput | guides_tutorialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for guides_tutorials.
     */
    cursor?: guides_tutorialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guides_tutorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guides_tutorials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of guides_tutorials.
     */
    distinct?: Guides_tutorialsScalarFieldEnum | Guides_tutorialsScalarFieldEnum[]
  }

  /**
   * guides_tutorials findMany
   */
  export type guides_tutorialsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelect<ExtArgs> | null
    /**
     * Filter, which guides_tutorials to fetch.
     */
    where?: guides_tutorialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guides_tutorials to fetch.
     */
    orderBy?: guides_tutorialsOrderByWithRelationInput | guides_tutorialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing guides_tutorials.
     */
    cursor?: guides_tutorialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guides_tutorials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guides_tutorials.
     */
    skip?: number
    distinct?: Guides_tutorialsScalarFieldEnum | Guides_tutorialsScalarFieldEnum[]
  }

  /**
   * guides_tutorials create
   */
  export type guides_tutorialsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelect<ExtArgs> | null
    /**
     * The data needed to create a guides_tutorials.
     */
    data: XOR<guides_tutorialsCreateInput, guides_tutorialsUncheckedCreateInput>
  }

  /**
   * guides_tutorials createMany
   */
  export type guides_tutorialsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many guides_tutorials.
     */
    data: guides_tutorialsCreateManyInput | guides_tutorialsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * guides_tutorials createManyAndReturn
   */
  export type guides_tutorialsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many guides_tutorials.
     */
    data: guides_tutorialsCreateManyInput | guides_tutorialsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * guides_tutorials update
   */
  export type guides_tutorialsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelect<ExtArgs> | null
    /**
     * The data needed to update a guides_tutorials.
     */
    data: XOR<guides_tutorialsUpdateInput, guides_tutorialsUncheckedUpdateInput>
    /**
     * Choose, which guides_tutorials to update.
     */
    where: guides_tutorialsWhereUniqueInput
  }

  /**
   * guides_tutorials updateMany
   */
  export type guides_tutorialsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update guides_tutorials.
     */
    data: XOR<guides_tutorialsUpdateManyMutationInput, guides_tutorialsUncheckedUpdateManyInput>
    /**
     * Filter which guides_tutorials to update
     */
    where?: guides_tutorialsWhereInput
  }

  /**
   * guides_tutorials upsert
   */
  export type guides_tutorialsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelect<ExtArgs> | null
    /**
     * The filter to search for the guides_tutorials to update in case it exists.
     */
    where: guides_tutorialsWhereUniqueInput
    /**
     * In case the guides_tutorials found by the `where` argument doesn't exist, create a new guides_tutorials with this data.
     */
    create: XOR<guides_tutorialsCreateInput, guides_tutorialsUncheckedCreateInput>
    /**
     * In case the guides_tutorials was found with the provided `where` argument, update it with this data.
     */
    update: XOR<guides_tutorialsUpdateInput, guides_tutorialsUncheckedUpdateInput>
  }

  /**
   * guides_tutorials delete
   */
  export type guides_tutorialsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelect<ExtArgs> | null
    /**
     * Filter which guides_tutorials to delete.
     */
    where: guides_tutorialsWhereUniqueInput
  }

  /**
   * guides_tutorials deleteMany
   */
  export type guides_tutorialsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which guides_tutorials to delete
     */
    where?: guides_tutorialsWhereInput
  }

  /**
   * guides_tutorials without action
   */
  export type guides_tutorialsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guides_tutorials
     */
    select?: guides_tutorialsSelect<ExtArgs> | null
  }


  /**
   * Model benefits_types
   */

  export type AggregateBenefits_types = {
    _count: Benefits_typesCountAggregateOutputType | null
    _avg: Benefits_typesAvgAggregateOutputType | null
    _sum: Benefits_typesSumAggregateOutputType | null
    _min: Benefits_typesMinAggregateOutputType | null
    _max: Benefits_typesMaxAggregateOutputType | null
  }

  export type Benefits_typesAvgAggregateOutputType = {
    btypes_id: number | null
    required_month: number | null
    agency_id: number | null
  }

  export type Benefits_typesSumAggregateOutputType = {
    btypes_id: number | null
    required_month: number | null
    agency_id: number | null
  }

  export type Benefits_typesMinAggregateOutputType = {
    btypes_id: number | null
    title: string | null
    content: string | null
    required_month: number | null
    agency_id: number | null
  }

  export type Benefits_typesMaxAggregateOutputType = {
    btypes_id: number | null
    title: string | null
    content: string | null
    required_month: number | null
    agency_id: number | null
  }

  export type Benefits_typesCountAggregateOutputType = {
    btypes_id: number
    title: number
    content: number
    required_month: number
    agency_id: number
    _all: number
  }


  export type Benefits_typesAvgAggregateInputType = {
    btypes_id?: true
    required_month?: true
    agency_id?: true
  }

  export type Benefits_typesSumAggregateInputType = {
    btypes_id?: true
    required_month?: true
    agency_id?: true
  }

  export type Benefits_typesMinAggregateInputType = {
    btypes_id?: true
    title?: true
    content?: true
    required_month?: true
    agency_id?: true
  }

  export type Benefits_typesMaxAggregateInputType = {
    btypes_id?: true
    title?: true
    content?: true
    required_month?: true
    agency_id?: true
  }

  export type Benefits_typesCountAggregateInputType = {
    btypes_id?: true
    title?: true
    content?: true
    required_month?: true
    agency_id?: true
    _all?: true
  }

  export type Benefits_typesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which benefits_types to aggregate.
     */
    where?: benefits_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of benefits_types to fetch.
     */
    orderBy?: benefits_typesOrderByWithRelationInput | benefits_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: benefits_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` benefits_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` benefits_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned benefits_types
    **/
    _count?: true | Benefits_typesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Benefits_typesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Benefits_typesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Benefits_typesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Benefits_typesMaxAggregateInputType
  }

  export type GetBenefits_typesAggregateType<T extends Benefits_typesAggregateArgs> = {
        [P in keyof T & keyof AggregateBenefits_types]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBenefits_types[P]>
      : GetScalarType<T[P], AggregateBenefits_types[P]>
  }




  export type benefits_typesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: benefits_typesWhereInput
    orderBy?: benefits_typesOrderByWithAggregationInput | benefits_typesOrderByWithAggregationInput[]
    by: Benefits_typesScalarFieldEnum[] | Benefits_typesScalarFieldEnum
    having?: benefits_typesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Benefits_typesCountAggregateInputType | true
    _avg?: Benefits_typesAvgAggregateInputType
    _sum?: Benefits_typesSumAggregateInputType
    _min?: Benefits_typesMinAggregateInputType
    _max?: Benefits_typesMaxAggregateInputType
  }

  export type Benefits_typesGroupByOutputType = {
    btypes_id: number
    title: string
    content: string
    required_month: number
    agency_id: number
    _count: Benefits_typesCountAggregateOutputType | null
    _avg: Benefits_typesAvgAggregateOutputType | null
    _sum: Benefits_typesSumAggregateOutputType | null
    _min: Benefits_typesMinAggregateOutputType | null
    _max: Benefits_typesMaxAggregateOutputType | null
  }

  type GetBenefits_typesGroupByPayload<T extends benefits_typesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Benefits_typesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Benefits_typesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Benefits_typesGroupByOutputType[P]>
            : GetScalarType<T[P], Benefits_typesGroupByOutputType[P]>
        }
      >
    >


  export type benefits_typesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    btypes_id?: boolean
    title?: boolean
    content?: boolean
    required_month?: boolean
    agency_id?: boolean
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
    benefit_claims?: boolean | benefits_types$benefit_claimsArgs<ExtArgs>
    _count?: boolean | Benefits_typesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["benefits_types"]>

  export type benefits_typesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    btypes_id?: boolean
    title?: boolean
    content?: boolean
    required_month?: boolean
    agency_id?: boolean
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["benefits_types"]>

  export type benefits_typesSelectScalar = {
    btypes_id?: boolean
    title?: boolean
    content?: boolean
    required_month?: boolean
    agency_id?: boolean
  }

  export type benefits_typesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
    benefit_claims?: boolean | benefits_types$benefit_claimsArgs<ExtArgs>
    _count?: boolean | Benefits_typesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type benefits_typesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | agency_informationDefaultArgs<ExtArgs>
  }

  export type $benefits_typesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "benefits_types"
    objects: {
      agency: Prisma.$agency_informationPayload<ExtArgs>
      benefit_claims: Prisma.$benefit_claimsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      btypes_id: number
      title: string
      content: string
      required_month: number
      agency_id: number
    }, ExtArgs["result"]["benefits_types"]>
    composites: {}
  }

  type benefits_typesGetPayload<S extends boolean | null | undefined | benefits_typesDefaultArgs> = $Result.GetResult<Prisma.$benefits_typesPayload, S>

  type benefits_typesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<benefits_typesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Benefits_typesCountAggregateInputType | true
    }

  export interface benefits_typesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['benefits_types'], meta: { name: 'benefits_types' } }
    /**
     * Find zero or one Benefits_types that matches the filter.
     * @param {benefits_typesFindUniqueArgs} args - Arguments to find a Benefits_types
     * @example
     * // Get one Benefits_types
     * const benefits_types = await prisma.benefits_types.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends benefits_typesFindUniqueArgs>(args: SelectSubset<T, benefits_typesFindUniqueArgs<ExtArgs>>): Prisma__benefits_typesClient<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Benefits_types that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {benefits_typesFindUniqueOrThrowArgs} args - Arguments to find a Benefits_types
     * @example
     * // Get one Benefits_types
     * const benefits_types = await prisma.benefits_types.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends benefits_typesFindUniqueOrThrowArgs>(args: SelectSubset<T, benefits_typesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__benefits_typesClient<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Benefits_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefits_typesFindFirstArgs} args - Arguments to find a Benefits_types
     * @example
     * // Get one Benefits_types
     * const benefits_types = await prisma.benefits_types.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends benefits_typesFindFirstArgs>(args?: SelectSubset<T, benefits_typesFindFirstArgs<ExtArgs>>): Prisma__benefits_typesClient<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Benefits_types that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefits_typesFindFirstOrThrowArgs} args - Arguments to find a Benefits_types
     * @example
     * // Get one Benefits_types
     * const benefits_types = await prisma.benefits_types.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends benefits_typesFindFirstOrThrowArgs>(args?: SelectSubset<T, benefits_typesFindFirstOrThrowArgs<ExtArgs>>): Prisma__benefits_typesClient<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Benefits_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefits_typesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Benefits_types
     * const benefits_types = await prisma.benefits_types.findMany()
     * 
     * // Get first 10 Benefits_types
     * const benefits_types = await prisma.benefits_types.findMany({ take: 10 })
     * 
     * // Only select the `btypes_id`
     * const benefits_typesWithBtypes_idOnly = await prisma.benefits_types.findMany({ select: { btypes_id: true } })
     * 
     */
    findMany<T extends benefits_typesFindManyArgs>(args?: SelectSubset<T, benefits_typesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Benefits_types.
     * @param {benefits_typesCreateArgs} args - Arguments to create a Benefits_types.
     * @example
     * // Create one Benefits_types
     * const Benefits_types = await prisma.benefits_types.create({
     *   data: {
     *     // ... data to create a Benefits_types
     *   }
     * })
     * 
     */
    create<T extends benefits_typesCreateArgs>(args: SelectSubset<T, benefits_typesCreateArgs<ExtArgs>>): Prisma__benefits_typesClient<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Benefits_types.
     * @param {benefits_typesCreateManyArgs} args - Arguments to create many Benefits_types.
     * @example
     * // Create many Benefits_types
     * const benefits_types = await prisma.benefits_types.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends benefits_typesCreateManyArgs>(args?: SelectSubset<T, benefits_typesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Benefits_types and returns the data saved in the database.
     * @param {benefits_typesCreateManyAndReturnArgs} args - Arguments to create many Benefits_types.
     * @example
     * // Create many Benefits_types
     * const benefits_types = await prisma.benefits_types.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Benefits_types and only return the `btypes_id`
     * const benefits_typesWithBtypes_idOnly = await prisma.benefits_types.createManyAndReturn({ 
     *   select: { btypes_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends benefits_typesCreateManyAndReturnArgs>(args?: SelectSubset<T, benefits_typesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Benefits_types.
     * @param {benefits_typesDeleteArgs} args - Arguments to delete one Benefits_types.
     * @example
     * // Delete one Benefits_types
     * const Benefits_types = await prisma.benefits_types.delete({
     *   where: {
     *     // ... filter to delete one Benefits_types
     *   }
     * })
     * 
     */
    delete<T extends benefits_typesDeleteArgs>(args: SelectSubset<T, benefits_typesDeleteArgs<ExtArgs>>): Prisma__benefits_typesClient<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Benefits_types.
     * @param {benefits_typesUpdateArgs} args - Arguments to update one Benefits_types.
     * @example
     * // Update one Benefits_types
     * const benefits_types = await prisma.benefits_types.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends benefits_typesUpdateArgs>(args: SelectSubset<T, benefits_typesUpdateArgs<ExtArgs>>): Prisma__benefits_typesClient<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Benefits_types.
     * @param {benefits_typesDeleteManyArgs} args - Arguments to filter Benefits_types to delete.
     * @example
     * // Delete a few Benefits_types
     * const { count } = await prisma.benefits_types.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends benefits_typesDeleteManyArgs>(args?: SelectSubset<T, benefits_typesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Benefits_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefits_typesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Benefits_types
     * const benefits_types = await prisma.benefits_types.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends benefits_typesUpdateManyArgs>(args: SelectSubset<T, benefits_typesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Benefits_types.
     * @param {benefits_typesUpsertArgs} args - Arguments to update or create a Benefits_types.
     * @example
     * // Update or create a Benefits_types
     * const benefits_types = await prisma.benefits_types.upsert({
     *   create: {
     *     // ... data to create a Benefits_types
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Benefits_types we want to update
     *   }
     * })
     */
    upsert<T extends benefits_typesUpsertArgs>(args: SelectSubset<T, benefits_typesUpsertArgs<ExtArgs>>): Prisma__benefits_typesClient<$Result.GetResult<Prisma.$benefits_typesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Benefits_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefits_typesCountArgs} args - Arguments to filter Benefits_types to count.
     * @example
     * // Count the number of Benefits_types
     * const count = await prisma.benefits_types.count({
     *   where: {
     *     // ... the filter for the Benefits_types we want to count
     *   }
     * })
    **/
    count<T extends benefits_typesCountArgs>(
      args?: Subset<T, benefits_typesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Benefits_typesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Benefits_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Benefits_typesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Benefits_typesAggregateArgs>(args: Subset<T, Benefits_typesAggregateArgs>): Prisma.PrismaPromise<GetBenefits_typesAggregateType<T>>

    /**
     * Group by Benefits_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {benefits_typesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends benefits_typesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: benefits_typesGroupByArgs['orderBy'] }
        : { orderBy?: benefits_typesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, benefits_typesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBenefits_typesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the benefits_types model
   */
  readonly fields: benefits_typesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for benefits_types.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__benefits_typesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agency<T extends agency_informationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, agency_informationDefaultArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    benefit_claims<T extends benefits_types$benefit_claimsArgs<ExtArgs> = {}>(args?: Subset<T, benefits_types$benefit_claimsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$benefit_claimsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the benefits_types model
   */ 
  interface benefits_typesFieldRefs {
    readonly btypes_id: FieldRef<"benefits_types", 'Int'>
    readonly title: FieldRef<"benefits_types", 'String'>
    readonly content: FieldRef<"benefits_types", 'String'>
    readonly required_month: FieldRef<"benefits_types", 'Int'>
    readonly agency_id: FieldRef<"benefits_types", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * benefits_types findUnique
   */
  export type benefits_typesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
    /**
     * Filter, which benefits_types to fetch.
     */
    where: benefits_typesWhereUniqueInput
  }

  /**
   * benefits_types findUniqueOrThrow
   */
  export type benefits_typesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
    /**
     * Filter, which benefits_types to fetch.
     */
    where: benefits_typesWhereUniqueInput
  }

  /**
   * benefits_types findFirst
   */
  export type benefits_typesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
    /**
     * Filter, which benefits_types to fetch.
     */
    where?: benefits_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of benefits_types to fetch.
     */
    orderBy?: benefits_typesOrderByWithRelationInput | benefits_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for benefits_types.
     */
    cursor?: benefits_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` benefits_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` benefits_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of benefits_types.
     */
    distinct?: Benefits_typesScalarFieldEnum | Benefits_typesScalarFieldEnum[]
  }

  /**
   * benefits_types findFirstOrThrow
   */
  export type benefits_typesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
    /**
     * Filter, which benefits_types to fetch.
     */
    where?: benefits_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of benefits_types to fetch.
     */
    orderBy?: benefits_typesOrderByWithRelationInput | benefits_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for benefits_types.
     */
    cursor?: benefits_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` benefits_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` benefits_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of benefits_types.
     */
    distinct?: Benefits_typesScalarFieldEnum | Benefits_typesScalarFieldEnum[]
  }

  /**
   * benefits_types findMany
   */
  export type benefits_typesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
    /**
     * Filter, which benefits_types to fetch.
     */
    where?: benefits_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of benefits_types to fetch.
     */
    orderBy?: benefits_typesOrderByWithRelationInput | benefits_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing benefits_types.
     */
    cursor?: benefits_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` benefits_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` benefits_types.
     */
    skip?: number
    distinct?: Benefits_typesScalarFieldEnum | Benefits_typesScalarFieldEnum[]
  }

  /**
   * benefits_types create
   */
  export type benefits_typesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
    /**
     * The data needed to create a benefits_types.
     */
    data: XOR<benefits_typesCreateInput, benefits_typesUncheckedCreateInput>
  }

  /**
   * benefits_types createMany
   */
  export type benefits_typesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many benefits_types.
     */
    data: benefits_typesCreateManyInput | benefits_typesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * benefits_types createManyAndReturn
   */
  export type benefits_typesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many benefits_types.
     */
    data: benefits_typesCreateManyInput | benefits_typesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * benefits_types update
   */
  export type benefits_typesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
    /**
     * The data needed to update a benefits_types.
     */
    data: XOR<benefits_typesUpdateInput, benefits_typesUncheckedUpdateInput>
    /**
     * Choose, which benefits_types to update.
     */
    where: benefits_typesWhereUniqueInput
  }

  /**
   * benefits_types updateMany
   */
  export type benefits_typesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update benefits_types.
     */
    data: XOR<benefits_typesUpdateManyMutationInput, benefits_typesUncheckedUpdateManyInput>
    /**
     * Filter which benefits_types to update
     */
    where?: benefits_typesWhereInput
  }

  /**
   * benefits_types upsert
   */
  export type benefits_typesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
    /**
     * The filter to search for the benefits_types to update in case it exists.
     */
    where: benefits_typesWhereUniqueInput
    /**
     * In case the benefits_types found by the `where` argument doesn't exist, create a new benefits_types with this data.
     */
    create: XOR<benefits_typesCreateInput, benefits_typesUncheckedCreateInput>
    /**
     * In case the benefits_types was found with the provided `where` argument, update it with this data.
     */
    update: XOR<benefits_typesUpdateInput, benefits_typesUncheckedUpdateInput>
  }

  /**
   * benefits_types delete
   */
  export type benefits_typesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
    /**
     * Filter which benefits_types to delete.
     */
    where: benefits_typesWhereUniqueInput
  }

  /**
   * benefits_types deleteMany
   */
  export type benefits_typesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which benefits_types to delete
     */
    where?: benefits_typesWhereInput
  }

  /**
   * benefits_types.benefit_claims
   */
  export type benefits_types$benefit_claimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefit_claims
     */
    select?: benefit_claimsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefit_claimsInclude<ExtArgs> | null
    where?: benefit_claimsWhereInput
    orderBy?: benefit_claimsOrderByWithRelationInput | benefit_claimsOrderByWithRelationInput[]
    cursor?: benefit_claimsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Benefit_claimsScalarFieldEnum | Benefit_claimsScalarFieldEnum[]
  }

  /**
   * benefits_types without action
   */
  export type benefits_typesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the benefits_types
     */
    select?: benefits_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: benefits_typesInclude<ExtArgs> | null
  }


  /**
   * Model faqs_category
   */

  export type AggregateFaqs_category = {
    _count: Faqs_categoryCountAggregateOutputType | null
    _avg: Faqs_categoryAvgAggregateOutputType | null
    _sum: Faqs_categorySumAggregateOutputType | null
    _min: Faqs_categoryMinAggregateOutputType | null
    _max: Faqs_categoryMaxAggregateOutputType | null
  }

  export type Faqs_categoryAvgAggregateOutputType = {
    faq_cateforyId: number | null
  }

  export type Faqs_categorySumAggregateOutputType = {
    faq_cateforyId: number | null
  }

  export type Faqs_categoryMinAggregateOutputType = {
    faq_cateforyId: number | null
    faq_categoryName: string | null
  }

  export type Faqs_categoryMaxAggregateOutputType = {
    faq_cateforyId: number | null
    faq_categoryName: string | null
  }

  export type Faqs_categoryCountAggregateOutputType = {
    faq_cateforyId: number
    faq_categoryName: number
    _all: number
  }


  export type Faqs_categoryAvgAggregateInputType = {
    faq_cateforyId?: true
  }

  export type Faqs_categorySumAggregateInputType = {
    faq_cateforyId?: true
  }

  export type Faqs_categoryMinAggregateInputType = {
    faq_cateforyId?: true
    faq_categoryName?: true
  }

  export type Faqs_categoryMaxAggregateInputType = {
    faq_cateforyId?: true
    faq_categoryName?: true
  }

  export type Faqs_categoryCountAggregateInputType = {
    faq_cateforyId?: true
    faq_categoryName?: true
    _all?: true
  }

  export type Faqs_categoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which faqs_category to aggregate.
     */
    where?: faqs_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs_categories to fetch.
     */
    orderBy?: faqs_categoryOrderByWithRelationInput | faqs_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: faqs_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned faqs_categories
    **/
    _count?: true | Faqs_categoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Faqs_categoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Faqs_categorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Faqs_categoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Faqs_categoryMaxAggregateInputType
  }

  export type GetFaqs_categoryAggregateType<T extends Faqs_categoryAggregateArgs> = {
        [P in keyof T & keyof AggregateFaqs_category]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaqs_category[P]>
      : GetScalarType<T[P], AggregateFaqs_category[P]>
  }




  export type faqs_categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: faqs_categoryWhereInput
    orderBy?: faqs_categoryOrderByWithAggregationInput | faqs_categoryOrderByWithAggregationInput[]
    by: Faqs_categoryScalarFieldEnum[] | Faqs_categoryScalarFieldEnum
    having?: faqs_categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Faqs_categoryCountAggregateInputType | true
    _avg?: Faqs_categoryAvgAggregateInputType
    _sum?: Faqs_categorySumAggregateInputType
    _min?: Faqs_categoryMinAggregateInputType
    _max?: Faqs_categoryMaxAggregateInputType
  }

  export type Faqs_categoryGroupByOutputType = {
    faq_cateforyId: number
    faq_categoryName: string
    _count: Faqs_categoryCountAggregateOutputType | null
    _avg: Faqs_categoryAvgAggregateOutputType | null
    _sum: Faqs_categorySumAggregateOutputType | null
    _min: Faqs_categoryMinAggregateOutputType | null
    _max: Faqs_categoryMaxAggregateOutputType | null
  }

  type GetFaqs_categoryGroupByPayload<T extends faqs_categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Faqs_categoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Faqs_categoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Faqs_categoryGroupByOutputType[P]>
            : GetScalarType<T[P], Faqs_categoryGroupByOutputType[P]>
        }
      >
    >


  export type faqs_categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    faq_cateforyId?: boolean
    faq_categoryName?: boolean
    faq?: boolean | faqs_category$faqArgs<ExtArgs>
    _count?: boolean | Faqs_categoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faqs_category"]>

  export type faqs_categorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    faq_cateforyId?: boolean
    faq_categoryName?: boolean
  }, ExtArgs["result"]["faqs_category"]>

  export type faqs_categorySelectScalar = {
    faq_cateforyId?: boolean
    faq_categoryName?: boolean
  }

  export type faqs_categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faq?: boolean | faqs_category$faqArgs<ExtArgs>
    _count?: boolean | Faqs_categoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type faqs_categoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $faqs_categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "faqs_category"
    objects: {
      faq: Prisma.$faqPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      faq_cateforyId: number
      faq_categoryName: string
    }, ExtArgs["result"]["faqs_category"]>
    composites: {}
  }

  type faqs_categoryGetPayload<S extends boolean | null | undefined | faqs_categoryDefaultArgs> = $Result.GetResult<Prisma.$faqs_categoryPayload, S>

  type faqs_categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<faqs_categoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Faqs_categoryCountAggregateInputType | true
    }

  export interface faqs_categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['faqs_category'], meta: { name: 'faqs_category' } }
    /**
     * Find zero or one Faqs_category that matches the filter.
     * @param {faqs_categoryFindUniqueArgs} args - Arguments to find a Faqs_category
     * @example
     * // Get one Faqs_category
     * const faqs_category = await prisma.faqs_category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends faqs_categoryFindUniqueArgs>(args: SelectSubset<T, faqs_categoryFindUniqueArgs<ExtArgs>>): Prisma__faqs_categoryClient<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Faqs_category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {faqs_categoryFindUniqueOrThrowArgs} args - Arguments to find a Faqs_category
     * @example
     * // Get one Faqs_category
     * const faqs_category = await prisma.faqs_category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends faqs_categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, faqs_categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__faqs_categoryClient<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Faqs_category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqs_categoryFindFirstArgs} args - Arguments to find a Faqs_category
     * @example
     * // Get one Faqs_category
     * const faqs_category = await prisma.faqs_category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends faqs_categoryFindFirstArgs>(args?: SelectSubset<T, faqs_categoryFindFirstArgs<ExtArgs>>): Prisma__faqs_categoryClient<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Faqs_category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqs_categoryFindFirstOrThrowArgs} args - Arguments to find a Faqs_category
     * @example
     * // Get one Faqs_category
     * const faqs_category = await prisma.faqs_category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends faqs_categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, faqs_categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__faqs_categoryClient<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Faqs_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqs_categoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faqs_categories
     * const faqs_categories = await prisma.faqs_category.findMany()
     * 
     * // Get first 10 Faqs_categories
     * const faqs_categories = await prisma.faqs_category.findMany({ take: 10 })
     * 
     * // Only select the `faq_cateforyId`
     * const faqs_categoryWithFaq_cateforyIdOnly = await prisma.faqs_category.findMany({ select: { faq_cateforyId: true } })
     * 
     */
    findMany<T extends faqs_categoryFindManyArgs>(args?: SelectSubset<T, faqs_categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Faqs_category.
     * @param {faqs_categoryCreateArgs} args - Arguments to create a Faqs_category.
     * @example
     * // Create one Faqs_category
     * const Faqs_category = await prisma.faqs_category.create({
     *   data: {
     *     // ... data to create a Faqs_category
     *   }
     * })
     * 
     */
    create<T extends faqs_categoryCreateArgs>(args: SelectSubset<T, faqs_categoryCreateArgs<ExtArgs>>): Prisma__faqs_categoryClient<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Faqs_categories.
     * @param {faqs_categoryCreateManyArgs} args - Arguments to create many Faqs_categories.
     * @example
     * // Create many Faqs_categories
     * const faqs_category = await prisma.faqs_category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends faqs_categoryCreateManyArgs>(args?: SelectSubset<T, faqs_categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Faqs_categories and returns the data saved in the database.
     * @param {faqs_categoryCreateManyAndReturnArgs} args - Arguments to create many Faqs_categories.
     * @example
     * // Create many Faqs_categories
     * const faqs_category = await prisma.faqs_category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Faqs_categories and only return the `faq_cateforyId`
     * const faqs_categoryWithFaq_cateforyIdOnly = await prisma.faqs_category.createManyAndReturn({ 
     *   select: { faq_cateforyId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends faqs_categoryCreateManyAndReturnArgs>(args?: SelectSubset<T, faqs_categoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Faqs_category.
     * @param {faqs_categoryDeleteArgs} args - Arguments to delete one Faqs_category.
     * @example
     * // Delete one Faqs_category
     * const Faqs_category = await prisma.faqs_category.delete({
     *   where: {
     *     // ... filter to delete one Faqs_category
     *   }
     * })
     * 
     */
    delete<T extends faqs_categoryDeleteArgs>(args: SelectSubset<T, faqs_categoryDeleteArgs<ExtArgs>>): Prisma__faqs_categoryClient<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Faqs_category.
     * @param {faqs_categoryUpdateArgs} args - Arguments to update one Faqs_category.
     * @example
     * // Update one Faqs_category
     * const faqs_category = await prisma.faqs_category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends faqs_categoryUpdateArgs>(args: SelectSubset<T, faqs_categoryUpdateArgs<ExtArgs>>): Prisma__faqs_categoryClient<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Faqs_categories.
     * @param {faqs_categoryDeleteManyArgs} args - Arguments to filter Faqs_categories to delete.
     * @example
     * // Delete a few Faqs_categories
     * const { count } = await prisma.faqs_category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends faqs_categoryDeleteManyArgs>(args?: SelectSubset<T, faqs_categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faqs_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqs_categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faqs_categories
     * const faqs_category = await prisma.faqs_category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends faqs_categoryUpdateManyArgs>(args: SelectSubset<T, faqs_categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Faqs_category.
     * @param {faqs_categoryUpsertArgs} args - Arguments to update or create a Faqs_category.
     * @example
     * // Update or create a Faqs_category
     * const faqs_category = await prisma.faqs_category.upsert({
     *   create: {
     *     // ... data to create a Faqs_category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Faqs_category we want to update
     *   }
     * })
     */
    upsert<T extends faqs_categoryUpsertArgs>(args: SelectSubset<T, faqs_categoryUpsertArgs<ExtArgs>>): Prisma__faqs_categoryClient<$Result.GetResult<Prisma.$faqs_categoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Faqs_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqs_categoryCountArgs} args - Arguments to filter Faqs_categories to count.
     * @example
     * // Count the number of Faqs_categories
     * const count = await prisma.faqs_category.count({
     *   where: {
     *     // ... the filter for the Faqs_categories we want to count
     *   }
     * })
    **/
    count<T extends faqs_categoryCountArgs>(
      args?: Subset<T, faqs_categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Faqs_categoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Faqs_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Faqs_categoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Faqs_categoryAggregateArgs>(args: Subset<T, Faqs_categoryAggregateArgs>): Prisma.PrismaPromise<GetFaqs_categoryAggregateType<T>>

    /**
     * Group by Faqs_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {faqs_categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends faqs_categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: faqs_categoryGroupByArgs['orderBy'] }
        : { orderBy?: faqs_categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, faqs_categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaqs_categoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the faqs_category model
   */
  readonly fields: faqs_categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for faqs_category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__faqs_categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    faq<T extends faqs_category$faqArgs<ExtArgs> = {}>(args?: Subset<T, faqs_category$faqArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$faqPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the faqs_category model
   */ 
  interface faqs_categoryFieldRefs {
    readonly faq_cateforyId: FieldRef<"faqs_category", 'Int'>
    readonly faq_categoryName: FieldRef<"faqs_category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * faqs_category findUnique
   */
  export type faqs_categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqs_categoryInclude<ExtArgs> | null
    /**
     * Filter, which faqs_category to fetch.
     */
    where: faqs_categoryWhereUniqueInput
  }

  /**
   * faqs_category findUniqueOrThrow
   */
  export type faqs_categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqs_categoryInclude<ExtArgs> | null
    /**
     * Filter, which faqs_category to fetch.
     */
    where: faqs_categoryWhereUniqueInput
  }

  /**
   * faqs_category findFirst
   */
  export type faqs_categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqs_categoryInclude<ExtArgs> | null
    /**
     * Filter, which faqs_category to fetch.
     */
    where?: faqs_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs_categories to fetch.
     */
    orderBy?: faqs_categoryOrderByWithRelationInput | faqs_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for faqs_categories.
     */
    cursor?: faqs_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of faqs_categories.
     */
    distinct?: Faqs_categoryScalarFieldEnum | Faqs_categoryScalarFieldEnum[]
  }

  /**
   * faqs_category findFirstOrThrow
   */
  export type faqs_categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqs_categoryInclude<ExtArgs> | null
    /**
     * Filter, which faqs_category to fetch.
     */
    where?: faqs_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs_categories to fetch.
     */
    orderBy?: faqs_categoryOrderByWithRelationInput | faqs_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for faqs_categories.
     */
    cursor?: faqs_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of faqs_categories.
     */
    distinct?: Faqs_categoryScalarFieldEnum | Faqs_categoryScalarFieldEnum[]
  }

  /**
   * faqs_category findMany
   */
  export type faqs_categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqs_categoryInclude<ExtArgs> | null
    /**
     * Filter, which faqs_categories to fetch.
     */
    where?: faqs_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of faqs_categories to fetch.
     */
    orderBy?: faqs_categoryOrderByWithRelationInput | faqs_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing faqs_categories.
     */
    cursor?: faqs_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` faqs_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` faqs_categories.
     */
    skip?: number
    distinct?: Faqs_categoryScalarFieldEnum | Faqs_categoryScalarFieldEnum[]
  }

  /**
   * faqs_category create
   */
  export type faqs_categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqs_categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a faqs_category.
     */
    data: XOR<faqs_categoryCreateInput, faqs_categoryUncheckedCreateInput>
  }

  /**
   * faqs_category createMany
   */
  export type faqs_categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many faqs_categories.
     */
    data: faqs_categoryCreateManyInput | faqs_categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * faqs_category createManyAndReturn
   */
  export type faqs_categoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many faqs_categories.
     */
    data: faqs_categoryCreateManyInput | faqs_categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * faqs_category update
   */
  export type faqs_categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqs_categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a faqs_category.
     */
    data: XOR<faqs_categoryUpdateInput, faqs_categoryUncheckedUpdateInput>
    /**
     * Choose, which faqs_category to update.
     */
    where: faqs_categoryWhereUniqueInput
  }

  /**
   * faqs_category updateMany
   */
  export type faqs_categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update faqs_categories.
     */
    data: XOR<faqs_categoryUpdateManyMutationInput, faqs_categoryUncheckedUpdateManyInput>
    /**
     * Filter which faqs_categories to update
     */
    where?: faqs_categoryWhereInput
  }

  /**
   * faqs_category upsert
   */
  export type faqs_categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqs_categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the faqs_category to update in case it exists.
     */
    where: faqs_categoryWhereUniqueInput
    /**
     * In case the faqs_category found by the `where` argument doesn't exist, create a new faqs_category with this data.
     */
    create: XOR<faqs_categoryCreateInput, faqs_categoryUncheckedCreateInput>
    /**
     * In case the faqs_category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<faqs_categoryUpdateInput, faqs_categoryUncheckedUpdateInput>
  }

  /**
   * faqs_category delete
   */
  export type faqs_categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqs_categoryInclude<ExtArgs> | null
    /**
     * Filter which faqs_category to delete.
     */
    where: faqs_categoryWhereUniqueInput
  }

  /**
   * faqs_category deleteMany
   */
  export type faqs_categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which faqs_categories to delete
     */
    where?: faqs_categoryWhereInput
  }

  /**
   * faqs_category.faq
   */
  export type faqs_category$faqArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faq
     */
    select?: faqSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqInclude<ExtArgs> | null
    where?: faqWhereInput
    orderBy?: faqOrderByWithRelationInput | faqOrderByWithRelationInput[]
    cursor?: faqWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * faqs_category without action
   */
  export type faqs_categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the faqs_category
     */
    select?: faqs_categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: faqs_categoryInclude<ExtArgs> | null
  }


  /**
   * Model user_security_questions
   */

  export type AggregateUser_security_questions = {
    _count: User_security_questionsCountAggregateOutputType | null
    _avg: User_security_questionsAvgAggregateOutputType | null
    _sum: User_security_questionsSumAggregateOutputType | null
    _min: User_security_questionsMinAggregateOutputType | null
    _max: User_security_questionsMaxAggregateOutputType | null
  }

  export type User_security_questionsAvgAggregateOutputType = {
    id: number | null
    UserID: number | null
  }

  export type User_security_questionsSumAggregateOutputType = {
    id: number | null
    UserID: number | null
  }

  export type User_security_questionsMinAggregateOutputType = {
    id: number | null
    question: string | null
    answer: string | null
    create_at: Date | null
    UserID: number | null
  }

  export type User_security_questionsMaxAggregateOutputType = {
    id: number | null
    question: string | null
    answer: string | null
    create_at: Date | null
    UserID: number | null
  }

  export type User_security_questionsCountAggregateOutputType = {
    id: number
    question: number
    answer: number
    create_at: number
    UserID: number
    _all: number
  }


  export type User_security_questionsAvgAggregateInputType = {
    id?: true
    UserID?: true
  }

  export type User_security_questionsSumAggregateInputType = {
    id?: true
    UserID?: true
  }

  export type User_security_questionsMinAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    create_at?: true
    UserID?: true
  }

  export type User_security_questionsMaxAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    create_at?: true
    UserID?: true
  }

  export type User_security_questionsCountAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    create_at?: true
    UserID?: true
    _all?: true
  }

  export type User_security_questionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_security_questions to aggregate.
     */
    where?: user_security_questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_security_questions to fetch.
     */
    orderBy?: user_security_questionsOrderByWithRelationInput | user_security_questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_security_questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_security_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_security_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_security_questions
    **/
    _count?: true | User_security_questionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_security_questionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_security_questionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_security_questionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_security_questionsMaxAggregateInputType
  }

  export type GetUser_security_questionsAggregateType<T extends User_security_questionsAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_security_questions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_security_questions[P]>
      : GetScalarType<T[P], AggregateUser_security_questions[P]>
  }




  export type user_security_questionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_security_questionsWhereInput
    orderBy?: user_security_questionsOrderByWithAggregationInput | user_security_questionsOrderByWithAggregationInput[]
    by: User_security_questionsScalarFieldEnum[] | User_security_questionsScalarFieldEnum
    having?: user_security_questionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_security_questionsCountAggregateInputType | true
    _avg?: User_security_questionsAvgAggregateInputType
    _sum?: User_security_questionsSumAggregateInputType
    _min?: User_security_questionsMinAggregateInputType
    _max?: User_security_questionsMaxAggregateInputType
  }

  export type User_security_questionsGroupByOutputType = {
    id: number
    question: string
    answer: string
    create_at: Date
    UserID: number
    _count: User_security_questionsCountAggregateOutputType | null
    _avg: User_security_questionsAvgAggregateOutputType | null
    _sum: User_security_questionsSumAggregateOutputType | null
    _min: User_security_questionsMinAggregateOutputType | null
    _max: User_security_questionsMaxAggregateOutputType | null
  }

  type GetUser_security_questionsGroupByPayload<T extends user_security_questionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_security_questionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_security_questionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_security_questionsGroupByOutputType[P]>
            : GetScalarType<T[P], User_security_questionsGroupByOutputType[P]>
        }
      >
    >


  export type user_security_questionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
    create_at?: boolean
    UserID?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_security_questions"]>

  export type user_security_questionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answer?: boolean
    create_at?: boolean
    UserID?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_security_questions"]>

  export type user_security_questionsSelectScalar = {
    id?: boolean
    question?: boolean
    answer?: boolean
    create_at?: boolean
    UserID?: boolean
  }

  export type user_security_questionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type user_security_questionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $user_security_questionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_security_questions"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
      answer: string
      create_at: Date
      UserID: number
    }, ExtArgs["result"]["user_security_questions"]>
    composites: {}
  }

  type user_security_questionsGetPayload<S extends boolean | null | undefined | user_security_questionsDefaultArgs> = $Result.GetResult<Prisma.$user_security_questionsPayload, S>

  type user_security_questionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_security_questionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_security_questionsCountAggregateInputType | true
    }

  export interface user_security_questionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_security_questions'], meta: { name: 'user_security_questions' } }
    /**
     * Find zero or one User_security_questions that matches the filter.
     * @param {user_security_questionsFindUniqueArgs} args - Arguments to find a User_security_questions
     * @example
     * // Get one User_security_questions
     * const user_security_questions = await prisma.user_security_questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_security_questionsFindUniqueArgs>(args: SelectSubset<T, user_security_questionsFindUniqueArgs<ExtArgs>>): Prisma__user_security_questionsClient<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User_security_questions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {user_security_questionsFindUniqueOrThrowArgs} args - Arguments to find a User_security_questions
     * @example
     * // Get one User_security_questions
     * const user_security_questions = await prisma.user_security_questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_security_questionsFindUniqueOrThrowArgs>(args: SelectSubset<T, user_security_questionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_security_questionsClient<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User_security_questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_security_questionsFindFirstArgs} args - Arguments to find a User_security_questions
     * @example
     * // Get one User_security_questions
     * const user_security_questions = await prisma.user_security_questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_security_questionsFindFirstArgs>(args?: SelectSubset<T, user_security_questionsFindFirstArgs<ExtArgs>>): Prisma__user_security_questionsClient<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User_security_questions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_security_questionsFindFirstOrThrowArgs} args - Arguments to find a User_security_questions
     * @example
     * // Get one User_security_questions
     * const user_security_questions = await prisma.user_security_questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_security_questionsFindFirstOrThrowArgs>(args?: SelectSubset<T, user_security_questionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_security_questionsClient<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more User_security_questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_security_questionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_security_questions
     * const user_security_questions = await prisma.user_security_questions.findMany()
     * 
     * // Get first 10 User_security_questions
     * const user_security_questions = await prisma.user_security_questions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_security_questionsWithIdOnly = await prisma.user_security_questions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_security_questionsFindManyArgs>(args?: SelectSubset<T, user_security_questionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User_security_questions.
     * @param {user_security_questionsCreateArgs} args - Arguments to create a User_security_questions.
     * @example
     * // Create one User_security_questions
     * const User_security_questions = await prisma.user_security_questions.create({
     *   data: {
     *     // ... data to create a User_security_questions
     *   }
     * })
     * 
     */
    create<T extends user_security_questionsCreateArgs>(args: SelectSubset<T, user_security_questionsCreateArgs<ExtArgs>>): Prisma__user_security_questionsClient<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many User_security_questions.
     * @param {user_security_questionsCreateManyArgs} args - Arguments to create many User_security_questions.
     * @example
     * // Create many User_security_questions
     * const user_security_questions = await prisma.user_security_questions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_security_questionsCreateManyArgs>(args?: SelectSubset<T, user_security_questionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_security_questions and returns the data saved in the database.
     * @param {user_security_questionsCreateManyAndReturnArgs} args - Arguments to create many User_security_questions.
     * @example
     * // Create many User_security_questions
     * const user_security_questions = await prisma.user_security_questions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_security_questions and only return the `id`
     * const user_security_questionsWithIdOnly = await prisma.user_security_questions.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_security_questionsCreateManyAndReturnArgs>(args?: SelectSubset<T, user_security_questionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User_security_questions.
     * @param {user_security_questionsDeleteArgs} args - Arguments to delete one User_security_questions.
     * @example
     * // Delete one User_security_questions
     * const User_security_questions = await prisma.user_security_questions.delete({
     *   where: {
     *     // ... filter to delete one User_security_questions
     *   }
     * })
     * 
     */
    delete<T extends user_security_questionsDeleteArgs>(args: SelectSubset<T, user_security_questionsDeleteArgs<ExtArgs>>): Prisma__user_security_questionsClient<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User_security_questions.
     * @param {user_security_questionsUpdateArgs} args - Arguments to update one User_security_questions.
     * @example
     * // Update one User_security_questions
     * const user_security_questions = await prisma.user_security_questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_security_questionsUpdateArgs>(args: SelectSubset<T, user_security_questionsUpdateArgs<ExtArgs>>): Prisma__user_security_questionsClient<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more User_security_questions.
     * @param {user_security_questionsDeleteManyArgs} args - Arguments to filter User_security_questions to delete.
     * @example
     * // Delete a few User_security_questions
     * const { count } = await prisma.user_security_questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_security_questionsDeleteManyArgs>(args?: SelectSubset<T, user_security_questionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_security_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_security_questionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_security_questions
     * const user_security_questions = await prisma.user_security_questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_security_questionsUpdateManyArgs>(args: SelectSubset<T, user_security_questionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_security_questions.
     * @param {user_security_questionsUpsertArgs} args - Arguments to update or create a User_security_questions.
     * @example
     * // Update or create a User_security_questions
     * const user_security_questions = await prisma.user_security_questions.upsert({
     *   create: {
     *     // ... data to create a User_security_questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_security_questions we want to update
     *   }
     * })
     */
    upsert<T extends user_security_questionsUpsertArgs>(args: SelectSubset<T, user_security_questionsUpsertArgs<ExtArgs>>): Prisma__user_security_questionsClient<$Result.GetResult<Prisma.$user_security_questionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of User_security_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_security_questionsCountArgs} args - Arguments to filter User_security_questions to count.
     * @example
     * // Count the number of User_security_questions
     * const count = await prisma.user_security_questions.count({
     *   where: {
     *     // ... the filter for the User_security_questions we want to count
     *   }
     * })
    **/
    count<T extends user_security_questionsCountArgs>(
      args?: Subset<T, user_security_questionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_security_questionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_security_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_security_questionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_security_questionsAggregateArgs>(args: Subset<T, User_security_questionsAggregateArgs>): Prisma.PrismaPromise<GetUser_security_questionsAggregateType<T>>

    /**
     * Group by User_security_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_security_questionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_security_questionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_security_questionsGroupByArgs['orderBy'] }
        : { orderBy?: user_security_questionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_security_questionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_security_questionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_security_questions model
   */
  readonly fields: user_security_questionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_security_questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_security_questionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_security_questions model
   */ 
  interface user_security_questionsFieldRefs {
    readonly id: FieldRef<"user_security_questions", 'Int'>
    readonly question: FieldRef<"user_security_questions", 'String'>
    readonly answer: FieldRef<"user_security_questions", 'String'>
    readonly create_at: FieldRef<"user_security_questions", 'DateTime'>
    readonly UserID: FieldRef<"user_security_questions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * user_security_questions findUnique
   */
  export type user_security_questionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
    /**
     * Filter, which user_security_questions to fetch.
     */
    where: user_security_questionsWhereUniqueInput
  }

  /**
   * user_security_questions findUniqueOrThrow
   */
  export type user_security_questionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
    /**
     * Filter, which user_security_questions to fetch.
     */
    where: user_security_questionsWhereUniqueInput
  }

  /**
   * user_security_questions findFirst
   */
  export type user_security_questionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
    /**
     * Filter, which user_security_questions to fetch.
     */
    where?: user_security_questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_security_questions to fetch.
     */
    orderBy?: user_security_questionsOrderByWithRelationInput | user_security_questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_security_questions.
     */
    cursor?: user_security_questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_security_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_security_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_security_questions.
     */
    distinct?: User_security_questionsScalarFieldEnum | User_security_questionsScalarFieldEnum[]
  }

  /**
   * user_security_questions findFirstOrThrow
   */
  export type user_security_questionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
    /**
     * Filter, which user_security_questions to fetch.
     */
    where?: user_security_questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_security_questions to fetch.
     */
    orderBy?: user_security_questionsOrderByWithRelationInput | user_security_questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_security_questions.
     */
    cursor?: user_security_questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_security_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_security_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_security_questions.
     */
    distinct?: User_security_questionsScalarFieldEnum | User_security_questionsScalarFieldEnum[]
  }

  /**
   * user_security_questions findMany
   */
  export type user_security_questionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
    /**
     * Filter, which user_security_questions to fetch.
     */
    where?: user_security_questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_security_questions to fetch.
     */
    orderBy?: user_security_questionsOrderByWithRelationInput | user_security_questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_security_questions.
     */
    cursor?: user_security_questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_security_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_security_questions.
     */
    skip?: number
    distinct?: User_security_questionsScalarFieldEnum | User_security_questionsScalarFieldEnum[]
  }

  /**
   * user_security_questions create
   */
  export type user_security_questionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
    /**
     * The data needed to create a user_security_questions.
     */
    data: XOR<user_security_questionsCreateInput, user_security_questionsUncheckedCreateInput>
  }

  /**
   * user_security_questions createMany
   */
  export type user_security_questionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_security_questions.
     */
    data: user_security_questionsCreateManyInput | user_security_questionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_security_questions createManyAndReturn
   */
  export type user_security_questionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many user_security_questions.
     */
    data: user_security_questionsCreateManyInput | user_security_questionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_security_questions update
   */
  export type user_security_questionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
    /**
     * The data needed to update a user_security_questions.
     */
    data: XOR<user_security_questionsUpdateInput, user_security_questionsUncheckedUpdateInput>
    /**
     * Choose, which user_security_questions to update.
     */
    where: user_security_questionsWhereUniqueInput
  }

  /**
   * user_security_questions updateMany
   */
  export type user_security_questionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_security_questions.
     */
    data: XOR<user_security_questionsUpdateManyMutationInput, user_security_questionsUncheckedUpdateManyInput>
    /**
     * Filter which user_security_questions to update
     */
    where?: user_security_questionsWhereInput
  }

  /**
   * user_security_questions upsert
   */
  export type user_security_questionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
    /**
     * The filter to search for the user_security_questions to update in case it exists.
     */
    where: user_security_questionsWhereUniqueInput
    /**
     * In case the user_security_questions found by the `where` argument doesn't exist, create a new user_security_questions with this data.
     */
    create: XOR<user_security_questionsCreateInput, user_security_questionsUncheckedCreateInput>
    /**
     * In case the user_security_questions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_security_questionsUpdateInput, user_security_questionsUncheckedUpdateInput>
  }

  /**
   * user_security_questions delete
   */
  export type user_security_questionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
    /**
     * Filter which user_security_questions to delete.
     */
    where: user_security_questionsWhereUniqueInput
  }

  /**
   * user_security_questions deleteMany
   */
  export type user_security_questionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_security_questions to delete
     */
    where?: user_security_questionsWhereInput
  }

  /**
   * user_security_questions without action
   */
  export type user_security_questionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_security_questions
     */
    select?: user_security_questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_security_questionsInclude<ExtArgs> | null
  }


  /**
   * Model security_question
   */

  export type AggregateSecurity_question = {
    _count: Security_questionCountAggregateOutputType | null
    _avg: Security_questionAvgAggregateOutputType | null
    _sum: Security_questionSumAggregateOutputType | null
    _min: Security_questionMinAggregateOutputType | null
    _max: Security_questionMaxAggregateOutputType | null
  }

  export type Security_questionAvgAggregateOutputType = {
    id: number | null
  }

  export type Security_questionSumAggregateOutputType = {
    id: number | null
  }

  export type Security_questionMinAggregateOutputType = {
    id: number | null
    question: string | null
  }

  export type Security_questionMaxAggregateOutputType = {
    id: number | null
    question: string | null
  }

  export type Security_questionCountAggregateOutputType = {
    id: number
    question: number
    _all: number
  }


  export type Security_questionAvgAggregateInputType = {
    id?: true
  }

  export type Security_questionSumAggregateInputType = {
    id?: true
  }

  export type Security_questionMinAggregateInputType = {
    id?: true
    question?: true
  }

  export type Security_questionMaxAggregateInputType = {
    id?: true
    question?: true
  }

  export type Security_questionCountAggregateInputType = {
    id?: true
    question?: true
    _all?: true
  }

  export type Security_questionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which security_question to aggregate.
     */
    where?: security_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of security_questions to fetch.
     */
    orderBy?: security_questionOrderByWithRelationInput | security_questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: security_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` security_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` security_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned security_questions
    **/
    _count?: true | Security_questionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Security_questionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Security_questionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Security_questionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Security_questionMaxAggregateInputType
  }

  export type GetSecurity_questionAggregateType<T extends Security_questionAggregateArgs> = {
        [P in keyof T & keyof AggregateSecurity_question]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSecurity_question[P]>
      : GetScalarType<T[P], AggregateSecurity_question[P]>
  }




  export type security_questionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: security_questionWhereInput
    orderBy?: security_questionOrderByWithAggregationInput | security_questionOrderByWithAggregationInput[]
    by: Security_questionScalarFieldEnum[] | Security_questionScalarFieldEnum
    having?: security_questionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Security_questionCountAggregateInputType | true
    _avg?: Security_questionAvgAggregateInputType
    _sum?: Security_questionSumAggregateInputType
    _min?: Security_questionMinAggregateInputType
    _max?: Security_questionMaxAggregateInputType
  }

  export type Security_questionGroupByOutputType = {
    id: number
    question: string
    _count: Security_questionCountAggregateOutputType | null
    _avg: Security_questionAvgAggregateOutputType | null
    _sum: Security_questionSumAggregateOutputType | null
    _min: Security_questionMinAggregateOutputType | null
    _max: Security_questionMaxAggregateOutputType | null
  }

  type GetSecurity_questionGroupByPayload<T extends security_questionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Security_questionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Security_questionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Security_questionGroupByOutputType[P]>
            : GetScalarType<T[P], Security_questionGroupByOutputType[P]>
        }
      >
    >


  export type security_questionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
  }, ExtArgs["result"]["security_question"]>

  export type security_questionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
  }, ExtArgs["result"]["security_question"]>

  export type security_questionSelectScalar = {
    id?: boolean
    question?: boolean
  }


  export type $security_questionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "security_question"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
    }, ExtArgs["result"]["security_question"]>
    composites: {}
  }

  type security_questionGetPayload<S extends boolean | null | undefined | security_questionDefaultArgs> = $Result.GetResult<Prisma.$security_questionPayload, S>

  type security_questionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<security_questionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Security_questionCountAggregateInputType | true
    }

  export interface security_questionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['security_question'], meta: { name: 'security_question' } }
    /**
     * Find zero or one Security_question that matches the filter.
     * @param {security_questionFindUniqueArgs} args - Arguments to find a Security_question
     * @example
     * // Get one Security_question
     * const security_question = await prisma.security_question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends security_questionFindUniqueArgs>(args: SelectSubset<T, security_questionFindUniqueArgs<ExtArgs>>): Prisma__security_questionClient<$Result.GetResult<Prisma.$security_questionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Security_question that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {security_questionFindUniqueOrThrowArgs} args - Arguments to find a Security_question
     * @example
     * // Get one Security_question
     * const security_question = await prisma.security_question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends security_questionFindUniqueOrThrowArgs>(args: SelectSubset<T, security_questionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__security_questionClient<$Result.GetResult<Prisma.$security_questionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Security_question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {security_questionFindFirstArgs} args - Arguments to find a Security_question
     * @example
     * // Get one Security_question
     * const security_question = await prisma.security_question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends security_questionFindFirstArgs>(args?: SelectSubset<T, security_questionFindFirstArgs<ExtArgs>>): Prisma__security_questionClient<$Result.GetResult<Prisma.$security_questionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Security_question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {security_questionFindFirstOrThrowArgs} args - Arguments to find a Security_question
     * @example
     * // Get one Security_question
     * const security_question = await prisma.security_question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends security_questionFindFirstOrThrowArgs>(args?: SelectSubset<T, security_questionFindFirstOrThrowArgs<ExtArgs>>): Prisma__security_questionClient<$Result.GetResult<Prisma.$security_questionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Security_questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {security_questionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Security_questions
     * const security_questions = await prisma.security_question.findMany()
     * 
     * // Get first 10 Security_questions
     * const security_questions = await prisma.security_question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const security_questionWithIdOnly = await prisma.security_question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends security_questionFindManyArgs>(args?: SelectSubset<T, security_questionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$security_questionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Security_question.
     * @param {security_questionCreateArgs} args - Arguments to create a Security_question.
     * @example
     * // Create one Security_question
     * const Security_question = await prisma.security_question.create({
     *   data: {
     *     // ... data to create a Security_question
     *   }
     * })
     * 
     */
    create<T extends security_questionCreateArgs>(args: SelectSubset<T, security_questionCreateArgs<ExtArgs>>): Prisma__security_questionClient<$Result.GetResult<Prisma.$security_questionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Security_questions.
     * @param {security_questionCreateManyArgs} args - Arguments to create many Security_questions.
     * @example
     * // Create many Security_questions
     * const security_question = await prisma.security_question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends security_questionCreateManyArgs>(args?: SelectSubset<T, security_questionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Security_questions and returns the data saved in the database.
     * @param {security_questionCreateManyAndReturnArgs} args - Arguments to create many Security_questions.
     * @example
     * // Create many Security_questions
     * const security_question = await prisma.security_question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Security_questions and only return the `id`
     * const security_questionWithIdOnly = await prisma.security_question.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends security_questionCreateManyAndReturnArgs>(args?: SelectSubset<T, security_questionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$security_questionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Security_question.
     * @param {security_questionDeleteArgs} args - Arguments to delete one Security_question.
     * @example
     * // Delete one Security_question
     * const Security_question = await prisma.security_question.delete({
     *   where: {
     *     // ... filter to delete one Security_question
     *   }
     * })
     * 
     */
    delete<T extends security_questionDeleteArgs>(args: SelectSubset<T, security_questionDeleteArgs<ExtArgs>>): Prisma__security_questionClient<$Result.GetResult<Prisma.$security_questionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Security_question.
     * @param {security_questionUpdateArgs} args - Arguments to update one Security_question.
     * @example
     * // Update one Security_question
     * const security_question = await prisma.security_question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends security_questionUpdateArgs>(args: SelectSubset<T, security_questionUpdateArgs<ExtArgs>>): Prisma__security_questionClient<$Result.GetResult<Prisma.$security_questionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Security_questions.
     * @param {security_questionDeleteManyArgs} args - Arguments to filter Security_questions to delete.
     * @example
     * // Delete a few Security_questions
     * const { count } = await prisma.security_question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends security_questionDeleteManyArgs>(args?: SelectSubset<T, security_questionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Security_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {security_questionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Security_questions
     * const security_question = await prisma.security_question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends security_questionUpdateManyArgs>(args: SelectSubset<T, security_questionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Security_question.
     * @param {security_questionUpsertArgs} args - Arguments to update or create a Security_question.
     * @example
     * // Update or create a Security_question
     * const security_question = await prisma.security_question.upsert({
     *   create: {
     *     // ... data to create a Security_question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Security_question we want to update
     *   }
     * })
     */
    upsert<T extends security_questionUpsertArgs>(args: SelectSubset<T, security_questionUpsertArgs<ExtArgs>>): Prisma__security_questionClient<$Result.GetResult<Prisma.$security_questionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Security_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {security_questionCountArgs} args - Arguments to filter Security_questions to count.
     * @example
     * // Count the number of Security_questions
     * const count = await prisma.security_question.count({
     *   where: {
     *     // ... the filter for the Security_questions we want to count
     *   }
     * })
    **/
    count<T extends security_questionCountArgs>(
      args?: Subset<T, security_questionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Security_questionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Security_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Security_questionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Security_questionAggregateArgs>(args: Subset<T, Security_questionAggregateArgs>): Prisma.PrismaPromise<GetSecurity_questionAggregateType<T>>

    /**
     * Group by Security_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {security_questionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends security_questionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: security_questionGroupByArgs['orderBy'] }
        : { orderBy?: security_questionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, security_questionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSecurity_questionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the security_question model
   */
  readonly fields: security_questionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for security_question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__security_questionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the security_question model
   */ 
  interface security_questionFieldRefs {
    readonly id: FieldRef<"security_question", 'Int'>
    readonly question: FieldRef<"security_question", 'String'>
  }
    

  // Custom InputTypes
  /**
   * security_question findUnique
   */
  export type security_questionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelect<ExtArgs> | null
    /**
     * Filter, which security_question to fetch.
     */
    where: security_questionWhereUniqueInput
  }

  /**
   * security_question findUniqueOrThrow
   */
  export type security_questionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelect<ExtArgs> | null
    /**
     * Filter, which security_question to fetch.
     */
    where: security_questionWhereUniqueInput
  }

  /**
   * security_question findFirst
   */
  export type security_questionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelect<ExtArgs> | null
    /**
     * Filter, which security_question to fetch.
     */
    where?: security_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of security_questions to fetch.
     */
    orderBy?: security_questionOrderByWithRelationInput | security_questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for security_questions.
     */
    cursor?: security_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` security_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` security_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of security_questions.
     */
    distinct?: Security_questionScalarFieldEnum | Security_questionScalarFieldEnum[]
  }

  /**
   * security_question findFirstOrThrow
   */
  export type security_questionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelect<ExtArgs> | null
    /**
     * Filter, which security_question to fetch.
     */
    where?: security_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of security_questions to fetch.
     */
    orderBy?: security_questionOrderByWithRelationInput | security_questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for security_questions.
     */
    cursor?: security_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` security_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` security_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of security_questions.
     */
    distinct?: Security_questionScalarFieldEnum | Security_questionScalarFieldEnum[]
  }

  /**
   * security_question findMany
   */
  export type security_questionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelect<ExtArgs> | null
    /**
     * Filter, which security_questions to fetch.
     */
    where?: security_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of security_questions to fetch.
     */
    orderBy?: security_questionOrderByWithRelationInput | security_questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing security_questions.
     */
    cursor?: security_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` security_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` security_questions.
     */
    skip?: number
    distinct?: Security_questionScalarFieldEnum | Security_questionScalarFieldEnum[]
  }

  /**
   * security_question create
   */
  export type security_questionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelect<ExtArgs> | null
    /**
     * The data needed to create a security_question.
     */
    data: XOR<security_questionCreateInput, security_questionUncheckedCreateInput>
  }

  /**
   * security_question createMany
   */
  export type security_questionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many security_questions.
     */
    data: security_questionCreateManyInput | security_questionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * security_question createManyAndReturn
   */
  export type security_questionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many security_questions.
     */
    data: security_questionCreateManyInput | security_questionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * security_question update
   */
  export type security_questionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelect<ExtArgs> | null
    /**
     * The data needed to update a security_question.
     */
    data: XOR<security_questionUpdateInput, security_questionUncheckedUpdateInput>
    /**
     * Choose, which security_question to update.
     */
    where: security_questionWhereUniqueInput
  }

  /**
   * security_question updateMany
   */
  export type security_questionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update security_questions.
     */
    data: XOR<security_questionUpdateManyMutationInput, security_questionUncheckedUpdateManyInput>
    /**
     * Filter which security_questions to update
     */
    where?: security_questionWhereInput
  }

  /**
   * security_question upsert
   */
  export type security_questionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelect<ExtArgs> | null
    /**
     * The filter to search for the security_question to update in case it exists.
     */
    where: security_questionWhereUniqueInput
    /**
     * In case the security_question found by the `where` argument doesn't exist, create a new security_question with this data.
     */
    create: XOR<security_questionCreateInput, security_questionUncheckedCreateInput>
    /**
     * In case the security_question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<security_questionUpdateInput, security_questionUncheckedUpdateInput>
  }

  /**
   * security_question delete
   */
  export type security_questionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelect<ExtArgs> | null
    /**
     * Filter which security_question to delete.
     */
    where: security_questionWhereUniqueInput
  }

  /**
   * security_question deleteMany
   */
  export type security_questionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which security_questions to delete
     */
    where?: security_questionWhereInput
  }

  /**
   * security_question without action
   */
  export type security_questionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the security_question
     */
    select?: security_questionSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    userID: 'userID',
    username: 'username',
    password: 'password',
    email: 'email',
    phone_number: 'phone_number',
    first_name: 'first_name',
    middle_name: 'middle_name',
    last_name: 'last_name',
    date_of_birth: 'date_of_birth',
    address: 'address',
    telephone_number: 'telephone_number',
    create_at: 'create_at',
    updated_at: 'updated_at',
    status: 'status',
    isVerified: 'isVerified',
    last_login: 'last_login',
    workStartDate: 'workStartDate',
    suffix: 'suffix',
    sex: 'sex',
    barangay: 'barangay',
    city_municipal: 'city_municipal',
    postal_code: 'postal_code',
    country: 'country',
    province: 'province',
    sss_id: 'sss_id',
    pagibig_id: 'pagibig_id',
    philhealth_id: 'philhealth_id',
    tin: 'tin',
    nationality: 'nationality',
    civil_status: 'civil_status',
    placeof_birth: 'placeof_birth',
    religion: 'religion',
    subdivision: 'subdivision',
    street: 'street',
    house: 'house',
    room: 'room',
    role_Id: 'role_Id'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const User_infoScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    middle_name: 'middle_name',
    last_name: 'last_name',
    suffix: 'suffix',
    DOB: 'DOB',
    relationship: 'relationship',
    contact_number: 'contact_number',
    user_sex: 'user_sex',
    education: 'education',
    users_id: 'users_id'
  };

  export type User_infoScalarFieldEnum = (typeof User_infoScalarFieldEnum)[keyof typeof User_infoScalarFieldEnum]


  export const User_rolesScalarFieldEnum: {
    id: 'id',
    role_name: 'role_name',
    description: 'description'
  };

  export type User_rolesScalarFieldEnum = (typeof User_rolesScalarFieldEnum)[keyof typeof User_rolesScalarFieldEnum]


  export const ContributionsScalarFieldEnum: {
    contribution_id: 'contribution_id',
    amount: 'amount',
    post_date: 'post_date',
    status: 'status',
    userID: 'userID',
    agency_id: 'agency_id'
  };

  export type ContributionsScalarFieldEnum = (typeof ContributionsScalarFieldEnum)[keyof typeof ContributionsScalarFieldEnum]


  export const Agency_informationScalarFieldEnum: {
    agency_id: 'agency_id',
    agency_name: 'agency_name',
    description: 'description',
    contact_info: 'contact_info'
  };

  export type Agency_informationScalarFieldEnum = (typeof Agency_informationScalarFieldEnum)[keyof typeof Agency_informationScalarFieldEnum]


  export const NotificationsScalarFieldEnum: {
    notification_id: 'notification_id',
    message: 'message',
    is_read: 'is_read',
    created_at: 'created_at',
    user_id: 'user_id',
    Contribution_id: 'Contribution_id',
    agency_id: 'agency_id'
  };

  export type NotificationsScalarFieldEnum = (typeof NotificationsScalarFieldEnum)[keyof typeof NotificationsScalarFieldEnum]


  export const Benefit_claimsScalarFieldEnum: {
    claim_id: 'claim_id',
    claim_amount: 'claim_amount',
    claim_status: 'claim_status',
    submitted_at: 'submitted_at',
    processed_at: 'processed_at',
    remarks: 'remarks',
    userID: 'userID',
    agency_id: 'agency_id',
    btype_id: 'btype_id'
  };

  export type Benefit_claimsScalarFieldEnum = (typeof Benefit_claimsScalarFieldEnum)[keyof typeof Benefit_claimsScalarFieldEnum]


  export const FaqScalarFieldEnum: {
    faq_id: 'faq_id',
    question: 'question',
    answer: 'answer',
    category_id: 'category_id'
  };

  export type FaqScalarFieldEnum = (typeof FaqScalarFieldEnum)[keyof typeof FaqScalarFieldEnum]


  export const Guides_tutorialsScalarFieldEnum: {
    guide_id: 'guide_id',
    title: 'title',
    content: 'content',
    category: 'category'
  };

  export type Guides_tutorialsScalarFieldEnum = (typeof Guides_tutorialsScalarFieldEnum)[keyof typeof Guides_tutorialsScalarFieldEnum]


  export const Benefits_typesScalarFieldEnum: {
    btypes_id: 'btypes_id',
    title: 'title',
    content: 'content',
    required_month: 'required_month',
    agency_id: 'agency_id'
  };

  export type Benefits_typesScalarFieldEnum = (typeof Benefits_typesScalarFieldEnum)[keyof typeof Benefits_typesScalarFieldEnum]


  export const Faqs_categoryScalarFieldEnum: {
    faq_cateforyId: 'faq_cateforyId',
    faq_categoryName: 'faq_categoryName'
  };

  export type Faqs_categoryScalarFieldEnum = (typeof Faqs_categoryScalarFieldEnum)[keyof typeof Faqs_categoryScalarFieldEnum]


  export const User_security_questionsScalarFieldEnum: {
    id: 'id',
    question: 'question',
    answer: 'answer',
    create_at: 'create_at',
    UserID: 'UserID'
  };

  export type User_security_questionsScalarFieldEnum = (typeof User_security_questionsScalarFieldEnum)[keyof typeof User_security_questionsScalarFieldEnum]


  export const Security_questionScalarFieldEnum: {
    id: 'id',
    question: 'question'
  };

  export type Security_questionScalarFieldEnum = (typeof Security_questionScalarFieldEnum)[keyof typeof Security_questionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    userID?: IntFilter<"Users"> | number
    username?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    phone_number?: StringFilter<"Users"> | string
    first_name?: StringFilter<"Users"> | string
    middle_name?: StringNullableFilter<"Users"> | string | null
    last_name?: StringFilter<"Users"> | string
    date_of_birth?: DateTimeFilter<"Users"> | Date | string
    address?: StringNullableFilter<"Users"> | string | null
    telephone_number?: StringNullableFilter<"Users"> | string | null
    create_at?: DateTimeFilter<"Users"> | Date | string
    updated_at?: DateTimeNullableFilter<"Users"> | Date | string | null
    status?: StringFilter<"Users"> | string
    isVerified?: IntFilter<"Users"> | number
    last_login?: DateTimeNullableFilter<"Users"> | Date | string | null
    workStartDate?: DateTimeNullableFilter<"Users"> | Date | string | null
    suffix?: StringNullableFilter<"Users"> | string | null
    sex?: StringNullableFilter<"Users"> | string | null
    barangay?: StringNullableFilter<"Users"> | string | null
    city_municipal?: StringNullableFilter<"Users"> | string | null
    postal_code?: IntNullableFilter<"Users"> | number | null
    country?: StringNullableFilter<"Users"> | string | null
    province?: StringNullableFilter<"Users"> | string | null
    sss_id?: StringNullableFilter<"Users"> | string | null
    pagibig_id?: StringNullableFilter<"Users"> | string | null
    philhealth_id?: StringNullableFilter<"Users"> | string | null
    tin?: StringNullableFilter<"Users"> | string | null
    nationality?: StringNullableFilter<"Users"> | string | null
    civil_status?: StringNullableFilter<"Users"> | string | null
    placeof_birth?: StringNullableFilter<"Users"> | string | null
    religion?: StringNullableFilter<"Users"> | string | null
    subdivision?: StringNullableFilter<"Users"> | string | null
    street?: StringNullableFilter<"Users"> | string | null
    house?: StringNullableFilter<"Users"> | string | null
    room?: StringNullableFilter<"Users"> | string | null
    role_Id?: IntNullableFilter<"Users"> | number | null
    contributions?: ContributionsListRelationFilter
    notifications?: NotificationsListRelationFilter
    benefit_claims?: Benefit_claimsListRelationFilter
    user_info?: User_infoListRelationFilter
    security_questions?: User_security_questionsListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrderInput | SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    address?: SortOrderInput | SortOrder
    telephone_number?: SortOrderInput | SortOrder
    create_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    status?: SortOrder
    isVerified?: SortOrder
    last_login?: SortOrderInput | SortOrder
    workStartDate?: SortOrderInput | SortOrder
    suffix?: SortOrderInput | SortOrder
    sex?: SortOrderInput | SortOrder
    barangay?: SortOrderInput | SortOrder
    city_municipal?: SortOrderInput | SortOrder
    postal_code?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    sss_id?: SortOrderInput | SortOrder
    pagibig_id?: SortOrderInput | SortOrder
    philhealth_id?: SortOrderInput | SortOrder
    tin?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    civil_status?: SortOrderInput | SortOrder
    placeof_birth?: SortOrderInput | SortOrder
    religion?: SortOrderInput | SortOrder
    subdivision?: SortOrderInput | SortOrder
    street?: SortOrderInput | SortOrder
    house?: SortOrderInput | SortOrder
    room?: SortOrderInput | SortOrder
    role_Id?: SortOrderInput | SortOrder
    contributions?: contributionsOrderByRelationAggregateInput
    notifications?: notificationsOrderByRelationAggregateInput
    benefit_claims?: benefit_claimsOrderByRelationAggregateInput
    user_info?: user_infoOrderByRelationAggregateInput
    security_questions?: user_security_questionsOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    userID?: number
    username?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    password?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    phone_number?: StringFilter<"Users"> | string
    first_name?: StringFilter<"Users"> | string
    middle_name?: StringNullableFilter<"Users"> | string | null
    last_name?: StringFilter<"Users"> | string
    date_of_birth?: DateTimeFilter<"Users"> | Date | string
    address?: StringNullableFilter<"Users"> | string | null
    telephone_number?: StringNullableFilter<"Users"> | string | null
    create_at?: DateTimeFilter<"Users"> | Date | string
    updated_at?: DateTimeNullableFilter<"Users"> | Date | string | null
    status?: StringFilter<"Users"> | string
    isVerified?: IntFilter<"Users"> | number
    last_login?: DateTimeNullableFilter<"Users"> | Date | string | null
    workStartDate?: DateTimeNullableFilter<"Users"> | Date | string | null
    suffix?: StringNullableFilter<"Users"> | string | null
    sex?: StringNullableFilter<"Users"> | string | null
    barangay?: StringNullableFilter<"Users"> | string | null
    city_municipal?: StringNullableFilter<"Users"> | string | null
    postal_code?: IntNullableFilter<"Users"> | number | null
    country?: StringNullableFilter<"Users"> | string | null
    province?: StringNullableFilter<"Users"> | string | null
    sss_id?: StringNullableFilter<"Users"> | string | null
    pagibig_id?: StringNullableFilter<"Users"> | string | null
    philhealth_id?: StringNullableFilter<"Users"> | string | null
    tin?: StringNullableFilter<"Users"> | string | null
    nationality?: StringNullableFilter<"Users"> | string | null
    civil_status?: StringNullableFilter<"Users"> | string | null
    placeof_birth?: StringNullableFilter<"Users"> | string | null
    religion?: StringNullableFilter<"Users"> | string | null
    subdivision?: StringNullableFilter<"Users"> | string | null
    street?: StringNullableFilter<"Users"> | string | null
    house?: StringNullableFilter<"Users"> | string | null
    room?: StringNullableFilter<"Users"> | string | null
    role_Id?: IntNullableFilter<"Users"> | number | null
    contributions?: ContributionsListRelationFilter
    notifications?: NotificationsListRelationFilter
    benefit_claims?: Benefit_claimsListRelationFilter
    user_info?: User_infoListRelationFilter
    security_questions?: User_security_questionsListRelationFilter
  }, "userID" | "username">

  export type UsersOrderByWithAggregationInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrderInput | SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    address?: SortOrderInput | SortOrder
    telephone_number?: SortOrderInput | SortOrder
    create_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    status?: SortOrder
    isVerified?: SortOrder
    last_login?: SortOrderInput | SortOrder
    workStartDate?: SortOrderInput | SortOrder
    suffix?: SortOrderInput | SortOrder
    sex?: SortOrderInput | SortOrder
    barangay?: SortOrderInput | SortOrder
    city_municipal?: SortOrderInput | SortOrder
    postal_code?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    province?: SortOrderInput | SortOrder
    sss_id?: SortOrderInput | SortOrder
    pagibig_id?: SortOrderInput | SortOrder
    philhealth_id?: SortOrderInput | SortOrder
    tin?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    civil_status?: SortOrderInput | SortOrder
    placeof_birth?: SortOrderInput | SortOrder
    religion?: SortOrderInput | SortOrder
    subdivision?: SortOrderInput | SortOrder
    street?: SortOrderInput | SortOrder
    house?: SortOrderInput | SortOrder
    room?: SortOrderInput | SortOrder
    role_Id?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    userID?: IntWithAggregatesFilter<"Users"> | number
    username?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    phone_number?: StringWithAggregatesFilter<"Users"> | string
    first_name?: StringWithAggregatesFilter<"Users"> | string
    middle_name?: StringNullableWithAggregatesFilter<"Users"> | string | null
    last_name?: StringWithAggregatesFilter<"Users"> | string
    date_of_birth?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    address?: StringNullableWithAggregatesFilter<"Users"> | string | null
    telephone_number?: StringNullableWithAggregatesFilter<"Users"> | string | null
    create_at?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
    status?: StringWithAggregatesFilter<"Users"> | string
    isVerified?: IntWithAggregatesFilter<"Users"> | number
    last_login?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
    workStartDate?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
    suffix?: StringNullableWithAggregatesFilter<"Users"> | string | null
    sex?: StringNullableWithAggregatesFilter<"Users"> | string | null
    barangay?: StringNullableWithAggregatesFilter<"Users"> | string | null
    city_municipal?: StringNullableWithAggregatesFilter<"Users"> | string | null
    postal_code?: IntNullableWithAggregatesFilter<"Users"> | number | null
    country?: StringNullableWithAggregatesFilter<"Users"> | string | null
    province?: StringNullableWithAggregatesFilter<"Users"> | string | null
    sss_id?: StringNullableWithAggregatesFilter<"Users"> | string | null
    pagibig_id?: StringNullableWithAggregatesFilter<"Users"> | string | null
    philhealth_id?: StringNullableWithAggregatesFilter<"Users"> | string | null
    tin?: StringNullableWithAggregatesFilter<"Users"> | string | null
    nationality?: StringNullableWithAggregatesFilter<"Users"> | string | null
    civil_status?: StringNullableWithAggregatesFilter<"Users"> | string | null
    placeof_birth?: StringNullableWithAggregatesFilter<"Users"> | string | null
    religion?: StringNullableWithAggregatesFilter<"Users"> | string | null
    subdivision?: StringNullableWithAggregatesFilter<"Users"> | string | null
    street?: StringNullableWithAggregatesFilter<"Users"> | string | null
    house?: StringNullableWithAggregatesFilter<"Users"> | string | null
    room?: StringNullableWithAggregatesFilter<"Users"> | string | null
    role_Id?: IntNullableWithAggregatesFilter<"Users"> | number | null
  }

  export type user_infoWhereInput = {
    AND?: user_infoWhereInput | user_infoWhereInput[]
    OR?: user_infoWhereInput[]
    NOT?: user_infoWhereInput | user_infoWhereInput[]
    id?: IntFilter<"user_info"> | number
    first_name?: StringFilter<"user_info"> | string
    middle_name?: StringFilter<"user_info"> | string
    last_name?: StringFilter<"user_info"> | string
    suffix?: StringNullableFilter<"user_info"> | string | null
    DOB?: DateTimeFilter<"user_info"> | Date | string
    relationship?: StringFilter<"user_info"> | string
    contact_number?: StringNullableFilter<"user_info"> | string | null
    user_sex?: StringNullableFilter<"user_info"> | string | null
    education?: StringNullableFilter<"user_info"> | string | null
    users_id?: IntFilter<"user_info"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type user_infoOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    suffix?: SortOrderInput | SortOrder
    DOB?: SortOrder
    relationship?: SortOrder
    contact_number?: SortOrderInput | SortOrder
    user_sex?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    users_id?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type user_infoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: user_infoWhereInput | user_infoWhereInput[]
    OR?: user_infoWhereInput[]
    NOT?: user_infoWhereInput | user_infoWhereInput[]
    first_name?: StringFilter<"user_info"> | string
    middle_name?: StringFilter<"user_info"> | string
    last_name?: StringFilter<"user_info"> | string
    suffix?: StringNullableFilter<"user_info"> | string | null
    DOB?: DateTimeFilter<"user_info"> | Date | string
    relationship?: StringFilter<"user_info"> | string
    contact_number?: StringNullableFilter<"user_info"> | string | null
    user_sex?: StringNullableFilter<"user_info"> | string | null
    education?: StringNullableFilter<"user_info"> | string | null
    users_id?: IntFilter<"user_info"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type user_infoOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    suffix?: SortOrderInput | SortOrder
    DOB?: SortOrder
    relationship?: SortOrder
    contact_number?: SortOrderInput | SortOrder
    user_sex?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    users_id?: SortOrder
    _count?: user_infoCountOrderByAggregateInput
    _avg?: user_infoAvgOrderByAggregateInput
    _max?: user_infoMaxOrderByAggregateInput
    _min?: user_infoMinOrderByAggregateInput
    _sum?: user_infoSumOrderByAggregateInput
  }

  export type user_infoScalarWhereWithAggregatesInput = {
    AND?: user_infoScalarWhereWithAggregatesInput | user_infoScalarWhereWithAggregatesInput[]
    OR?: user_infoScalarWhereWithAggregatesInput[]
    NOT?: user_infoScalarWhereWithAggregatesInput | user_infoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_info"> | number
    first_name?: StringWithAggregatesFilter<"user_info"> | string
    middle_name?: StringWithAggregatesFilter<"user_info"> | string
    last_name?: StringWithAggregatesFilter<"user_info"> | string
    suffix?: StringNullableWithAggregatesFilter<"user_info"> | string | null
    DOB?: DateTimeWithAggregatesFilter<"user_info"> | Date | string
    relationship?: StringWithAggregatesFilter<"user_info"> | string
    contact_number?: StringNullableWithAggregatesFilter<"user_info"> | string | null
    user_sex?: StringNullableWithAggregatesFilter<"user_info"> | string | null
    education?: StringNullableWithAggregatesFilter<"user_info"> | string | null
    users_id?: IntWithAggregatesFilter<"user_info"> | number
  }

  export type user_rolesWhereInput = {
    AND?: user_rolesWhereInput | user_rolesWhereInput[]
    OR?: user_rolesWhereInput[]
    NOT?: user_rolesWhereInput | user_rolesWhereInput[]
    id?: IntFilter<"user_roles"> | number
    role_name?: StringFilter<"user_roles"> | string
    description?: StringFilter<"user_roles"> | string
  }

  export type user_rolesOrderByWithRelationInput = {
    id?: SortOrder
    role_name?: SortOrder
    description?: SortOrder
  }

  export type user_rolesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: user_rolesWhereInput | user_rolesWhereInput[]
    OR?: user_rolesWhereInput[]
    NOT?: user_rolesWhereInput | user_rolesWhereInput[]
    role_name?: StringFilter<"user_roles"> | string
    description?: StringFilter<"user_roles"> | string
  }, "id">

  export type user_rolesOrderByWithAggregationInput = {
    id?: SortOrder
    role_name?: SortOrder
    description?: SortOrder
    _count?: user_rolesCountOrderByAggregateInput
    _avg?: user_rolesAvgOrderByAggregateInput
    _max?: user_rolesMaxOrderByAggregateInput
    _min?: user_rolesMinOrderByAggregateInput
    _sum?: user_rolesSumOrderByAggregateInput
  }

  export type user_rolesScalarWhereWithAggregatesInput = {
    AND?: user_rolesScalarWhereWithAggregatesInput | user_rolesScalarWhereWithAggregatesInput[]
    OR?: user_rolesScalarWhereWithAggregatesInput[]
    NOT?: user_rolesScalarWhereWithAggregatesInput | user_rolesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_roles"> | number
    role_name?: StringWithAggregatesFilter<"user_roles"> | string
    description?: StringWithAggregatesFilter<"user_roles"> | string
  }

  export type contributionsWhereInput = {
    AND?: contributionsWhereInput | contributionsWhereInput[]
    OR?: contributionsWhereInput[]
    NOT?: contributionsWhereInput | contributionsWhereInput[]
    contribution_id?: IntFilter<"contributions"> | number
    amount?: DecimalFilter<"contributions"> | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFilter<"contributions"> | Date | string
    status?: StringFilter<"contributions"> | string
    userID?: IntFilter<"contributions"> | number
    agency_id?: IntFilter<"contributions"> | number
    source?: XOR<Agency_informationRelationFilter, agency_informationWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    notifications?: NotificationsListRelationFilter
  }

  export type contributionsOrderByWithRelationInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    post_date?: SortOrder
    status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    source?: agency_informationOrderByWithRelationInput
    user?: UsersOrderByWithRelationInput
    notifications?: notificationsOrderByRelationAggregateInput
  }

  export type contributionsWhereUniqueInput = Prisma.AtLeast<{
    contribution_id?: number
    AND?: contributionsWhereInput | contributionsWhereInput[]
    OR?: contributionsWhereInput[]
    NOT?: contributionsWhereInput | contributionsWhereInput[]
    amount?: DecimalFilter<"contributions"> | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFilter<"contributions"> | Date | string
    status?: StringFilter<"contributions"> | string
    userID?: IntFilter<"contributions"> | number
    agency_id?: IntFilter<"contributions"> | number
    source?: XOR<Agency_informationRelationFilter, agency_informationWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    notifications?: NotificationsListRelationFilter
  }, "contribution_id">

  export type contributionsOrderByWithAggregationInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    post_date?: SortOrder
    status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    _count?: contributionsCountOrderByAggregateInput
    _avg?: contributionsAvgOrderByAggregateInput
    _max?: contributionsMaxOrderByAggregateInput
    _min?: contributionsMinOrderByAggregateInput
    _sum?: contributionsSumOrderByAggregateInput
  }

  export type contributionsScalarWhereWithAggregatesInput = {
    AND?: contributionsScalarWhereWithAggregatesInput | contributionsScalarWhereWithAggregatesInput[]
    OR?: contributionsScalarWhereWithAggregatesInput[]
    NOT?: contributionsScalarWhereWithAggregatesInput | contributionsScalarWhereWithAggregatesInput[]
    contribution_id?: IntWithAggregatesFilter<"contributions"> | number
    amount?: DecimalWithAggregatesFilter<"contributions"> | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeWithAggregatesFilter<"contributions"> | Date | string
    status?: StringWithAggregatesFilter<"contributions"> | string
    userID?: IntWithAggregatesFilter<"contributions"> | number
    agency_id?: IntWithAggregatesFilter<"contributions"> | number
  }

  export type agency_informationWhereInput = {
    AND?: agency_informationWhereInput | agency_informationWhereInput[]
    OR?: agency_informationWhereInput[]
    NOT?: agency_informationWhereInput | agency_informationWhereInput[]
    agency_id?: IntFilter<"agency_information"> | number
    agency_name?: StringFilter<"agency_information"> | string
    description?: StringFilter<"agency_information"> | string
    contact_info?: StringFilter<"agency_information"> | string
    contributions?: ContributionsListRelationFilter
    benefit_claims?: Benefit_claimsListRelationFilter
    benefits_types?: Benefits_typesListRelationFilter
    notifications?: NotificationsListRelationFilter
  }

  export type agency_informationOrderByWithRelationInput = {
    agency_id?: SortOrder
    agency_name?: SortOrder
    description?: SortOrder
    contact_info?: SortOrder
    contributions?: contributionsOrderByRelationAggregateInput
    benefit_claims?: benefit_claimsOrderByRelationAggregateInput
    benefits_types?: benefits_typesOrderByRelationAggregateInput
    notifications?: notificationsOrderByRelationAggregateInput
  }

  export type agency_informationWhereUniqueInput = Prisma.AtLeast<{
    agency_id?: number
    AND?: agency_informationWhereInput | agency_informationWhereInput[]
    OR?: agency_informationWhereInput[]
    NOT?: agency_informationWhereInput | agency_informationWhereInput[]
    agency_name?: StringFilter<"agency_information"> | string
    description?: StringFilter<"agency_information"> | string
    contact_info?: StringFilter<"agency_information"> | string
    contributions?: ContributionsListRelationFilter
    benefit_claims?: Benefit_claimsListRelationFilter
    benefits_types?: Benefits_typesListRelationFilter
    notifications?: NotificationsListRelationFilter
  }, "agency_id">

  export type agency_informationOrderByWithAggregationInput = {
    agency_id?: SortOrder
    agency_name?: SortOrder
    description?: SortOrder
    contact_info?: SortOrder
    _count?: agency_informationCountOrderByAggregateInput
    _avg?: agency_informationAvgOrderByAggregateInput
    _max?: agency_informationMaxOrderByAggregateInput
    _min?: agency_informationMinOrderByAggregateInput
    _sum?: agency_informationSumOrderByAggregateInput
  }

  export type agency_informationScalarWhereWithAggregatesInput = {
    AND?: agency_informationScalarWhereWithAggregatesInput | agency_informationScalarWhereWithAggregatesInput[]
    OR?: agency_informationScalarWhereWithAggregatesInput[]
    NOT?: agency_informationScalarWhereWithAggregatesInput | agency_informationScalarWhereWithAggregatesInput[]
    agency_id?: IntWithAggregatesFilter<"agency_information"> | number
    agency_name?: StringWithAggregatesFilter<"agency_information"> | string
    description?: StringWithAggregatesFilter<"agency_information"> | string
    contact_info?: StringWithAggregatesFilter<"agency_information"> | string
  }

  export type notificationsWhereInput = {
    AND?: notificationsWhereInput | notificationsWhereInput[]
    OR?: notificationsWhereInput[]
    NOT?: notificationsWhereInput | notificationsWhereInput[]
    notification_id?: IntFilter<"notifications"> | number
    message?: StringFilter<"notifications"> | string
    is_read?: IntFilter<"notifications"> | number
    created_at?: DateTimeFilter<"notifications"> | Date | string
    user_id?: IntFilter<"notifications"> | number
    Contribution_id?: IntFilter<"notifications"> | number
    agency_id?: IntFilter<"notifications"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    contributions?: XOR<ContributionsRelationFilter, contributionsWhereInput>
    agency?: XOR<Agency_informationRelationFilter, agency_informationWhereInput>
  }

  export type notificationsOrderByWithRelationInput = {
    notification_id?: SortOrder
    message?: SortOrder
    is_read?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    Contribution_id?: SortOrder
    agency_id?: SortOrder
    user?: UsersOrderByWithRelationInput
    contributions?: contributionsOrderByWithRelationInput
    agency?: agency_informationOrderByWithRelationInput
  }

  export type notificationsWhereUniqueInput = Prisma.AtLeast<{
    notification_id?: number
    AND?: notificationsWhereInput | notificationsWhereInput[]
    OR?: notificationsWhereInput[]
    NOT?: notificationsWhereInput | notificationsWhereInput[]
    message?: StringFilter<"notifications"> | string
    is_read?: IntFilter<"notifications"> | number
    created_at?: DateTimeFilter<"notifications"> | Date | string
    user_id?: IntFilter<"notifications"> | number
    Contribution_id?: IntFilter<"notifications"> | number
    agency_id?: IntFilter<"notifications"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    contributions?: XOR<ContributionsRelationFilter, contributionsWhereInput>
    agency?: XOR<Agency_informationRelationFilter, agency_informationWhereInput>
  }, "notification_id">

  export type notificationsOrderByWithAggregationInput = {
    notification_id?: SortOrder
    message?: SortOrder
    is_read?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    Contribution_id?: SortOrder
    agency_id?: SortOrder
    _count?: notificationsCountOrderByAggregateInput
    _avg?: notificationsAvgOrderByAggregateInput
    _max?: notificationsMaxOrderByAggregateInput
    _min?: notificationsMinOrderByAggregateInput
    _sum?: notificationsSumOrderByAggregateInput
  }

  export type notificationsScalarWhereWithAggregatesInput = {
    AND?: notificationsScalarWhereWithAggregatesInput | notificationsScalarWhereWithAggregatesInput[]
    OR?: notificationsScalarWhereWithAggregatesInput[]
    NOT?: notificationsScalarWhereWithAggregatesInput | notificationsScalarWhereWithAggregatesInput[]
    notification_id?: IntWithAggregatesFilter<"notifications"> | number
    message?: StringWithAggregatesFilter<"notifications"> | string
    is_read?: IntWithAggregatesFilter<"notifications"> | number
    created_at?: DateTimeWithAggregatesFilter<"notifications"> | Date | string
    user_id?: IntWithAggregatesFilter<"notifications"> | number
    Contribution_id?: IntWithAggregatesFilter<"notifications"> | number
    agency_id?: IntWithAggregatesFilter<"notifications"> | number
  }

  export type benefit_claimsWhereInput = {
    AND?: benefit_claimsWhereInput | benefit_claimsWhereInput[]
    OR?: benefit_claimsWhereInput[]
    NOT?: benefit_claimsWhereInput | benefit_claimsWhereInput[]
    claim_id?: IntFilter<"benefit_claims"> | number
    claim_amount?: DecimalFilter<"benefit_claims"> | Decimal | DecimalJsLike | number | string
    claim_status?: IntFilter<"benefit_claims"> | number
    submitted_at?: DateTimeFilter<"benefit_claims"> | Date | string
    processed_at?: DateTimeNullableFilter<"benefit_claims"> | Date | string | null
    remarks?: StringFilter<"benefit_claims"> | string
    userID?: IntFilter<"benefit_claims"> | number
    agency_id?: IntFilter<"benefit_claims"> | number
    btype_id?: IntFilter<"benefit_claims"> | number
    users?: XOR<UsersRelationFilter, UsersWhereInput>
    agency?: XOR<Agency_informationRelationFilter, agency_informationWhereInput>
    benefits_type?: XOR<Benefits_typesRelationFilter, benefits_typesWhereInput>
  }

  export type benefit_claimsOrderByWithRelationInput = {
    claim_id?: SortOrder
    claim_amount?: SortOrder
    claim_status?: SortOrder
    submitted_at?: SortOrder
    processed_at?: SortOrderInput | SortOrder
    remarks?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    btype_id?: SortOrder
    users?: UsersOrderByWithRelationInput
    agency?: agency_informationOrderByWithRelationInput
    benefits_type?: benefits_typesOrderByWithRelationInput
  }

  export type benefit_claimsWhereUniqueInput = Prisma.AtLeast<{
    claim_id?: number
    AND?: benefit_claimsWhereInput | benefit_claimsWhereInput[]
    OR?: benefit_claimsWhereInput[]
    NOT?: benefit_claimsWhereInput | benefit_claimsWhereInput[]
    claim_amount?: DecimalFilter<"benefit_claims"> | Decimal | DecimalJsLike | number | string
    claim_status?: IntFilter<"benefit_claims"> | number
    submitted_at?: DateTimeFilter<"benefit_claims"> | Date | string
    processed_at?: DateTimeNullableFilter<"benefit_claims"> | Date | string | null
    remarks?: StringFilter<"benefit_claims"> | string
    userID?: IntFilter<"benefit_claims"> | number
    agency_id?: IntFilter<"benefit_claims"> | number
    btype_id?: IntFilter<"benefit_claims"> | number
    users?: XOR<UsersRelationFilter, UsersWhereInput>
    agency?: XOR<Agency_informationRelationFilter, agency_informationWhereInput>
    benefits_type?: XOR<Benefits_typesRelationFilter, benefits_typesWhereInput>
  }, "claim_id">

  export type benefit_claimsOrderByWithAggregationInput = {
    claim_id?: SortOrder
    claim_amount?: SortOrder
    claim_status?: SortOrder
    submitted_at?: SortOrder
    processed_at?: SortOrderInput | SortOrder
    remarks?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    btype_id?: SortOrder
    _count?: benefit_claimsCountOrderByAggregateInput
    _avg?: benefit_claimsAvgOrderByAggregateInput
    _max?: benefit_claimsMaxOrderByAggregateInput
    _min?: benefit_claimsMinOrderByAggregateInput
    _sum?: benefit_claimsSumOrderByAggregateInput
  }

  export type benefit_claimsScalarWhereWithAggregatesInput = {
    AND?: benefit_claimsScalarWhereWithAggregatesInput | benefit_claimsScalarWhereWithAggregatesInput[]
    OR?: benefit_claimsScalarWhereWithAggregatesInput[]
    NOT?: benefit_claimsScalarWhereWithAggregatesInput | benefit_claimsScalarWhereWithAggregatesInput[]
    claim_id?: IntWithAggregatesFilter<"benefit_claims"> | number
    claim_amount?: DecimalWithAggregatesFilter<"benefit_claims"> | Decimal | DecimalJsLike | number | string
    claim_status?: IntWithAggregatesFilter<"benefit_claims"> | number
    submitted_at?: DateTimeWithAggregatesFilter<"benefit_claims"> | Date | string
    processed_at?: DateTimeNullableWithAggregatesFilter<"benefit_claims"> | Date | string | null
    remarks?: StringWithAggregatesFilter<"benefit_claims"> | string
    userID?: IntWithAggregatesFilter<"benefit_claims"> | number
    agency_id?: IntWithAggregatesFilter<"benefit_claims"> | number
    btype_id?: IntWithAggregatesFilter<"benefit_claims"> | number
  }

  export type faqWhereInput = {
    AND?: faqWhereInput | faqWhereInput[]
    OR?: faqWhereInput[]
    NOT?: faqWhereInput | faqWhereInput[]
    faq_id?: IntFilter<"faq"> | number
    question?: StringFilter<"faq"> | string
    answer?: StringFilter<"faq"> | string
    category_id?: IntFilter<"faq"> | number
    category?: XOR<Faqs_categoryRelationFilter, faqs_categoryWhereInput>
  }

  export type faqOrderByWithRelationInput = {
    faq_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category_id?: SortOrder
    category?: faqs_categoryOrderByWithRelationInput
  }

  export type faqWhereUniqueInput = Prisma.AtLeast<{
    faq_id?: number
    AND?: faqWhereInput | faqWhereInput[]
    OR?: faqWhereInput[]
    NOT?: faqWhereInput | faqWhereInput[]
    question?: StringFilter<"faq"> | string
    answer?: StringFilter<"faq"> | string
    category_id?: IntFilter<"faq"> | number
    category?: XOR<Faqs_categoryRelationFilter, faqs_categoryWhereInput>
  }, "faq_id">

  export type faqOrderByWithAggregationInput = {
    faq_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category_id?: SortOrder
    _count?: faqCountOrderByAggregateInput
    _avg?: faqAvgOrderByAggregateInput
    _max?: faqMaxOrderByAggregateInput
    _min?: faqMinOrderByAggregateInput
    _sum?: faqSumOrderByAggregateInput
  }

  export type faqScalarWhereWithAggregatesInput = {
    AND?: faqScalarWhereWithAggregatesInput | faqScalarWhereWithAggregatesInput[]
    OR?: faqScalarWhereWithAggregatesInput[]
    NOT?: faqScalarWhereWithAggregatesInput | faqScalarWhereWithAggregatesInput[]
    faq_id?: IntWithAggregatesFilter<"faq"> | number
    question?: StringWithAggregatesFilter<"faq"> | string
    answer?: StringWithAggregatesFilter<"faq"> | string
    category_id?: IntWithAggregatesFilter<"faq"> | number
  }

  export type guides_tutorialsWhereInput = {
    AND?: guides_tutorialsWhereInput | guides_tutorialsWhereInput[]
    OR?: guides_tutorialsWhereInput[]
    NOT?: guides_tutorialsWhereInput | guides_tutorialsWhereInput[]
    guide_id?: IntFilter<"guides_tutorials"> | number
    title?: StringFilter<"guides_tutorials"> | string
    content?: StringFilter<"guides_tutorials"> | string
    category?: StringFilter<"guides_tutorials"> | string
  }

  export type guides_tutorialsOrderByWithRelationInput = {
    guide_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
  }

  export type guides_tutorialsWhereUniqueInput = Prisma.AtLeast<{
    guide_id?: number
    AND?: guides_tutorialsWhereInput | guides_tutorialsWhereInput[]
    OR?: guides_tutorialsWhereInput[]
    NOT?: guides_tutorialsWhereInput | guides_tutorialsWhereInput[]
    title?: StringFilter<"guides_tutorials"> | string
    content?: StringFilter<"guides_tutorials"> | string
    category?: StringFilter<"guides_tutorials"> | string
  }, "guide_id">

  export type guides_tutorialsOrderByWithAggregationInput = {
    guide_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
    _count?: guides_tutorialsCountOrderByAggregateInput
    _avg?: guides_tutorialsAvgOrderByAggregateInput
    _max?: guides_tutorialsMaxOrderByAggregateInput
    _min?: guides_tutorialsMinOrderByAggregateInput
    _sum?: guides_tutorialsSumOrderByAggregateInput
  }

  export type guides_tutorialsScalarWhereWithAggregatesInput = {
    AND?: guides_tutorialsScalarWhereWithAggregatesInput | guides_tutorialsScalarWhereWithAggregatesInput[]
    OR?: guides_tutorialsScalarWhereWithAggregatesInput[]
    NOT?: guides_tutorialsScalarWhereWithAggregatesInput | guides_tutorialsScalarWhereWithAggregatesInput[]
    guide_id?: IntWithAggregatesFilter<"guides_tutorials"> | number
    title?: StringWithAggregatesFilter<"guides_tutorials"> | string
    content?: StringWithAggregatesFilter<"guides_tutorials"> | string
    category?: StringWithAggregatesFilter<"guides_tutorials"> | string
  }

  export type benefits_typesWhereInput = {
    AND?: benefits_typesWhereInput | benefits_typesWhereInput[]
    OR?: benefits_typesWhereInput[]
    NOT?: benefits_typesWhereInput | benefits_typesWhereInput[]
    btypes_id?: IntFilter<"benefits_types"> | number
    title?: StringFilter<"benefits_types"> | string
    content?: StringFilter<"benefits_types"> | string
    required_month?: IntFilter<"benefits_types"> | number
    agency_id?: IntFilter<"benefits_types"> | number
    agency?: XOR<Agency_informationRelationFilter, agency_informationWhereInput>
    benefit_claims?: Benefit_claimsListRelationFilter
  }

  export type benefits_typesOrderByWithRelationInput = {
    btypes_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    required_month?: SortOrder
    agency_id?: SortOrder
    agency?: agency_informationOrderByWithRelationInput
    benefit_claims?: benefit_claimsOrderByRelationAggregateInput
  }

  export type benefits_typesWhereUniqueInput = Prisma.AtLeast<{
    btypes_id?: number
    AND?: benefits_typesWhereInput | benefits_typesWhereInput[]
    OR?: benefits_typesWhereInput[]
    NOT?: benefits_typesWhereInput | benefits_typesWhereInput[]
    title?: StringFilter<"benefits_types"> | string
    content?: StringFilter<"benefits_types"> | string
    required_month?: IntFilter<"benefits_types"> | number
    agency_id?: IntFilter<"benefits_types"> | number
    agency?: XOR<Agency_informationRelationFilter, agency_informationWhereInput>
    benefit_claims?: Benefit_claimsListRelationFilter
  }, "btypes_id">

  export type benefits_typesOrderByWithAggregationInput = {
    btypes_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    required_month?: SortOrder
    agency_id?: SortOrder
    _count?: benefits_typesCountOrderByAggregateInput
    _avg?: benefits_typesAvgOrderByAggregateInput
    _max?: benefits_typesMaxOrderByAggregateInput
    _min?: benefits_typesMinOrderByAggregateInput
    _sum?: benefits_typesSumOrderByAggregateInput
  }

  export type benefits_typesScalarWhereWithAggregatesInput = {
    AND?: benefits_typesScalarWhereWithAggregatesInput | benefits_typesScalarWhereWithAggregatesInput[]
    OR?: benefits_typesScalarWhereWithAggregatesInput[]
    NOT?: benefits_typesScalarWhereWithAggregatesInput | benefits_typesScalarWhereWithAggregatesInput[]
    btypes_id?: IntWithAggregatesFilter<"benefits_types"> | number
    title?: StringWithAggregatesFilter<"benefits_types"> | string
    content?: StringWithAggregatesFilter<"benefits_types"> | string
    required_month?: IntWithAggregatesFilter<"benefits_types"> | number
    agency_id?: IntWithAggregatesFilter<"benefits_types"> | number
  }

  export type faqs_categoryWhereInput = {
    AND?: faqs_categoryWhereInput | faqs_categoryWhereInput[]
    OR?: faqs_categoryWhereInput[]
    NOT?: faqs_categoryWhereInput | faqs_categoryWhereInput[]
    faq_cateforyId?: IntFilter<"faqs_category"> | number
    faq_categoryName?: StringFilter<"faqs_category"> | string
    faq?: FaqListRelationFilter
  }

  export type faqs_categoryOrderByWithRelationInput = {
    faq_cateforyId?: SortOrder
    faq_categoryName?: SortOrder
    faq?: faqOrderByRelationAggregateInput
  }

  export type faqs_categoryWhereUniqueInput = Prisma.AtLeast<{
    faq_cateforyId?: number
    AND?: faqs_categoryWhereInput | faqs_categoryWhereInput[]
    OR?: faqs_categoryWhereInput[]
    NOT?: faqs_categoryWhereInput | faqs_categoryWhereInput[]
    faq_categoryName?: StringFilter<"faqs_category"> | string
    faq?: FaqListRelationFilter
  }, "faq_cateforyId">

  export type faqs_categoryOrderByWithAggregationInput = {
    faq_cateforyId?: SortOrder
    faq_categoryName?: SortOrder
    _count?: faqs_categoryCountOrderByAggregateInput
    _avg?: faqs_categoryAvgOrderByAggregateInput
    _max?: faqs_categoryMaxOrderByAggregateInput
    _min?: faqs_categoryMinOrderByAggregateInput
    _sum?: faqs_categorySumOrderByAggregateInput
  }

  export type faqs_categoryScalarWhereWithAggregatesInput = {
    AND?: faqs_categoryScalarWhereWithAggregatesInput | faqs_categoryScalarWhereWithAggregatesInput[]
    OR?: faqs_categoryScalarWhereWithAggregatesInput[]
    NOT?: faqs_categoryScalarWhereWithAggregatesInput | faqs_categoryScalarWhereWithAggregatesInput[]
    faq_cateforyId?: IntWithAggregatesFilter<"faqs_category"> | number
    faq_categoryName?: StringWithAggregatesFilter<"faqs_category"> | string
  }

  export type user_security_questionsWhereInput = {
    AND?: user_security_questionsWhereInput | user_security_questionsWhereInput[]
    OR?: user_security_questionsWhereInput[]
    NOT?: user_security_questionsWhereInput | user_security_questionsWhereInput[]
    id?: IntFilter<"user_security_questions"> | number
    question?: StringFilter<"user_security_questions"> | string
    answer?: StringFilter<"user_security_questions"> | string
    create_at?: DateTimeFilter<"user_security_questions"> | Date | string
    UserID?: IntFilter<"user_security_questions"> | number
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type user_security_questionsOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    create_at?: SortOrder
    UserID?: SortOrder
    users?: UsersOrderByWithRelationInput
  }

  export type user_security_questionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: user_security_questionsWhereInput | user_security_questionsWhereInput[]
    OR?: user_security_questionsWhereInput[]
    NOT?: user_security_questionsWhereInput | user_security_questionsWhereInput[]
    question?: StringFilter<"user_security_questions"> | string
    answer?: StringFilter<"user_security_questions"> | string
    create_at?: DateTimeFilter<"user_security_questions"> | Date | string
    UserID?: IntFilter<"user_security_questions"> | number
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type user_security_questionsOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    create_at?: SortOrder
    UserID?: SortOrder
    _count?: user_security_questionsCountOrderByAggregateInput
    _avg?: user_security_questionsAvgOrderByAggregateInput
    _max?: user_security_questionsMaxOrderByAggregateInput
    _min?: user_security_questionsMinOrderByAggregateInput
    _sum?: user_security_questionsSumOrderByAggregateInput
  }

  export type user_security_questionsScalarWhereWithAggregatesInput = {
    AND?: user_security_questionsScalarWhereWithAggregatesInput | user_security_questionsScalarWhereWithAggregatesInput[]
    OR?: user_security_questionsScalarWhereWithAggregatesInput[]
    NOT?: user_security_questionsScalarWhereWithAggregatesInput | user_security_questionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_security_questions"> | number
    question?: StringWithAggregatesFilter<"user_security_questions"> | string
    answer?: StringWithAggregatesFilter<"user_security_questions"> | string
    create_at?: DateTimeWithAggregatesFilter<"user_security_questions"> | Date | string
    UserID?: IntWithAggregatesFilter<"user_security_questions"> | number
  }

  export type security_questionWhereInput = {
    AND?: security_questionWhereInput | security_questionWhereInput[]
    OR?: security_questionWhereInput[]
    NOT?: security_questionWhereInput | security_questionWhereInput[]
    id?: IntFilter<"security_question"> | number
    question?: StringFilter<"security_question"> | string
  }

  export type security_questionOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
  }

  export type security_questionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: security_questionWhereInput | security_questionWhereInput[]
    OR?: security_questionWhereInput[]
    NOT?: security_questionWhereInput | security_questionWhereInput[]
    question?: StringFilter<"security_question"> | string
  }, "id">

  export type security_questionOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    _count?: security_questionCountOrderByAggregateInput
    _avg?: security_questionAvgOrderByAggregateInput
    _max?: security_questionMaxOrderByAggregateInput
    _min?: security_questionMinOrderByAggregateInput
    _sum?: security_questionSumOrderByAggregateInput
  }

  export type security_questionScalarWhereWithAggregatesInput = {
    AND?: security_questionScalarWhereWithAggregatesInput | security_questionScalarWhereWithAggregatesInput[]
    OR?: security_questionScalarWhereWithAggregatesInput[]
    NOT?: security_questionScalarWhereWithAggregatesInput | security_questionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"security_question"> | number
    question?: StringWithAggregatesFilter<"security_question"> | string
  }

  export type UsersCreateInput = {
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    contributions?: contributionsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    benefit_claims?: benefit_claimsCreateNestedManyWithoutUsersInput
    user_info?: user_infoCreateNestedManyWithoutUserInput
    security_questions?: user_security_questionsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    userID?: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    contributions?: contributionsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutUsersInput
    user_info?: user_infoUncheckedCreateNestedManyWithoutUserInput
    security_questions?: user_security_questionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: contributionsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    benefit_claims?: benefit_claimsUpdateManyWithoutUsersNestedInput
    user_info?: user_infoUpdateManyWithoutUserNestedInput
    security_questions?: user_security_questionsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: contributionsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutUsersNestedInput
    user_info?: user_infoUncheckedUpdateManyWithoutUserNestedInput
    security_questions?: user_security_questionsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    userID?: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
  }

  export type UsersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsersUncheckedUpdateManyInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_infoCreateInput = {
    first_name: string
    middle_name: string
    last_name: string
    suffix?: string | null
    DOB: Date | string
    relationship: string
    contact_number?: string | null
    user_sex?: string | null
    education?: string | null
    user: UsersCreateNestedOneWithoutUser_infoInput
  }

  export type user_infoUncheckedCreateInput = {
    id?: number
    first_name: string
    middle_name: string
    last_name: string
    suffix?: string | null
    DOB: Date | string
    relationship: string
    contact_number?: string | null
    user_sex?: string | null
    education?: string | null
    users_id: number
  }

  export type user_infoUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    DOB?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: StringFieldUpdateOperationsInput | string
    contact_number?: NullableStringFieldUpdateOperationsInput | string | null
    user_sex?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UsersUpdateOneRequiredWithoutUser_infoNestedInput
  }

  export type user_infoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    DOB?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: StringFieldUpdateOperationsInput | string
    contact_number?: NullableStringFieldUpdateOperationsInput | string | null
    user_sex?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    users_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_infoCreateManyInput = {
    id?: number
    first_name: string
    middle_name: string
    last_name: string
    suffix?: string | null
    DOB: Date | string
    relationship: string
    contact_number?: string | null
    user_sex?: string | null
    education?: string | null
    users_id: number
  }

  export type user_infoUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    DOB?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: StringFieldUpdateOperationsInput | string
    contact_number?: NullableStringFieldUpdateOperationsInput | string | null
    user_sex?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_infoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    DOB?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: StringFieldUpdateOperationsInput | string
    contact_number?: NullableStringFieldUpdateOperationsInput | string | null
    user_sex?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    users_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_rolesCreateInput = {
    role_name: string
    description: string
  }

  export type user_rolesUncheckedCreateInput = {
    id?: number
    role_name: string
    description: string
  }

  export type user_rolesUpdateInput = {
    role_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type user_rolesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type user_rolesCreateManyInput = {
    id?: number
    role_name: string
    description: string
  }

  export type user_rolesUpdateManyMutationInput = {
    role_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type user_rolesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type contributionsCreateInput = {
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    source: agency_informationCreateNestedOneWithoutContributionsInput
    user: UsersCreateNestedOneWithoutContributionsInput
    notifications?: notificationsCreateNestedManyWithoutContributionsInput
  }

  export type contributionsUncheckedCreateInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    userID: number
    agency_id: number
    notifications?: notificationsUncheckedCreateNestedManyWithoutContributionsInput
  }

  export type contributionsUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: agency_informationUpdateOneRequiredWithoutContributionsNestedInput
    user?: UsersUpdateOneRequiredWithoutContributionsNestedInput
    notifications?: notificationsUpdateManyWithoutContributionsNestedInput
  }

  export type contributionsUncheckedUpdateInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
    notifications?: notificationsUncheckedUpdateManyWithoutContributionsNestedInput
  }

  export type contributionsCreateManyInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    userID: number
    agency_id: number
  }

  export type contributionsUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type contributionsUncheckedUpdateManyInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type agency_informationCreateInput = {
    agency_name: string
    description: string
    contact_info: string
    contributions?: contributionsCreateNestedManyWithoutSourceInput
    benefit_claims?: benefit_claimsCreateNestedManyWithoutAgencyInput
    benefits_types?: benefits_typesCreateNestedManyWithoutAgencyInput
    notifications?: notificationsCreateNestedManyWithoutAgencyInput
  }

  export type agency_informationUncheckedCreateInput = {
    agency_id?: number
    agency_name: string
    description: string
    contact_info: string
    contributions?: contributionsUncheckedCreateNestedManyWithoutSourceInput
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutAgencyInput
    benefits_types?: benefits_typesUncheckedCreateNestedManyWithoutAgencyInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type agency_informationUpdateInput = {
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    contributions?: contributionsUpdateManyWithoutSourceNestedInput
    benefit_claims?: benefit_claimsUpdateManyWithoutAgencyNestedInput
    benefits_types?: benefits_typesUpdateManyWithoutAgencyNestedInput
    notifications?: notificationsUpdateManyWithoutAgencyNestedInput
  }

  export type agency_informationUncheckedUpdateInput = {
    agency_id?: IntFieldUpdateOperationsInput | number
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    contributions?: contributionsUncheckedUpdateManyWithoutSourceNestedInput
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutAgencyNestedInput
    benefits_types?: benefits_typesUncheckedUpdateManyWithoutAgencyNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type agency_informationCreateManyInput = {
    agency_id?: number
    agency_name: string
    description: string
    contact_info: string
  }

  export type agency_informationUpdateManyMutationInput = {
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
  }

  export type agency_informationUncheckedUpdateManyInput = {
    agency_id?: IntFieldUpdateOperationsInput | number
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
  }

  export type notificationsCreateInput = {
    message: string
    is_read: number
    created_at?: Date | string
    user: UsersCreateNestedOneWithoutNotificationsInput
    contributions: contributionsCreateNestedOneWithoutNotificationsInput
    agency: agency_informationCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateInput = {
    notification_id?: number
    message: string
    is_read: number
    created_at?: Date | string
    user_id: number
    Contribution_id: number
    agency_id: number
  }

  export type notificationsUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutNotificationsNestedInput
    contributions?: contributionsUpdateOneRequiredWithoutNotificationsNestedInput
    agency?: agency_informationUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    Contribution_id?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type notificationsCreateManyInput = {
    notification_id?: number
    message: string
    is_read: number
    created_at?: Date | string
    user_id: number
    Contribution_id: number
    agency_id: number
  }

  export type notificationsUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationsUncheckedUpdateManyInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    Contribution_id?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type benefit_claimsCreateInput = {
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    users: UsersCreateNestedOneWithoutBenefit_claimsInput
    agency: agency_informationCreateNestedOneWithoutBenefit_claimsInput
    benefits_type: benefits_typesCreateNestedOneWithoutBenefit_claimsInput
  }

  export type benefit_claimsUncheckedCreateInput = {
    claim_id?: number
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    userID: number
    agency_id: number
    btype_id: number
  }

  export type benefit_claimsUpdateInput = {
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutBenefit_claimsNestedInput
    agency?: agency_informationUpdateOneRequiredWithoutBenefit_claimsNestedInput
    benefits_type?: benefits_typesUpdateOneRequiredWithoutBenefit_claimsNestedInput
  }

  export type benefit_claimsUncheckedUpdateInput = {
    claim_id?: IntFieldUpdateOperationsInput | number
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
    btype_id?: IntFieldUpdateOperationsInput | number
  }

  export type benefit_claimsCreateManyInput = {
    claim_id?: number
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    userID: number
    agency_id: number
    btype_id: number
  }

  export type benefit_claimsUpdateManyMutationInput = {
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
  }

  export type benefit_claimsUncheckedUpdateManyInput = {
    claim_id?: IntFieldUpdateOperationsInput | number
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
    btype_id?: IntFieldUpdateOperationsInput | number
  }

  export type faqCreateInput = {
    question: string
    answer: string
    category: faqs_categoryCreateNestedOneWithoutFaqInput
  }

  export type faqUncheckedCreateInput = {
    faq_id?: number
    question: string
    answer: string
    category_id: number
  }

  export type faqUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    category?: faqs_categoryUpdateOneRequiredWithoutFaqNestedInput
  }

  export type faqUncheckedUpdateInput = {
    faq_id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type faqCreateManyInput = {
    faq_id?: number
    question: string
    answer: string
    category_id: number
  }

  export type faqUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type faqUncheckedUpdateManyInput = {
    faq_id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type guides_tutorialsCreateInput = {
    title: string
    content: string
    category: string
  }

  export type guides_tutorialsUncheckedCreateInput = {
    guide_id?: number
    title: string
    content: string
    category: string
  }

  export type guides_tutorialsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
  }

  export type guides_tutorialsUncheckedUpdateInput = {
    guide_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
  }

  export type guides_tutorialsCreateManyInput = {
    guide_id?: number
    title: string
    content: string
    category: string
  }

  export type guides_tutorialsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
  }

  export type guides_tutorialsUncheckedUpdateManyInput = {
    guide_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
  }

  export type benefits_typesCreateInput = {
    title: string
    content: string
    required_month: number
    agency: agency_informationCreateNestedOneWithoutBenefits_typesInput
    benefit_claims?: benefit_claimsCreateNestedManyWithoutBenefits_typeInput
  }

  export type benefits_typesUncheckedCreateInput = {
    btypes_id?: number
    title: string
    content: string
    required_month: number
    agency_id: number
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutBenefits_typeInput
  }

  export type benefits_typesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    required_month?: IntFieldUpdateOperationsInput | number
    agency?: agency_informationUpdateOneRequiredWithoutBenefits_typesNestedInput
    benefit_claims?: benefit_claimsUpdateManyWithoutBenefits_typeNestedInput
  }

  export type benefits_typesUncheckedUpdateInput = {
    btypes_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    required_month?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutBenefits_typeNestedInput
  }

  export type benefits_typesCreateManyInput = {
    btypes_id?: number
    title: string
    content: string
    required_month: number
    agency_id: number
  }

  export type benefits_typesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    required_month?: IntFieldUpdateOperationsInput | number
  }

  export type benefits_typesUncheckedUpdateManyInput = {
    btypes_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    required_month?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type faqs_categoryCreateInput = {
    faq_categoryName: string
    faq?: faqCreateNestedManyWithoutCategoryInput
  }

  export type faqs_categoryUncheckedCreateInput = {
    faq_cateforyId?: number
    faq_categoryName: string
    faq?: faqUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type faqs_categoryUpdateInput = {
    faq_categoryName?: StringFieldUpdateOperationsInput | string
    faq?: faqUpdateManyWithoutCategoryNestedInput
  }

  export type faqs_categoryUncheckedUpdateInput = {
    faq_cateforyId?: IntFieldUpdateOperationsInput | number
    faq_categoryName?: StringFieldUpdateOperationsInput | string
    faq?: faqUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type faqs_categoryCreateManyInput = {
    faq_cateforyId?: number
    faq_categoryName: string
  }

  export type faqs_categoryUpdateManyMutationInput = {
    faq_categoryName?: StringFieldUpdateOperationsInput | string
  }

  export type faqs_categoryUncheckedUpdateManyInput = {
    faq_cateforyId?: IntFieldUpdateOperationsInput | number
    faq_categoryName?: StringFieldUpdateOperationsInput | string
  }

  export type user_security_questionsCreateInput = {
    question: string
    answer: string
    create_at?: Date | string
    users: UsersCreateNestedOneWithoutSecurity_questionsInput
  }

  export type user_security_questionsUncheckedCreateInput = {
    id?: number
    question: string
    answer: string
    create_at?: Date | string
    UserID: number
  }

  export type user_security_questionsUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutSecurity_questionsNestedInput
  }

  export type user_security_questionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserID?: IntFieldUpdateOperationsInput | number
  }

  export type user_security_questionsCreateManyInput = {
    id?: number
    question: string
    answer: string
    create_at?: Date | string
    UserID: number
  }

  export type user_security_questionsUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_security_questionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserID?: IntFieldUpdateOperationsInput | number
  }

  export type security_questionCreateInput = {
    question: string
  }

  export type security_questionUncheckedCreateInput = {
    id?: number
    question: string
  }

  export type security_questionUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
  }

  export type security_questionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
  }

  export type security_questionCreateManyInput = {
    id?: number
    question: string
  }

  export type security_questionUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
  }

  export type security_questionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ContributionsListRelationFilter = {
    every?: contributionsWhereInput
    some?: contributionsWhereInput
    none?: contributionsWhereInput
  }

  export type NotificationsListRelationFilter = {
    every?: notificationsWhereInput
    some?: notificationsWhereInput
    none?: notificationsWhereInput
  }

  export type Benefit_claimsListRelationFilter = {
    every?: benefit_claimsWhereInput
    some?: benefit_claimsWhereInput
    none?: benefit_claimsWhereInput
  }

  export type User_infoListRelationFilter = {
    every?: user_infoWhereInput
    some?: user_infoWhereInput
    none?: user_infoWhereInput
  }

  export type User_security_questionsListRelationFilter = {
    every?: user_security_questionsWhereInput
    some?: user_security_questionsWhereInput
    none?: user_security_questionsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type contributionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type notificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type benefit_claimsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_infoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_security_questionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    address?: SortOrder
    telephone_number?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    isVerified?: SortOrder
    last_login?: SortOrder
    workStartDate?: SortOrder
    suffix?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    city_municipal?: SortOrder
    postal_code?: SortOrder
    country?: SortOrder
    province?: SortOrder
    sss_id?: SortOrder
    pagibig_id?: SortOrder
    philhealth_id?: SortOrder
    tin?: SortOrder
    nationality?: SortOrder
    civil_status?: SortOrder
    placeof_birth?: SortOrder
    religion?: SortOrder
    subdivision?: SortOrder
    street?: SortOrder
    house?: SortOrder
    room?: SortOrder
    role_Id?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    userID?: SortOrder
    isVerified?: SortOrder
    postal_code?: SortOrder
    role_Id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    address?: SortOrder
    telephone_number?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    isVerified?: SortOrder
    last_login?: SortOrder
    workStartDate?: SortOrder
    suffix?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    city_municipal?: SortOrder
    postal_code?: SortOrder
    country?: SortOrder
    province?: SortOrder
    sss_id?: SortOrder
    pagibig_id?: SortOrder
    philhealth_id?: SortOrder
    tin?: SortOrder
    nationality?: SortOrder
    civil_status?: SortOrder
    placeof_birth?: SortOrder
    religion?: SortOrder
    subdivision?: SortOrder
    street?: SortOrder
    house?: SortOrder
    room?: SortOrder
    role_Id?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    address?: SortOrder
    telephone_number?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    isVerified?: SortOrder
    last_login?: SortOrder
    workStartDate?: SortOrder
    suffix?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    city_municipal?: SortOrder
    postal_code?: SortOrder
    country?: SortOrder
    province?: SortOrder
    sss_id?: SortOrder
    pagibig_id?: SortOrder
    philhealth_id?: SortOrder
    tin?: SortOrder
    nationality?: SortOrder
    civil_status?: SortOrder
    placeof_birth?: SortOrder
    religion?: SortOrder
    subdivision?: SortOrder
    street?: SortOrder
    house?: SortOrder
    room?: SortOrder
    role_Id?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    userID?: SortOrder
    isVerified?: SortOrder
    postal_code?: SortOrder
    role_Id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type user_infoCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    suffix?: SortOrder
    DOB?: SortOrder
    relationship?: SortOrder
    contact_number?: SortOrder
    user_sex?: SortOrder
    education?: SortOrder
    users_id?: SortOrder
  }

  export type user_infoAvgOrderByAggregateInput = {
    id?: SortOrder
    users_id?: SortOrder
  }

  export type user_infoMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    suffix?: SortOrder
    DOB?: SortOrder
    relationship?: SortOrder
    contact_number?: SortOrder
    user_sex?: SortOrder
    education?: SortOrder
    users_id?: SortOrder
  }

  export type user_infoMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    suffix?: SortOrder
    DOB?: SortOrder
    relationship?: SortOrder
    contact_number?: SortOrder
    user_sex?: SortOrder
    education?: SortOrder
    users_id?: SortOrder
  }

  export type user_infoSumOrderByAggregateInput = {
    id?: SortOrder
    users_id?: SortOrder
  }

  export type user_rolesCountOrderByAggregateInput = {
    id?: SortOrder
    role_name?: SortOrder
    description?: SortOrder
  }

  export type user_rolesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type user_rolesMaxOrderByAggregateInput = {
    id?: SortOrder
    role_name?: SortOrder
    description?: SortOrder
  }

  export type user_rolesMinOrderByAggregateInput = {
    id?: SortOrder
    role_name?: SortOrder
    description?: SortOrder
  }

  export type user_rolesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type Agency_informationRelationFilter = {
    is?: agency_informationWhereInput
    isNot?: agency_informationWhereInput
  }

  export type contributionsCountOrderByAggregateInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    post_date?: SortOrder
    status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
  }

  export type contributionsAvgOrderByAggregateInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
  }

  export type contributionsMaxOrderByAggregateInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    post_date?: SortOrder
    status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
  }

  export type contributionsMinOrderByAggregateInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    post_date?: SortOrder
    status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
  }

  export type contributionsSumOrderByAggregateInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type Benefits_typesListRelationFilter = {
    every?: benefits_typesWhereInput
    some?: benefits_typesWhereInput
    none?: benefits_typesWhereInput
  }

  export type benefits_typesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type agency_informationCountOrderByAggregateInput = {
    agency_id?: SortOrder
    agency_name?: SortOrder
    description?: SortOrder
    contact_info?: SortOrder
  }

  export type agency_informationAvgOrderByAggregateInput = {
    agency_id?: SortOrder
  }

  export type agency_informationMaxOrderByAggregateInput = {
    agency_id?: SortOrder
    agency_name?: SortOrder
    description?: SortOrder
    contact_info?: SortOrder
  }

  export type agency_informationMinOrderByAggregateInput = {
    agency_id?: SortOrder
    agency_name?: SortOrder
    description?: SortOrder
    contact_info?: SortOrder
  }

  export type agency_informationSumOrderByAggregateInput = {
    agency_id?: SortOrder
  }

  export type ContributionsRelationFilter = {
    is?: contributionsWhereInput
    isNot?: contributionsWhereInput
  }

  export type notificationsCountOrderByAggregateInput = {
    notification_id?: SortOrder
    message?: SortOrder
    is_read?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    Contribution_id?: SortOrder
    agency_id?: SortOrder
  }

  export type notificationsAvgOrderByAggregateInput = {
    notification_id?: SortOrder
    is_read?: SortOrder
    user_id?: SortOrder
    Contribution_id?: SortOrder
    agency_id?: SortOrder
  }

  export type notificationsMaxOrderByAggregateInput = {
    notification_id?: SortOrder
    message?: SortOrder
    is_read?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    Contribution_id?: SortOrder
    agency_id?: SortOrder
  }

  export type notificationsMinOrderByAggregateInput = {
    notification_id?: SortOrder
    message?: SortOrder
    is_read?: SortOrder
    created_at?: SortOrder
    user_id?: SortOrder
    Contribution_id?: SortOrder
    agency_id?: SortOrder
  }

  export type notificationsSumOrderByAggregateInput = {
    notification_id?: SortOrder
    is_read?: SortOrder
    user_id?: SortOrder
    Contribution_id?: SortOrder
    agency_id?: SortOrder
  }

  export type Benefits_typesRelationFilter = {
    is?: benefits_typesWhereInput
    isNot?: benefits_typesWhereInput
  }

  export type benefit_claimsCountOrderByAggregateInput = {
    claim_id?: SortOrder
    claim_amount?: SortOrder
    claim_status?: SortOrder
    submitted_at?: SortOrder
    processed_at?: SortOrder
    remarks?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    btype_id?: SortOrder
  }

  export type benefit_claimsAvgOrderByAggregateInput = {
    claim_id?: SortOrder
    claim_amount?: SortOrder
    claim_status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    btype_id?: SortOrder
  }

  export type benefit_claimsMaxOrderByAggregateInput = {
    claim_id?: SortOrder
    claim_amount?: SortOrder
    claim_status?: SortOrder
    submitted_at?: SortOrder
    processed_at?: SortOrder
    remarks?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    btype_id?: SortOrder
  }

  export type benefit_claimsMinOrderByAggregateInput = {
    claim_id?: SortOrder
    claim_amount?: SortOrder
    claim_status?: SortOrder
    submitted_at?: SortOrder
    processed_at?: SortOrder
    remarks?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    btype_id?: SortOrder
  }

  export type benefit_claimsSumOrderByAggregateInput = {
    claim_id?: SortOrder
    claim_amount?: SortOrder
    claim_status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    btype_id?: SortOrder
  }

  export type Faqs_categoryRelationFilter = {
    is?: faqs_categoryWhereInput
    isNot?: faqs_categoryWhereInput
  }

  export type faqCountOrderByAggregateInput = {
    faq_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category_id?: SortOrder
  }

  export type faqAvgOrderByAggregateInput = {
    faq_id?: SortOrder
    category_id?: SortOrder
  }

  export type faqMaxOrderByAggregateInput = {
    faq_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category_id?: SortOrder
  }

  export type faqMinOrderByAggregateInput = {
    faq_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category_id?: SortOrder
  }

  export type faqSumOrderByAggregateInput = {
    faq_id?: SortOrder
    category_id?: SortOrder
  }

  export type guides_tutorialsCountOrderByAggregateInput = {
    guide_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
  }

  export type guides_tutorialsAvgOrderByAggregateInput = {
    guide_id?: SortOrder
  }

  export type guides_tutorialsMaxOrderByAggregateInput = {
    guide_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
  }

  export type guides_tutorialsMinOrderByAggregateInput = {
    guide_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
  }

  export type guides_tutorialsSumOrderByAggregateInput = {
    guide_id?: SortOrder
  }

  export type benefits_typesCountOrderByAggregateInput = {
    btypes_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    required_month?: SortOrder
    agency_id?: SortOrder
  }

  export type benefits_typesAvgOrderByAggregateInput = {
    btypes_id?: SortOrder
    required_month?: SortOrder
    agency_id?: SortOrder
  }

  export type benefits_typesMaxOrderByAggregateInput = {
    btypes_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    required_month?: SortOrder
    agency_id?: SortOrder
  }

  export type benefits_typesMinOrderByAggregateInput = {
    btypes_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    required_month?: SortOrder
    agency_id?: SortOrder
  }

  export type benefits_typesSumOrderByAggregateInput = {
    btypes_id?: SortOrder
    required_month?: SortOrder
    agency_id?: SortOrder
  }

  export type FaqListRelationFilter = {
    every?: faqWhereInput
    some?: faqWhereInput
    none?: faqWhereInput
  }

  export type faqOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type faqs_categoryCountOrderByAggregateInput = {
    faq_cateforyId?: SortOrder
    faq_categoryName?: SortOrder
  }

  export type faqs_categoryAvgOrderByAggregateInput = {
    faq_cateforyId?: SortOrder
  }

  export type faqs_categoryMaxOrderByAggregateInput = {
    faq_cateforyId?: SortOrder
    faq_categoryName?: SortOrder
  }

  export type faqs_categoryMinOrderByAggregateInput = {
    faq_cateforyId?: SortOrder
    faq_categoryName?: SortOrder
  }

  export type faqs_categorySumOrderByAggregateInput = {
    faq_cateforyId?: SortOrder
  }

  export type user_security_questionsCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    create_at?: SortOrder
    UserID?: SortOrder
  }

  export type user_security_questionsAvgOrderByAggregateInput = {
    id?: SortOrder
    UserID?: SortOrder
  }

  export type user_security_questionsMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    create_at?: SortOrder
    UserID?: SortOrder
  }

  export type user_security_questionsMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    create_at?: SortOrder
    UserID?: SortOrder
  }

  export type user_security_questionsSumOrderByAggregateInput = {
    id?: SortOrder
    UserID?: SortOrder
  }

  export type security_questionCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
  }

  export type security_questionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type security_questionMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
  }

  export type security_questionMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
  }

  export type security_questionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type contributionsCreateNestedManyWithoutUserInput = {
    create?: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput> | contributionsCreateWithoutUserInput[] | contributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutUserInput | contributionsCreateOrConnectWithoutUserInput[]
    createMany?: contributionsCreateManyUserInputEnvelope
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
  }

  export type notificationsCreateNestedManyWithoutUserInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type benefit_claimsCreateNestedManyWithoutUsersInput = {
    create?: XOR<benefit_claimsCreateWithoutUsersInput, benefit_claimsUncheckedCreateWithoutUsersInput> | benefit_claimsCreateWithoutUsersInput[] | benefit_claimsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutUsersInput | benefit_claimsCreateOrConnectWithoutUsersInput[]
    createMany?: benefit_claimsCreateManyUsersInputEnvelope
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
  }

  export type user_infoCreateNestedManyWithoutUserInput = {
    create?: XOR<user_infoCreateWithoutUserInput, user_infoUncheckedCreateWithoutUserInput> | user_infoCreateWithoutUserInput[] | user_infoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_infoCreateOrConnectWithoutUserInput | user_infoCreateOrConnectWithoutUserInput[]
    createMany?: user_infoCreateManyUserInputEnvelope
    connect?: user_infoWhereUniqueInput | user_infoWhereUniqueInput[]
  }

  export type user_security_questionsCreateNestedManyWithoutUsersInput = {
    create?: XOR<user_security_questionsCreateWithoutUsersInput, user_security_questionsUncheckedCreateWithoutUsersInput> | user_security_questionsCreateWithoutUsersInput[] | user_security_questionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_security_questionsCreateOrConnectWithoutUsersInput | user_security_questionsCreateOrConnectWithoutUsersInput[]
    createMany?: user_security_questionsCreateManyUsersInputEnvelope
    connect?: user_security_questionsWhereUniqueInput | user_security_questionsWhereUniqueInput[]
  }

  export type contributionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput> | contributionsCreateWithoutUserInput[] | contributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutUserInput | contributionsCreateOrConnectWithoutUserInput[]
    createMany?: contributionsCreateManyUserInputEnvelope
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
  }

  export type notificationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type benefit_claimsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<benefit_claimsCreateWithoutUsersInput, benefit_claimsUncheckedCreateWithoutUsersInput> | benefit_claimsCreateWithoutUsersInput[] | benefit_claimsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutUsersInput | benefit_claimsCreateOrConnectWithoutUsersInput[]
    createMany?: benefit_claimsCreateManyUsersInputEnvelope
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
  }

  export type user_infoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<user_infoCreateWithoutUserInput, user_infoUncheckedCreateWithoutUserInput> | user_infoCreateWithoutUserInput[] | user_infoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_infoCreateOrConnectWithoutUserInput | user_infoCreateOrConnectWithoutUserInput[]
    createMany?: user_infoCreateManyUserInputEnvelope
    connect?: user_infoWhereUniqueInput | user_infoWhereUniqueInput[]
  }

  export type user_security_questionsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<user_security_questionsCreateWithoutUsersInput, user_security_questionsUncheckedCreateWithoutUsersInput> | user_security_questionsCreateWithoutUsersInput[] | user_security_questionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_security_questionsCreateOrConnectWithoutUsersInput | user_security_questionsCreateOrConnectWithoutUsersInput[]
    createMany?: user_security_questionsCreateManyUsersInputEnvelope
    connect?: user_security_questionsWhereUniqueInput | user_security_questionsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type contributionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput> | contributionsCreateWithoutUserInput[] | contributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutUserInput | contributionsCreateOrConnectWithoutUserInput[]
    upsert?: contributionsUpsertWithWhereUniqueWithoutUserInput | contributionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: contributionsCreateManyUserInputEnvelope
    set?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    disconnect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    delete?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    update?: contributionsUpdateWithWhereUniqueWithoutUserInput | contributionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: contributionsUpdateManyWithWhereWithoutUserInput | contributionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
  }

  export type notificationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutUserInput | notificationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutUserInput | notificationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutUserInput | notificationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type benefit_claimsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<benefit_claimsCreateWithoutUsersInput, benefit_claimsUncheckedCreateWithoutUsersInput> | benefit_claimsCreateWithoutUsersInput[] | benefit_claimsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutUsersInput | benefit_claimsCreateOrConnectWithoutUsersInput[]
    upsert?: benefit_claimsUpsertWithWhereUniqueWithoutUsersInput | benefit_claimsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: benefit_claimsCreateManyUsersInputEnvelope
    set?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    disconnect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    delete?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    update?: benefit_claimsUpdateWithWhereUniqueWithoutUsersInput | benefit_claimsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: benefit_claimsUpdateManyWithWhereWithoutUsersInput | benefit_claimsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: benefit_claimsScalarWhereInput | benefit_claimsScalarWhereInput[]
  }

  export type user_infoUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_infoCreateWithoutUserInput, user_infoUncheckedCreateWithoutUserInput> | user_infoCreateWithoutUserInput[] | user_infoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_infoCreateOrConnectWithoutUserInput | user_infoCreateOrConnectWithoutUserInput[]
    upsert?: user_infoUpsertWithWhereUniqueWithoutUserInput | user_infoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_infoCreateManyUserInputEnvelope
    set?: user_infoWhereUniqueInput | user_infoWhereUniqueInput[]
    disconnect?: user_infoWhereUniqueInput | user_infoWhereUniqueInput[]
    delete?: user_infoWhereUniqueInput | user_infoWhereUniqueInput[]
    connect?: user_infoWhereUniqueInput | user_infoWhereUniqueInput[]
    update?: user_infoUpdateWithWhereUniqueWithoutUserInput | user_infoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_infoUpdateManyWithWhereWithoutUserInput | user_infoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_infoScalarWhereInput | user_infoScalarWhereInput[]
  }

  export type user_security_questionsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<user_security_questionsCreateWithoutUsersInput, user_security_questionsUncheckedCreateWithoutUsersInput> | user_security_questionsCreateWithoutUsersInput[] | user_security_questionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_security_questionsCreateOrConnectWithoutUsersInput | user_security_questionsCreateOrConnectWithoutUsersInput[]
    upsert?: user_security_questionsUpsertWithWhereUniqueWithoutUsersInput | user_security_questionsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: user_security_questionsCreateManyUsersInputEnvelope
    set?: user_security_questionsWhereUniqueInput | user_security_questionsWhereUniqueInput[]
    disconnect?: user_security_questionsWhereUniqueInput | user_security_questionsWhereUniqueInput[]
    delete?: user_security_questionsWhereUniqueInput | user_security_questionsWhereUniqueInput[]
    connect?: user_security_questionsWhereUniqueInput | user_security_questionsWhereUniqueInput[]
    update?: user_security_questionsUpdateWithWhereUniqueWithoutUsersInput | user_security_questionsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: user_security_questionsUpdateManyWithWhereWithoutUsersInput | user_security_questionsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: user_security_questionsScalarWhereInput | user_security_questionsScalarWhereInput[]
  }

  export type contributionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput> | contributionsCreateWithoutUserInput[] | contributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutUserInput | contributionsCreateOrConnectWithoutUserInput[]
    upsert?: contributionsUpsertWithWhereUniqueWithoutUserInput | contributionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: contributionsCreateManyUserInputEnvelope
    set?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    disconnect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    delete?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    update?: contributionsUpdateWithWhereUniqueWithoutUserInput | contributionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: contributionsUpdateManyWithWhereWithoutUserInput | contributionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
  }

  export type notificationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput> | notificationsCreateWithoutUserInput[] | notificationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutUserInput | notificationsCreateOrConnectWithoutUserInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutUserInput | notificationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: notificationsCreateManyUserInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutUserInput | notificationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutUserInput | notificationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type benefit_claimsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<benefit_claimsCreateWithoutUsersInput, benefit_claimsUncheckedCreateWithoutUsersInput> | benefit_claimsCreateWithoutUsersInput[] | benefit_claimsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutUsersInput | benefit_claimsCreateOrConnectWithoutUsersInput[]
    upsert?: benefit_claimsUpsertWithWhereUniqueWithoutUsersInput | benefit_claimsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: benefit_claimsCreateManyUsersInputEnvelope
    set?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    disconnect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    delete?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    update?: benefit_claimsUpdateWithWhereUniqueWithoutUsersInput | benefit_claimsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: benefit_claimsUpdateManyWithWhereWithoutUsersInput | benefit_claimsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: benefit_claimsScalarWhereInput | benefit_claimsScalarWhereInput[]
  }

  export type user_infoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_infoCreateWithoutUserInput, user_infoUncheckedCreateWithoutUserInput> | user_infoCreateWithoutUserInput[] | user_infoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_infoCreateOrConnectWithoutUserInput | user_infoCreateOrConnectWithoutUserInput[]
    upsert?: user_infoUpsertWithWhereUniqueWithoutUserInput | user_infoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_infoCreateManyUserInputEnvelope
    set?: user_infoWhereUniqueInput | user_infoWhereUniqueInput[]
    disconnect?: user_infoWhereUniqueInput | user_infoWhereUniqueInput[]
    delete?: user_infoWhereUniqueInput | user_infoWhereUniqueInput[]
    connect?: user_infoWhereUniqueInput | user_infoWhereUniqueInput[]
    update?: user_infoUpdateWithWhereUniqueWithoutUserInput | user_infoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_infoUpdateManyWithWhereWithoutUserInput | user_infoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_infoScalarWhereInput | user_infoScalarWhereInput[]
  }

  export type user_security_questionsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<user_security_questionsCreateWithoutUsersInput, user_security_questionsUncheckedCreateWithoutUsersInput> | user_security_questionsCreateWithoutUsersInput[] | user_security_questionsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_security_questionsCreateOrConnectWithoutUsersInput | user_security_questionsCreateOrConnectWithoutUsersInput[]
    upsert?: user_security_questionsUpsertWithWhereUniqueWithoutUsersInput | user_security_questionsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: user_security_questionsCreateManyUsersInputEnvelope
    set?: user_security_questionsWhereUniqueInput | user_security_questionsWhereUniqueInput[]
    disconnect?: user_security_questionsWhereUniqueInput | user_security_questionsWhereUniqueInput[]
    delete?: user_security_questionsWhereUniqueInput | user_security_questionsWhereUniqueInput[]
    connect?: user_security_questionsWhereUniqueInput | user_security_questionsWhereUniqueInput[]
    update?: user_security_questionsUpdateWithWhereUniqueWithoutUsersInput | user_security_questionsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: user_security_questionsUpdateManyWithWhereWithoutUsersInput | user_security_questionsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: user_security_questionsScalarWhereInput | user_security_questionsScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutUser_infoInput = {
    create?: XOR<UsersCreateWithoutUser_infoInput, UsersUncheckedCreateWithoutUser_infoInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUser_infoInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutUser_infoNestedInput = {
    create?: XOR<UsersCreateWithoutUser_infoInput, UsersUncheckedCreateWithoutUser_infoInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUser_infoInput
    upsert?: UsersUpsertWithoutUser_infoInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutUser_infoInput, UsersUpdateWithoutUser_infoInput>, UsersUncheckedUpdateWithoutUser_infoInput>
  }

  export type agency_informationCreateNestedOneWithoutContributionsInput = {
    create?: XOR<agency_informationCreateWithoutContributionsInput, agency_informationUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: agency_informationCreateOrConnectWithoutContributionsInput
    connect?: agency_informationWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutContributionsInput = {
    create?: XOR<UsersCreateWithoutContributionsInput, UsersUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutContributionsInput
    connect?: UsersWhereUniqueInput
  }

  export type notificationsCreateNestedManyWithoutContributionsInput = {
    create?: XOR<notificationsCreateWithoutContributionsInput, notificationsUncheckedCreateWithoutContributionsInput> | notificationsCreateWithoutContributionsInput[] | notificationsUncheckedCreateWithoutContributionsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutContributionsInput | notificationsCreateOrConnectWithoutContributionsInput[]
    createMany?: notificationsCreateManyContributionsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type notificationsUncheckedCreateNestedManyWithoutContributionsInput = {
    create?: XOR<notificationsCreateWithoutContributionsInput, notificationsUncheckedCreateWithoutContributionsInput> | notificationsCreateWithoutContributionsInput[] | notificationsUncheckedCreateWithoutContributionsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutContributionsInput | notificationsCreateOrConnectWithoutContributionsInput[]
    createMany?: notificationsCreateManyContributionsInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type agency_informationUpdateOneRequiredWithoutContributionsNestedInput = {
    create?: XOR<agency_informationCreateWithoutContributionsInput, agency_informationUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: agency_informationCreateOrConnectWithoutContributionsInput
    upsert?: agency_informationUpsertWithoutContributionsInput
    connect?: agency_informationWhereUniqueInput
    update?: XOR<XOR<agency_informationUpdateToOneWithWhereWithoutContributionsInput, agency_informationUpdateWithoutContributionsInput>, agency_informationUncheckedUpdateWithoutContributionsInput>
  }

  export type UsersUpdateOneRequiredWithoutContributionsNestedInput = {
    create?: XOR<UsersCreateWithoutContributionsInput, UsersUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutContributionsInput
    upsert?: UsersUpsertWithoutContributionsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutContributionsInput, UsersUpdateWithoutContributionsInput>, UsersUncheckedUpdateWithoutContributionsInput>
  }

  export type notificationsUpdateManyWithoutContributionsNestedInput = {
    create?: XOR<notificationsCreateWithoutContributionsInput, notificationsUncheckedCreateWithoutContributionsInput> | notificationsCreateWithoutContributionsInput[] | notificationsUncheckedCreateWithoutContributionsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutContributionsInput | notificationsCreateOrConnectWithoutContributionsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutContributionsInput | notificationsUpsertWithWhereUniqueWithoutContributionsInput[]
    createMany?: notificationsCreateManyContributionsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutContributionsInput | notificationsUpdateWithWhereUniqueWithoutContributionsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutContributionsInput | notificationsUpdateManyWithWhereWithoutContributionsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type notificationsUncheckedUpdateManyWithoutContributionsNestedInput = {
    create?: XOR<notificationsCreateWithoutContributionsInput, notificationsUncheckedCreateWithoutContributionsInput> | notificationsCreateWithoutContributionsInput[] | notificationsUncheckedCreateWithoutContributionsInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutContributionsInput | notificationsCreateOrConnectWithoutContributionsInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutContributionsInput | notificationsUpsertWithWhereUniqueWithoutContributionsInput[]
    createMany?: notificationsCreateManyContributionsInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutContributionsInput | notificationsUpdateWithWhereUniqueWithoutContributionsInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutContributionsInput | notificationsUpdateManyWithWhereWithoutContributionsInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type contributionsCreateNestedManyWithoutSourceInput = {
    create?: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput> | contributionsCreateWithoutSourceInput[] | contributionsUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutSourceInput | contributionsCreateOrConnectWithoutSourceInput[]
    createMany?: contributionsCreateManySourceInputEnvelope
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
  }

  export type benefit_claimsCreateNestedManyWithoutAgencyInput = {
    create?: XOR<benefit_claimsCreateWithoutAgencyInput, benefit_claimsUncheckedCreateWithoutAgencyInput> | benefit_claimsCreateWithoutAgencyInput[] | benefit_claimsUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutAgencyInput | benefit_claimsCreateOrConnectWithoutAgencyInput[]
    createMany?: benefit_claimsCreateManyAgencyInputEnvelope
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
  }

  export type benefits_typesCreateNestedManyWithoutAgencyInput = {
    create?: XOR<benefits_typesCreateWithoutAgencyInput, benefits_typesUncheckedCreateWithoutAgencyInput> | benefits_typesCreateWithoutAgencyInput[] | benefits_typesUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: benefits_typesCreateOrConnectWithoutAgencyInput | benefits_typesCreateOrConnectWithoutAgencyInput[]
    createMany?: benefits_typesCreateManyAgencyInputEnvelope
    connect?: benefits_typesWhereUniqueInput | benefits_typesWhereUniqueInput[]
  }

  export type notificationsCreateNestedManyWithoutAgencyInput = {
    create?: XOR<notificationsCreateWithoutAgencyInput, notificationsUncheckedCreateWithoutAgencyInput> | notificationsCreateWithoutAgencyInput[] | notificationsUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutAgencyInput | notificationsCreateOrConnectWithoutAgencyInput[]
    createMany?: notificationsCreateManyAgencyInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type contributionsUncheckedCreateNestedManyWithoutSourceInput = {
    create?: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput> | contributionsCreateWithoutSourceInput[] | contributionsUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutSourceInput | contributionsCreateOrConnectWithoutSourceInput[]
    createMany?: contributionsCreateManySourceInputEnvelope
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
  }

  export type benefit_claimsUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<benefit_claimsCreateWithoutAgencyInput, benefit_claimsUncheckedCreateWithoutAgencyInput> | benefit_claimsCreateWithoutAgencyInput[] | benefit_claimsUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutAgencyInput | benefit_claimsCreateOrConnectWithoutAgencyInput[]
    createMany?: benefit_claimsCreateManyAgencyInputEnvelope
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
  }

  export type benefits_typesUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<benefits_typesCreateWithoutAgencyInput, benefits_typesUncheckedCreateWithoutAgencyInput> | benefits_typesCreateWithoutAgencyInput[] | benefits_typesUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: benefits_typesCreateOrConnectWithoutAgencyInput | benefits_typesCreateOrConnectWithoutAgencyInput[]
    createMany?: benefits_typesCreateManyAgencyInputEnvelope
    connect?: benefits_typesWhereUniqueInput | benefits_typesWhereUniqueInput[]
  }

  export type notificationsUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<notificationsCreateWithoutAgencyInput, notificationsUncheckedCreateWithoutAgencyInput> | notificationsCreateWithoutAgencyInput[] | notificationsUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutAgencyInput | notificationsCreateOrConnectWithoutAgencyInput[]
    createMany?: notificationsCreateManyAgencyInputEnvelope
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
  }

  export type contributionsUpdateManyWithoutSourceNestedInput = {
    create?: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput> | contributionsCreateWithoutSourceInput[] | contributionsUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutSourceInput | contributionsCreateOrConnectWithoutSourceInput[]
    upsert?: contributionsUpsertWithWhereUniqueWithoutSourceInput | contributionsUpsertWithWhereUniqueWithoutSourceInput[]
    createMany?: contributionsCreateManySourceInputEnvelope
    set?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    disconnect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    delete?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    update?: contributionsUpdateWithWhereUniqueWithoutSourceInput | contributionsUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: contributionsUpdateManyWithWhereWithoutSourceInput | contributionsUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
  }

  export type benefit_claimsUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<benefit_claimsCreateWithoutAgencyInput, benefit_claimsUncheckedCreateWithoutAgencyInput> | benefit_claimsCreateWithoutAgencyInput[] | benefit_claimsUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutAgencyInput | benefit_claimsCreateOrConnectWithoutAgencyInput[]
    upsert?: benefit_claimsUpsertWithWhereUniqueWithoutAgencyInput | benefit_claimsUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: benefit_claimsCreateManyAgencyInputEnvelope
    set?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    disconnect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    delete?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    update?: benefit_claimsUpdateWithWhereUniqueWithoutAgencyInput | benefit_claimsUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: benefit_claimsUpdateManyWithWhereWithoutAgencyInput | benefit_claimsUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: benefit_claimsScalarWhereInput | benefit_claimsScalarWhereInput[]
  }

  export type benefits_typesUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<benefits_typesCreateWithoutAgencyInput, benefits_typesUncheckedCreateWithoutAgencyInput> | benefits_typesCreateWithoutAgencyInput[] | benefits_typesUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: benefits_typesCreateOrConnectWithoutAgencyInput | benefits_typesCreateOrConnectWithoutAgencyInput[]
    upsert?: benefits_typesUpsertWithWhereUniqueWithoutAgencyInput | benefits_typesUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: benefits_typesCreateManyAgencyInputEnvelope
    set?: benefits_typesWhereUniqueInput | benefits_typesWhereUniqueInput[]
    disconnect?: benefits_typesWhereUniqueInput | benefits_typesWhereUniqueInput[]
    delete?: benefits_typesWhereUniqueInput | benefits_typesWhereUniqueInput[]
    connect?: benefits_typesWhereUniqueInput | benefits_typesWhereUniqueInput[]
    update?: benefits_typesUpdateWithWhereUniqueWithoutAgencyInput | benefits_typesUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: benefits_typesUpdateManyWithWhereWithoutAgencyInput | benefits_typesUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: benefits_typesScalarWhereInput | benefits_typesScalarWhereInput[]
  }

  export type notificationsUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<notificationsCreateWithoutAgencyInput, notificationsUncheckedCreateWithoutAgencyInput> | notificationsCreateWithoutAgencyInput[] | notificationsUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutAgencyInput | notificationsCreateOrConnectWithoutAgencyInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutAgencyInput | notificationsUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: notificationsCreateManyAgencyInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutAgencyInput | notificationsUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutAgencyInput | notificationsUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type contributionsUncheckedUpdateManyWithoutSourceNestedInput = {
    create?: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput> | contributionsCreateWithoutSourceInput[] | contributionsUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutSourceInput | contributionsCreateOrConnectWithoutSourceInput[]
    upsert?: contributionsUpsertWithWhereUniqueWithoutSourceInput | contributionsUpsertWithWhereUniqueWithoutSourceInput[]
    createMany?: contributionsCreateManySourceInputEnvelope
    set?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    disconnect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    delete?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    update?: contributionsUpdateWithWhereUniqueWithoutSourceInput | contributionsUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: contributionsUpdateManyWithWhereWithoutSourceInput | contributionsUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
  }

  export type benefit_claimsUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<benefit_claimsCreateWithoutAgencyInput, benefit_claimsUncheckedCreateWithoutAgencyInput> | benefit_claimsCreateWithoutAgencyInput[] | benefit_claimsUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutAgencyInput | benefit_claimsCreateOrConnectWithoutAgencyInput[]
    upsert?: benefit_claimsUpsertWithWhereUniqueWithoutAgencyInput | benefit_claimsUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: benefit_claimsCreateManyAgencyInputEnvelope
    set?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    disconnect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    delete?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    update?: benefit_claimsUpdateWithWhereUniqueWithoutAgencyInput | benefit_claimsUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: benefit_claimsUpdateManyWithWhereWithoutAgencyInput | benefit_claimsUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: benefit_claimsScalarWhereInput | benefit_claimsScalarWhereInput[]
  }

  export type benefits_typesUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<benefits_typesCreateWithoutAgencyInput, benefits_typesUncheckedCreateWithoutAgencyInput> | benefits_typesCreateWithoutAgencyInput[] | benefits_typesUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: benefits_typesCreateOrConnectWithoutAgencyInput | benefits_typesCreateOrConnectWithoutAgencyInput[]
    upsert?: benefits_typesUpsertWithWhereUniqueWithoutAgencyInput | benefits_typesUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: benefits_typesCreateManyAgencyInputEnvelope
    set?: benefits_typesWhereUniqueInput | benefits_typesWhereUniqueInput[]
    disconnect?: benefits_typesWhereUniqueInput | benefits_typesWhereUniqueInput[]
    delete?: benefits_typesWhereUniqueInput | benefits_typesWhereUniqueInput[]
    connect?: benefits_typesWhereUniqueInput | benefits_typesWhereUniqueInput[]
    update?: benefits_typesUpdateWithWhereUniqueWithoutAgencyInput | benefits_typesUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: benefits_typesUpdateManyWithWhereWithoutAgencyInput | benefits_typesUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: benefits_typesScalarWhereInput | benefits_typesScalarWhereInput[]
  }

  export type notificationsUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<notificationsCreateWithoutAgencyInput, notificationsUncheckedCreateWithoutAgencyInput> | notificationsCreateWithoutAgencyInput[] | notificationsUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: notificationsCreateOrConnectWithoutAgencyInput | notificationsCreateOrConnectWithoutAgencyInput[]
    upsert?: notificationsUpsertWithWhereUniqueWithoutAgencyInput | notificationsUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: notificationsCreateManyAgencyInputEnvelope
    set?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    disconnect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    delete?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    connect?: notificationsWhereUniqueInput | notificationsWhereUniqueInput[]
    update?: notificationsUpdateWithWhereUniqueWithoutAgencyInput | notificationsUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: notificationsUpdateManyWithWhereWithoutAgencyInput | notificationsUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNotificationsInput
    connect?: UsersWhereUniqueInput
  }

  export type contributionsCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<contributionsCreateWithoutNotificationsInput, contributionsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: contributionsCreateOrConnectWithoutNotificationsInput
    connect?: contributionsWhereUniqueInput
  }

  export type agency_informationCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<agency_informationCreateWithoutNotificationsInput, agency_informationUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: agency_informationCreateOrConnectWithoutNotificationsInput
    connect?: agency_informationWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNotificationsInput
    upsert?: UsersUpsertWithoutNotificationsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutNotificationsInput, UsersUpdateWithoutNotificationsInput>, UsersUncheckedUpdateWithoutNotificationsInput>
  }

  export type contributionsUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<contributionsCreateWithoutNotificationsInput, contributionsUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: contributionsCreateOrConnectWithoutNotificationsInput
    upsert?: contributionsUpsertWithoutNotificationsInput
    connect?: contributionsWhereUniqueInput
    update?: XOR<XOR<contributionsUpdateToOneWithWhereWithoutNotificationsInput, contributionsUpdateWithoutNotificationsInput>, contributionsUncheckedUpdateWithoutNotificationsInput>
  }

  export type agency_informationUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<agency_informationCreateWithoutNotificationsInput, agency_informationUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: agency_informationCreateOrConnectWithoutNotificationsInput
    upsert?: agency_informationUpsertWithoutNotificationsInput
    connect?: agency_informationWhereUniqueInput
    update?: XOR<XOR<agency_informationUpdateToOneWithWhereWithoutNotificationsInput, agency_informationUpdateWithoutNotificationsInput>, agency_informationUncheckedUpdateWithoutNotificationsInput>
  }

  export type UsersCreateNestedOneWithoutBenefit_claimsInput = {
    create?: XOR<UsersCreateWithoutBenefit_claimsInput, UsersUncheckedCreateWithoutBenefit_claimsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBenefit_claimsInput
    connect?: UsersWhereUniqueInput
  }

  export type agency_informationCreateNestedOneWithoutBenefit_claimsInput = {
    create?: XOR<agency_informationCreateWithoutBenefit_claimsInput, agency_informationUncheckedCreateWithoutBenefit_claimsInput>
    connectOrCreate?: agency_informationCreateOrConnectWithoutBenefit_claimsInput
    connect?: agency_informationWhereUniqueInput
  }

  export type benefits_typesCreateNestedOneWithoutBenefit_claimsInput = {
    create?: XOR<benefits_typesCreateWithoutBenefit_claimsInput, benefits_typesUncheckedCreateWithoutBenefit_claimsInput>
    connectOrCreate?: benefits_typesCreateOrConnectWithoutBenefit_claimsInput
    connect?: benefits_typesWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutBenefit_claimsNestedInput = {
    create?: XOR<UsersCreateWithoutBenefit_claimsInput, UsersUncheckedCreateWithoutBenefit_claimsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBenefit_claimsInput
    upsert?: UsersUpsertWithoutBenefit_claimsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutBenefit_claimsInput, UsersUpdateWithoutBenefit_claimsInput>, UsersUncheckedUpdateWithoutBenefit_claimsInput>
  }

  export type agency_informationUpdateOneRequiredWithoutBenefit_claimsNestedInput = {
    create?: XOR<agency_informationCreateWithoutBenefit_claimsInput, agency_informationUncheckedCreateWithoutBenefit_claimsInput>
    connectOrCreate?: agency_informationCreateOrConnectWithoutBenefit_claimsInput
    upsert?: agency_informationUpsertWithoutBenefit_claimsInput
    connect?: agency_informationWhereUniqueInput
    update?: XOR<XOR<agency_informationUpdateToOneWithWhereWithoutBenefit_claimsInput, agency_informationUpdateWithoutBenefit_claimsInput>, agency_informationUncheckedUpdateWithoutBenefit_claimsInput>
  }

  export type benefits_typesUpdateOneRequiredWithoutBenefit_claimsNestedInput = {
    create?: XOR<benefits_typesCreateWithoutBenefit_claimsInput, benefits_typesUncheckedCreateWithoutBenefit_claimsInput>
    connectOrCreate?: benefits_typesCreateOrConnectWithoutBenefit_claimsInput
    upsert?: benefits_typesUpsertWithoutBenefit_claimsInput
    connect?: benefits_typesWhereUniqueInput
    update?: XOR<XOR<benefits_typesUpdateToOneWithWhereWithoutBenefit_claimsInput, benefits_typesUpdateWithoutBenefit_claimsInput>, benefits_typesUncheckedUpdateWithoutBenefit_claimsInput>
  }

  export type faqs_categoryCreateNestedOneWithoutFaqInput = {
    create?: XOR<faqs_categoryCreateWithoutFaqInput, faqs_categoryUncheckedCreateWithoutFaqInput>
    connectOrCreate?: faqs_categoryCreateOrConnectWithoutFaqInput
    connect?: faqs_categoryWhereUniqueInput
  }

  export type faqs_categoryUpdateOneRequiredWithoutFaqNestedInput = {
    create?: XOR<faqs_categoryCreateWithoutFaqInput, faqs_categoryUncheckedCreateWithoutFaqInput>
    connectOrCreate?: faqs_categoryCreateOrConnectWithoutFaqInput
    upsert?: faqs_categoryUpsertWithoutFaqInput
    connect?: faqs_categoryWhereUniqueInput
    update?: XOR<XOR<faqs_categoryUpdateToOneWithWhereWithoutFaqInput, faqs_categoryUpdateWithoutFaqInput>, faqs_categoryUncheckedUpdateWithoutFaqInput>
  }

  export type agency_informationCreateNestedOneWithoutBenefits_typesInput = {
    create?: XOR<agency_informationCreateWithoutBenefits_typesInput, agency_informationUncheckedCreateWithoutBenefits_typesInput>
    connectOrCreate?: agency_informationCreateOrConnectWithoutBenefits_typesInput
    connect?: agency_informationWhereUniqueInput
  }

  export type benefit_claimsCreateNestedManyWithoutBenefits_typeInput = {
    create?: XOR<benefit_claimsCreateWithoutBenefits_typeInput, benefit_claimsUncheckedCreateWithoutBenefits_typeInput> | benefit_claimsCreateWithoutBenefits_typeInput[] | benefit_claimsUncheckedCreateWithoutBenefits_typeInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutBenefits_typeInput | benefit_claimsCreateOrConnectWithoutBenefits_typeInput[]
    createMany?: benefit_claimsCreateManyBenefits_typeInputEnvelope
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
  }

  export type benefit_claimsUncheckedCreateNestedManyWithoutBenefits_typeInput = {
    create?: XOR<benefit_claimsCreateWithoutBenefits_typeInput, benefit_claimsUncheckedCreateWithoutBenefits_typeInput> | benefit_claimsCreateWithoutBenefits_typeInput[] | benefit_claimsUncheckedCreateWithoutBenefits_typeInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutBenefits_typeInput | benefit_claimsCreateOrConnectWithoutBenefits_typeInput[]
    createMany?: benefit_claimsCreateManyBenefits_typeInputEnvelope
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
  }

  export type agency_informationUpdateOneRequiredWithoutBenefits_typesNestedInput = {
    create?: XOR<agency_informationCreateWithoutBenefits_typesInput, agency_informationUncheckedCreateWithoutBenefits_typesInput>
    connectOrCreate?: agency_informationCreateOrConnectWithoutBenefits_typesInput
    upsert?: agency_informationUpsertWithoutBenefits_typesInput
    connect?: agency_informationWhereUniqueInput
    update?: XOR<XOR<agency_informationUpdateToOneWithWhereWithoutBenefits_typesInput, agency_informationUpdateWithoutBenefits_typesInput>, agency_informationUncheckedUpdateWithoutBenefits_typesInput>
  }

  export type benefit_claimsUpdateManyWithoutBenefits_typeNestedInput = {
    create?: XOR<benefit_claimsCreateWithoutBenefits_typeInput, benefit_claimsUncheckedCreateWithoutBenefits_typeInput> | benefit_claimsCreateWithoutBenefits_typeInput[] | benefit_claimsUncheckedCreateWithoutBenefits_typeInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutBenefits_typeInput | benefit_claimsCreateOrConnectWithoutBenefits_typeInput[]
    upsert?: benefit_claimsUpsertWithWhereUniqueWithoutBenefits_typeInput | benefit_claimsUpsertWithWhereUniqueWithoutBenefits_typeInput[]
    createMany?: benefit_claimsCreateManyBenefits_typeInputEnvelope
    set?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    disconnect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    delete?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    update?: benefit_claimsUpdateWithWhereUniqueWithoutBenefits_typeInput | benefit_claimsUpdateWithWhereUniqueWithoutBenefits_typeInput[]
    updateMany?: benefit_claimsUpdateManyWithWhereWithoutBenefits_typeInput | benefit_claimsUpdateManyWithWhereWithoutBenefits_typeInput[]
    deleteMany?: benefit_claimsScalarWhereInput | benefit_claimsScalarWhereInput[]
  }

  export type benefit_claimsUncheckedUpdateManyWithoutBenefits_typeNestedInput = {
    create?: XOR<benefit_claimsCreateWithoutBenefits_typeInput, benefit_claimsUncheckedCreateWithoutBenefits_typeInput> | benefit_claimsCreateWithoutBenefits_typeInput[] | benefit_claimsUncheckedCreateWithoutBenefits_typeInput[]
    connectOrCreate?: benefit_claimsCreateOrConnectWithoutBenefits_typeInput | benefit_claimsCreateOrConnectWithoutBenefits_typeInput[]
    upsert?: benefit_claimsUpsertWithWhereUniqueWithoutBenefits_typeInput | benefit_claimsUpsertWithWhereUniqueWithoutBenefits_typeInput[]
    createMany?: benefit_claimsCreateManyBenefits_typeInputEnvelope
    set?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    disconnect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    delete?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    connect?: benefit_claimsWhereUniqueInput | benefit_claimsWhereUniqueInput[]
    update?: benefit_claimsUpdateWithWhereUniqueWithoutBenefits_typeInput | benefit_claimsUpdateWithWhereUniqueWithoutBenefits_typeInput[]
    updateMany?: benefit_claimsUpdateManyWithWhereWithoutBenefits_typeInput | benefit_claimsUpdateManyWithWhereWithoutBenefits_typeInput[]
    deleteMany?: benefit_claimsScalarWhereInput | benefit_claimsScalarWhereInput[]
  }

  export type faqCreateNestedManyWithoutCategoryInput = {
    create?: XOR<faqCreateWithoutCategoryInput, faqUncheckedCreateWithoutCategoryInput> | faqCreateWithoutCategoryInput[] | faqUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: faqCreateOrConnectWithoutCategoryInput | faqCreateOrConnectWithoutCategoryInput[]
    createMany?: faqCreateManyCategoryInputEnvelope
    connect?: faqWhereUniqueInput | faqWhereUniqueInput[]
  }

  export type faqUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<faqCreateWithoutCategoryInput, faqUncheckedCreateWithoutCategoryInput> | faqCreateWithoutCategoryInput[] | faqUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: faqCreateOrConnectWithoutCategoryInput | faqCreateOrConnectWithoutCategoryInput[]
    createMany?: faqCreateManyCategoryInputEnvelope
    connect?: faqWhereUniqueInput | faqWhereUniqueInput[]
  }

  export type faqUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<faqCreateWithoutCategoryInput, faqUncheckedCreateWithoutCategoryInput> | faqCreateWithoutCategoryInput[] | faqUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: faqCreateOrConnectWithoutCategoryInput | faqCreateOrConnectWithoutCategoryInput[]
    upsert?: faqUpsertWithWhereUniqueWithoutCategoryInput | faqUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: faqCreateManyCategoryInputEnvelope
    set?: faqWhereUniqueInput | faqWhereUniqueInput[]
    disconnect?: faqWhereUniqueInput | faqWhereUniqueInput[]
    delete?: faqWhereUniqueInput | faqWhereUniqueInput[]
    connect?: faqWhereUniqueInput | faqWhereUniqueInput[]
    update?: faqUpdateWithWhereUniqueWithoutCategoryInput | faqUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: faqUpdateManyWithWhereWithoutCategoryInput | faqUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: faqScalarWhereInput | faqScalarWhereInput[]
  }

  export type faqUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<faqCreateWithoutCategoryInput, faqUncheckedCreateWithoutCategoryInput> | faqCreateWithoutCategoryInput[] | faqUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: faqCreateOrConnectWithoutCategoryInput | faqCreateOrConnectWithoutCategoryInput[]
    upsert?: faqUpsertWithWhereUniqueWithoutCategoryInput | faqUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: faqCreateManyCategoryInputEnvelope
    set?: faqWhereUniqueInput | faqWhereUniqueInput[]
    disconnect?: faqWhereUniqueInput | faqWhereUniqueInput[]
    delete?: faqWhereUniqueInput | faqWhereUniqueInput[]
    connect?: faqWhereUniqueInput | faqWhereUniqueInput[]
    update?: faqUpdateWithWhereUniqueWithoutCategoryInput | faqUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: faqUpdateManyWithWhereWithoutCategoryInput | faqUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: faqScalarWhereInput | faqScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutSecurity_questionsInput = {
    create?: XOR<UsersCreateWithoutSecurity_questionsInput, UsersUncheckedCreateWithoutSecurity_questionsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSecurity_questionsInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutSecurity_questionsNestedInput = {
    create?: XOR<UsersCreateWithoutSecurity_questionsInput, UsersUncheckedCreateWithoutSecurity_questionsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSecurity_questionsInput
    upsert?: UsersUpsertWithoutSecurity_questionsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSecurity_questionsInput, UsersUpdateWithoutSecurity_questionsInput>, UsersUncheckedUpdateWithoutSecurity_questionsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type contributionsCreateWithoutUserInput = {
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    source: agency_informationCreateNestedOneWithoutContributionsInput
    notifications?: notificationsCreateNestedManyWithoutContributionsInput
  }

  export type contributionsUncheckedCreateWithoutUserInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    agency_id: number
    notifications?: notificationsUncheckedCreateNestedManyWithoutContributionsInput
  }

  export type contributionsCreateOrConnectWithoutUserInput = {
    where: contributionsWhereUniqueInput
    create: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput>
  }

  export type contributionsCreateManyUserInputEnvelope = {
    data: contributionsCreateManyUserInput | contributionsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type notificationsCreateWithoutUserInput = {
    message: string
    is_read: number
    created_at?: Date | string
    contributions: contributionsCreateNestedOneWithoutNotificationsInput
    agency: agency_informationCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutUserInput = {
    notification_id?: number
    message: string
    is_read: number
    created_at?: Date | string
    Contribution_id: number
    agency_id: number
  }

  export type notificationsCreateOrConnectWithoutUserInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput>
  }

  export type notificationsCreateManyUserInputEnvelope = {
    data: notificationsCreateManyUserInput | notificationsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type benefit_claimsCreateWithoutUsersInput = {
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    agency: agency_informationCreateNestedOneWithoutBenefit_claimsInput
    benefits_type: benefits_typesCreateNestedOneWithoutBenefit_claimsInput
  }

  export type benefit_claimsUncheckedCreateWithoutUsersInput = {
    claim_id?: number
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    agency_id: number
    btype_id: number
  }

  export type benefit_claimsCreateOrConnectWithoutUsersInput = {
    where: benefit_claimsWhereUniqueInput
    create: XOR<benefit_claimsCreateWithoutUsersInput, benefit_claimsUncheckedCreateWithoutUsersInput>
  }

  export type benefit_claimsCreateManyUsersInputEnvelope = {
    data: benefit_claimsCreateManyUsersInput | benefit_claimsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type user_infoCreateWithoutUserInput = {
    first_name: string
    middle_name: string
    last_name: string
    suffix?: string | null
    DOB: Date | string
    relationship: string
    contact_number?: string | null
    user_sex?: string | null
    education?: string | null
  }

  export type user_infoUncheckedCreateWithoutUserInput = {
    id?: number
    first_name: string
    middle_name: string
    last_name: string
    suffix?: string | null
    DOB: Date | string
    relationship: string
    contact_number?: string | null
    user_sex?: string | null
    education?: string | null
  }

  export type user_infoCreateOrConnectWithoutUserInput = {
    where: user_infoWhereUniqueInput
    create: XOR<user_infoCreateWithoutUserInput, user_infoUncheckedCreateWithoutUserInput>
  }

  export type user_infoCreateManyUserInputEnvelope = {
    data: user_infoCreateManyUserInput | user_infoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type user_security_questionsCreateWithoutUsersInput = {
    question: string
    answer: string
    create_at?: Date | string
  }

  export type user_security_questionsUncheckedCreateWithoutUsersInput = {
    id?: number
    question: string
    answer: string
    create_at?: Date | string
  }

  export type user_security_questionsCreateOrConnectWithoutUsersInput = {
    where: user_security_questionsWhereUniqueInput
    create: XOR<user_security_questionsCreateWithoutUsersInput, user_security_questionsUncheckedCreateWithoutUsersInput>
  }

  export type user_security_questionsCreateManyUsersInputEnvelope = {
    data: user_security_questionsCreateManyUsersInput | user_security_questionsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type contributionsUpsertWithWhereUniqueWithoutUserInput = {
    where: contributionsWhereUniqueInput
    update: XOR<contributionsUpdateWithoutUserInput, contributionsUncheckedUpdateWithoutUserInput>
    create: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput>
  }

  export type contributionsUpdateWithWhereUniqueWithoutUserInput = {
    where: contributionsWhereUniqueInput
    data: XOR<contributionsUpdateWithoutUserInput, contributionsUncheckedUpdateWithoutUserInput>
  }

  export type contributionsUpdateManyWithWhereWithoutUserInput = {
    where: contributionsScalarWhereInput
    data: XOR<contributionsUpdateManyMutationInput, contributionsUncheckedUpdateManyWithoutUserInput>
  }

  export type contributionsScalarWhereInput = {
    AND?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
    OR?: contributionsScalarWhereInput[]
    NOT?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
    contribution_id?: IntFilter<"contributions"> | number
    amount?: DecimalFilter<"contributions"> | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFilter<"contributions"> | Date | string
    status?: StringFilter<"contributions"> | string
    userID?: IntFilter<"contributions"> | number
    agency_id?: IntFilter<"contributions"> | number
  }

  export type notificationsUpsertWithWhereUniqueWithoutUserInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutUserInput, notificationsUncheckedUpdateWithoutUserInput>
    create: XOR<notificationsCreateWithoutUserInput, notificationsUncheckedCreateWithoutUserInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutUserInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutUserInput, notificationsUncheckedUpdateWithoutUserInput>
  }

  export type notificationsUpdateManyWithWhereWithoutUserInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutUserInput>
  }

  export type notificationsScalarWhereInput = {
    AND?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
    OR?: notificationsScalarWhereInput[]
    NOT?: notificationsScalarWhereInput | notificationsScalarWhereInput[]
    notification_id?: IntFilter<"notifications"> | number
    message?: StringFilter<"notifications"> | string
    is_read?: IntFilter<"notifications"> | number
    created_at?: DateTimeFilter<"notifications"> | Date | string
    user_id?: IntFilter<"notifications"> | number
    Contribution_id?: IntFilter<"notifications"> | number
    agency_id?: IntFilter<"notifications"> | number
  }

  export type benefit_claimsUpsertWithWhereUniqueWithoutUsersInput = {
    where: benefit_claimsWhereUniqueInput
    update: XOR<benefit_claimsUpdateWithoutUsersInput, benefit_claimsUncheckedUpdateWithoutUsersInput>
    create: XOR<benefit_claimsCreateWithoutUsersInput, benefit_claimsUncheckedCreateWithoutUsersInput>
  }

  export type benefit_claimsUpdateWithWhereUniqueWithoutUsersInput = {
    where: benefit_claimsWhereUniqueInput
    data: XOR<benefit_claimsUpdateWithoutUsersInput, benefit_claimsUncheckedUpdateWithoutUsersInput>
  }

  export type benefit_claimsUpdateManyWithWhereWithoutUsersInput = {
    where: benefit_claimsScalarWhereInput
    data: XOR<benefit_claimsUpdateManyMutationInput, benefit_claimsUncheckedUpdateManyWithoutUsersInput>
  }

  export type benefit_claimsScalarWhereInput = {
    AND?: benefit_claimsScalarWhereInput | benefit_claimsScalarWhereInput[]
    OR?: benefit_claimsScalarWhereInput[]
    NOT?: benefit_claimsScalarWhereInput | benefit_claimsScalarWhereInput[]
    claim_id?: IntFilter<"benefit_claims"> | number
    claim_amount?: DecimalFilter<"benefit_claims"> | Decimal | DecimalJsLike | number | string
    claim_status?: IntFilter<"benefit_claims"> | number
    submitted_at?: DateTimeFilter<"benefit_claims"> | Date | string
    processed_at?: DateTimeNullableFilter<"benefit_claims"> | Date | string | null
    remarks?: StringFilter<"benefit_claims"> | string
    userID?: IntFilter<"benefit_claims"> | number
    agency_id?: IntFilter<"benefit_claims"> | number
    btype_id?: IntFilter<"benefit_claims"> | number
  }

  export type user_infoUpsertWithWhereUniqueWithoutUserInput = {
    where: user_infoWhereUniqueInput
    update: XOR<user_infoUpdateWithoutUserInput, user_infoUncheckedUpdateWithoutUserInput>
    create: XOR<user_infoCreateWithoutUserInput, user_infoUncheckedCreateWithoutUserInput>
  }

  export type user_infoUpdateWithWhereUniqueWithoutUserInput = {
    where: user_infoWhereUniqueInput
    data: XOR<user_infoUpdateWithoutUserInput, user_infoUncheckedUpdateWithoutUserInput>
  }

  export type user_infoUpdateManyWithWhereWithoutUserInput = {
    where: user_infoScalarWhereInput
    data: XOR<user_infoUpdateManyMutationInput, user_infoUncheckedUpdateManyWithoutUserInput>
  }

  export type user_infoScalarWhereInput = {
    AND?: user_infoScalarWhereInput | user_infoScalarWhereInput[]
    OR?: user_infoScalarWhereInput[]
    NOT?: user_infoScalarWhereInput | user_infoScalarWhereInput[]
    id?: IntFilter<"user_info"> | number
    first_name?: StringFilter<"user_info"> | string
    middle_name?: StringFilter<"user_info"> | string
    last_name?: StringFilter<"user_info"> | string
    suffix?: StringNullableFilter<"user_info"> | string | null
    DOB?: DateTimeFilter<"user_info"> | Date | string
    relationship?: StringFilter<"user_info"> | string
    contact_number?: StringNullableFilter<"user_info"> | string | null
    user_sex?: StringNullableFilter<"user_info"> | string | null
    education?: StringNullableFilter<"user_info"> | string | null
    users_id?: IntFilter<"user_info"> | number
  }

  export type user_security_questionsUpsertWithWhereUniqueWithoutUsersInput = {
    where: user_security_questionsWhereUniqueInput
    update: XOR<user_security_questionsUpdateWithoutUsersInput, user_security_questionsUncheckedUpdateWithoutUsersInput>
    create: XOR<user_security_questionsCreateWithoutUsersInput, user_security_questionsUncheckedCreateWithoutUsersInput>
  }

  export type user_security_questionsUpdateWithWhereUniqueWithoutUsersInput = {
    where: user_security_questionsWhereUniqueInput
    data: XOR<user_security_questionsUpdateWithoutUsersInput, user_security_questionsUncheckedUpdateWithoutUsersInput>
  }

  export type user_security_questionsUpdateManyWithWhereWithoutUsersInput = {
    where: user_security_questionsScalarWhereInput
    data: XOR<user_security_questionsUpdateManyMutationInput, user_security_questionsUncheckedUpdateManyWithoutUsersInput>
  }

  export type user_security_questionsScalarWhereInput = {
    AND?: user_security_questionsScalarWhereInput | user_security_questionsScalarWhereInput[]
    OR?: user_security_questionsScalarWhereInput[]
    NOT?: user_security_questionsScalarWhereInput | user_security_questionsScalarWhereInput[]
    id?: IntFilter<"user_security_questions"> | number
    question?: StringFilter<"user_security_questions"> | string
    answer?: StringFilter<"user_security_questions"> | string
    create_at?: DateTimeFilter<"user_security_questions"> | Date | string
    UserID?: IntFilter<"user_security_questions"> | number
  }

  export type UsersCreateWithoutUser_infoInput = {
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    contributions?: contributionsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    benefit_claims?: benefit_claimsCreateNestedManyWithoutUsersInput
    security_questions?: user_security_questionsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutUser_infoInput = {
    userID?: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    contributions?: contributionsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutUsersInput
    security_questions?: user_security_questionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutUser_infoInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUser_infoInput, UsersUncheckedCreateWithoutUser_infoInput>
  }

  export type UsersUpsertWithoutUser_infoInput = {
    update: XOR<UsersUpdateWithoutUser_infoInput, UsersUncheckedUpdateWithoutUser_infoInput>
    create: XOR<UsersCreateWithoutUser_infoInput, UsersUncheckedCreateWithoutUser_infoInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutUser_infoInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutUser_infoInput, UsersUncheckedUpdateWithoutUser_infoInput>
  }

  export type UsersUpdateWithoutUser_infoInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: contributionsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    benefit_claims?: benefit_claimsUpdateManyWithoutUsersNestedInput
    security_questions?: user_security_questionsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutUser_infoInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: contributionsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutUsersNestedInput
    security_questions?: user_security_questionsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type agency_informationCreateWithoutContributionsInput = {
    agency_name: string
    description: string
    contact_info: string
    benefit_claims?: benefit_claimsCreateNestedManyWithoutAgencyInput
    benefits_types?: benefits_typesCreateNestedManyWithoutAgencyInput
    notifications?: notificationsCreateNestedManyWithoutAgencyInput
  }

  export type agency_informationUncheckedCreateWithoutContributionsInput = {
    agency_id?: number
    agency_name: string
    description: string
    contact_info: string
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutAgencyInput
    benefits_types?: benefits_typesUncheckedCreateNestedManyWithoutAgencyInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type agency_informationCreateOrConnectWithoutContributionsInput = {
    where: agency_informationWhereUniqueInput
    create: XOR<agency_informationCreateWithoutContributionsInput, agency_informationUncheckedCreateWithoutContributionsInput>
  }

  export type UsersCreateWithoutContributionsInput = {
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    notifications?: notificationsCreateNestedManyWithoutUserInput
    benefit_claims?: benefit_claimsCreateNestedManyWithoutUsersInput
    user_info?: user_infoCreateNestedManyWithoutUserInput
    security_questions?: user_security_questionsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutContributionsInput = {
    userID?: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutUsersInput
    user_info?: user_infoUncheckedCreateNestedManyWithoutUserInput
    security_questions?: user_security_questionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutContributionsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutContributionsInput, UsersUncheckedCreateWithoutContributionsInput>
  }

  export type notificationsCreateWithoutContributionsInput = {
    message: string
    is_read: number
    created_at?: Date | string
    user: UsersCreateNestedOneWithoutNotificationsInput
    agency: agency_informationCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutContributionsInput = {
    notification_id?: number
    message: string
    is_read: number
    created_at?: Date | string
    user_id: number
    agency_id: number
  }

  export type notificationsCreateOrConnectWithoutContributionsInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutContributionsInput, notificationsUncheckedCreateWithoutContributionsInput>
  }

  export type notificationsCreateManyContributionsInputEnvelope = {
    data: notificationsCreateManyContributionsInput | notificationsCreateManyContributionsInput[]
    skipDuplicates?: boolean
  }

  export type agency_informationUpsertWithoutContributionsInput = {
    update: XOR<agency_informationUpdateWithoutContributionsInput, agency_informationUncheckedUpdateWithoutContributionsInput>
    create: XOR<agency_informationCreateWithoutContributionsInput, agency_informationUncheckedCreateWithoutContributionsInput>
    where?: agency_informationWhereInput
  }

  export type agency_informationUpdateToOneWithWhereWithoutContributionsInput = {
    where?: agency_informationWhereInput
    data: XOR<agency_informationUpdateWithoutContributionsInput, agency_informationUncheckedUpdateWithoutContributionsInput>
  }

  export type agency_informationUpdateWithoutContributionsInput = {
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    benefit_claims?: benefit_claimsUpdateManyWithoutAgencyNestedInput
    benefits_types?: benefits_typesUpdateManyWithoutAgencyNestedInput
    notifications?: notificationsUpdateManyWithoutAgencyNestedInput
  }

  export type agency_informationUncheckedUpdateWithoutContributionsInput = {
    agency_id?: IntFieldUpdateOperationsInput | number
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutAgencyNestedInput
    benefits_types?: benefits_typesUncheckedUpdateManyWithoutAgencyNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type UsersUpsertWithoutContributionsInput = {
    update: XOR<UsersUpdateWithoutContributionsInput, UsersUncheckedUpdateWithoutContributionsInput>
    create: XOR<UsersCreateWithoutContributionsInput, UsersUncheckedCreateWithoutContributionsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutContributionsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutContributionsInput, UsersUncheckedUpdateWithoutContributionsInput>
  }

  export type UsersUpdateWithoutContributionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    benefit_claims?: benefit_claimsUpdateManyWithoutUsersNestedInput
    user_info?: user_infoUpdateManyWithoutUserNestedInput
    security_questions?: user_security_questionsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutContributionsInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutUsersNestedInput
    user_info?: user_infoUncheckedUpdateManyWithoutUserNestedInput
    security_questions?: user_security_questionsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type notificationsUpsertWithWhereUniqueWithoutContributionsInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutContributionsInput, notificationsUncheckedUpdateWithoutContributionsInput>
    create: XOR<notificationsCreateWithoutContributionsInput, notificationsUncheckedCreateWithoutContributionsInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutContributionsInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutContributionsInput, notificationsUncheckedUpdateWithoutContributionsInput>
  }

  export type notificationsUpdateManyWithWhereWithoutContributionsInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutContributionsInput>
  }

  export type contributionsCreateWithoutSourceInput = {
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    user: UsersCreateNestedOneWithoutContributionsInput
    notifications?: notificationsCreateNestedManyWithoutContributionsInput
  }

  export type contributionsUncheckedCreateWithoutSourceInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    userID: number
    notifications?: notificationsUncheckedCreateNestedManyWithoutContributionsInput
  }

  export type contributionsCreateOrConnectWithoutSourceInput = {
    where: contributionsWhereUniqueInput
    create: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput>
  }

  export type contributionsCreateManySourceInputEnvelope = {
    data: contributionsCreateManySourceInput | contributionsCreateManySourceInput[]
    skipDuplicates?: boolean
  }

  export type benefit_claimsCreateWithoutAgencyInput = {
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    users: UsersCreateNestedOneWithoutBenefit_claimsInput
    benefits_type: benefits_typesCreateNestedOneWithoutBenefit_claimsInput
  }

  export type benefit_claimsUncheckedCreateWithoutAgencyInput = {
    claim_id?: number
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    userID: number
    btype_id: number
  }

  export type benefit_claimsCreateOrConnectWithoutAgencyInput = {
    where: benefit_claimsWhereUniqueInput
    create: XOR<benefit_claimsCreateWithoutAgencyInput, benefit_claimsUncheckedCreateWithoutAgencyInput>
  }

  export type benefit_claimsCreateManyAgencyInputEnvelope = {
    data: benefit_claimsCreateManyAgencyInput | benefit_claimsCreateManyAgencyInput[]
    skipDuplicates?: boolean
  }

  export type benefits_typesCreateWithoutAgencyInput = {
    title: string
    content: string
    required_month: number
    benefit_claims?: benefit_claimsCreateNestedManyWithoutBenefits_typeInput
  }

  export type benefits_typesUncheckedCreateWithoutAgencyInput = {
    btypes_id?: number
    title: string
    content: string
    required_month: number
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutBenefits_typeInput
  }

  export type benefits_typesCreateOrConnectWithoutAgencyInput = {
    where: benefits_typesWhereUniqueInput
    create: XOR<benefits_typesCreateWithoutAgencyInput, benefits_typesUncheckedCreateWithoutAgencyInput>
  }

  export type benefits_typesCreateManyAgencyInputEnvelope = {
    data: benefits_typesCreateManyAgencyInput | benefits_typesCreateManyAgencyInput[]
    skipDuplicates?: boolean
  }

  export type notificationsCreateWithoutAgencyInput = {
    message: string
    is_read: number
    created_at?: Date | string
    user: UsersCreateNestedOneWithoutNotificationsInput
    contributions: contributionsCreateNestedOneWithoutNotificationsInput
  }

  export type notificationsUncheckedCreateWithoutAgencyInput = {
    notification_id?: number
    message: string
    is_read: number
    created_at?: Date | string
    user_id: number
    Contribution_id: number
  }

  export type notificationsCreateOrConnectWithoutAgencyInput = {
    where: notificationsWhereUniqueInput
    create: XOR<notificationsCreateWithoutAgencyInput, notificationsUncheckedCreateWithoutAgencyInput>
  }

  export type notificationsCreateManyAgencyInputEnvelope = {
    data: notificationsCreateManyAgencyInput | notificationsCreateManyAgencyInput[]
    skipDuplicates?: boolean
  }

  export type contributionsUpsertWithWhereUniqueWithoutSourceInput = {
    where: contributionsWhereUniqueInput
    update: XOR<contributionsUpdateWithoutSourceInput, contributionsUncheckedUpdateWithoutSourceInput>
    create: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput>
  }

  export type contributionsUpdateWithWhereUniqueWithoutSourceInput = {
    where: contributionsWhereUniqueInput
    data: XOR<contributionsUpdateWithoutSourceInput, contributionsUncheckedUpdateWithoutSourceInput>
  }

  export type contributionsUpdateManyWithWhereWithoutSourceInput = {
    where: contributionsScalarWhereInput
    data: XOR<contributionsUpdateManyMutationInput, contributionsUncheckedUpdateManyWithoutSourceInput>
  }

  export type benefit_claimsUpsertWithWhereUniqueWithoutAgencyInput = {
    where: benefit_claimsWhereUniqueInput
    update: XOR<benefit_claimsUpdateWithoutAgencyInput, benefit_claimsUncheckedUpdateWithoutAgencyInput>
    create: XOR<benefit_claimsCreateWithoutAgencyInput, benefit_claimsUncheckedCreateWithoutAgencyInput>
  }

  export type benefit_claimsUpdateWithWhereUniqueWithoutAgencyInput = {
    where: benefit_claimsWhereUniqueInput
    data: XOR<benefit_claimsUpdateWithoutAgencyInput, benefit_claimsUncheckedUpdateWithoutAgencyInput>
  }

  export type benefit_claimsUpdateManyWithWhereWithoutAgencyInput = {
    where: benefit_claimsScalarWhereInput
    data: XOR<benefit_claimsUpdateManyMutationInput, benefit_claimsUncheckedUpdateManyWithoutAgencyInput>
  }

  export type benefits_typesUpsertWithWhereUniqueWithoutAgencyInput = {
    where: benefits_typesWhereUniqueInput
    update: XOR<benefits_typesUpdateWithoutAgencyInput, benefits_typesUncheckedUpdateWithoutAgencyInput>
    create: XOR<benefits_typesCreateWithoutAgencyInput, benefits_typesUncheckedCreateWithoutAgencyInput>
  }

  export type benefits_typesUpdateWithWhereUniqueWithoutAgencyInput = {
    where: benefits_typesWhereUniqueInput
    data: XOR<benefits_typesUpdateWithoutAgencyInput, benefits_typesUncheckedUpdateWithoutAgencyInput>
  }

  export type benefits_typesUpdateManyWithWhereWithoutAgencyInput = {
    where: benefits_typesScalarWhereInput
    data: XOR<benefits_typesUpdateManyMutationInput, benefits_typesUncheckedUpdateManyWithoutAgencyInput>
  }

  export type benefits_typesScalarWhereInput = {
    AND?: benefits_typesScalarWhereInput | benefits_typesScalarWhereInput[]
    OR?: benefits_typesScalarWhereInput[]
    NOT?: benefits_typesScalarWhereInput | benefits_typesScalarWhereInput[]
    btypes_id?: IntFilter<"benefits_types"> | number
    title?: StringFilter<"benefits_types"> | string
    content?: StringFilter<"benefits_types"> | string
    required_month?: IntFilter<"benefits_types"> | number
    agency_id?: IntFilter<"benefits_types"> | number
  }

  export type notificationsUpsertWithWhereUniqueWithoutAgencyInput = {
    where: notificationsWhereUniqueInput
    update: XOR<notificationsUpdateWithoutAgencyInput, notificationsUncheckedUpdateWithoutAgencyInput>
    create: XOR<notificationsCreateWithoutAgencyInput, notificationsUncheckedCreateWithoutAgencyInput>
  }

  export type notificationsUpdateWithWhereUniqueWithoutAgencyInput = {
    where: notificationsWhereUniqueInput
    data: XOR<notificationsUpdateWithoutAgencyInput, notificationsUncheckedUpdateWithoutAgencyInput>
  }

  export type notificationsUpdateManyWithWhereWithoutAgencyInput = {
    where: notificationsScalarWhereInput
    data: XOR<notificationsUpdateManyMutationInput, notificationsUncheckedUpdateManyWithoutAgencyInput>
  }

  export type UsersCreateWithoutNotificationsInput = {
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    contributions?: contributionsCreateNestedManyWithoutUserInput
    benefit_claims?: benefit_claimsCreateNestedManyWithoutUsersInput
    user_info?: user_infoCreateNestedManyWithoutUserInput
    security_questions?: user_security_questionsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutNotificationsInput = {
    userID?: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    contributions?: contributionsUncheckedCreateNestedManyWithoutUserInput
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutUsersInput
    user_info?: user_infoUncheckedCreateNestedManyWithoutUserInput
    security_questions?: user_security_questionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutNotificationsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
  }

  export type contributionsCreateWithoutNotificationsInput = {
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    source: agency_informationCreateNestedOneWithoutContributionsInput
    user: UsersCreateNestedOneWithoutContributionsInput
  }

  export type contributionsUncheckedCreateWithoutNotificationsInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    userID: number
    agency_id: number
  }

  export type contributionsCreateOrConnectWithoutNotificationsInput = {
    where: contributionsWhereUniqueInput
    create: XOR<contributionsCreateWithoutNotificationsInput, contributionsUncheckedCreateWithoutNotificationsInput>
  }

  export type agency_informationCreateWithoutNotificationsInput = {
    agency_name: string
    description: string
    contact_info: string
    contributions?: contributionsCreateNestedManyWithoutSourceInput
    benefit_claims?: benefit_claimsCreateNestedManyWithoutAgencyInput
    benefits_types?: benefits_typesCreateNestedManyWithoutAgencyInput
  }

  export type agency_informationUncheckedCreateWithoutNotificationsInput = {
    agency_id?: number
    agency_name: string
    description: string
    contact_info: string
    contributions?: contributionsUncheckedCreateNestedManyWithoutSourceInput
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutAgencyInput
    benefits_types?: benefits_typesUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type agency_informationCreateOrConnectWithoutNotificationsInput = {
    where: agency_informationWhereUniqueInput
    create: XOR<agency_informationCreateWithoutNotificationsInput, agency_informationUncheckedCreateWithoutNotificationsInput>
  }

  export type UsersUpsertWithoutNotificationsInput = {
    update: XOR<UsersUpdateWithoutNotificationsInput, UsersUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutNotificationsInput, UsersUncheckedUpdateWithoutNotificationsInput>
  }

  export type UsersUpdateWithoutNotificationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: contributionsUpdateManyWithoutUserNestedInput
    benefit_claims?: benefit_claimsUpdateManyWithoutUsersNestedInput
    user_info?: user_infoUpdateManyWithoutUserNestedInput
    security_questions?: user_security_questionsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutNotificationsInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: contributionsUncheckedUpdateManyWithoutUserNestedInput
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutUsersNestedInput
    user_info?: user_infoUncheckedUpdateManyWithoutUserNestedInput
    security_questions?: user_security_questionsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type contributionsUpsertWithoutNotificationsInput = {
    update: XOR<contributionsUpdateWithoutNotificationsInput, contributionsUncheckedUpdateWithoutNotificationsInput>
    create: XOR<contributionsCreateWithoutNotificationsInput, contributionsUncheckedCreateWithoutNotificationsInput>
    where?: contributionsWhereInput
  }

  export type contributionsUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: contributionsWhereInput
    data: XOR<contributionsUpdateWithoutNotificationsInput, contributionsUncheckedUpdateWithoutNotificationsInput>
  }

  export type contributionsUpdateWithoutNotificationsInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: agency_informationUpdateOneRequiredWithoutContributionsNestedInput
    user?: UsersUpdateOneRequiredWithoutContributionsNestedInput
  }

  export type contributionsUncheckedUpdateWithoutNotificationsInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type agency_informationUpsertWithoutNotificationsInput = {
    update: XOR<agency_informationUpdateWithoutNotificationsInput, agency_informationUncheckedUpdateWithoutNotificationsInput>
    create: XOR<agency_informationCreateWithoutNotificationsInput, agency_informationUncheckedCreateWithoutNotificationsInput>
    where?: agency_informationWhereInput
  }

  export type agency_informationUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: agency_informationWhereInput
    data: XOR<agency_informationUpdateWithoutNotificationsInput, agency_informationUncheckedUpdateWithoutNotificationsInput>
  }

  export type agency_informationUpdateWithoutNotificationsInput = {
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    contributions?: contributionsUpdateManyWithoutSourceNestedInput
    benefit_claims?: benefit_claimsUpdateManyWithoutAgencyNestedInput
    benefits_types?: benefits_typesUpdateManyWithoutAgencyNestedInput
  }

  export type agency_informationUncheckedUpdateWithoutNotificationsInput = {
    agency_id?: IntFieldUpdateOperationsInput | number
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    contributions?: contributionsUncheckedUpdateManyWithoutSourceNestedInput
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutAgencyNestedInput
    benefits_types?: benefits_typesUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type UsersCreateWithoutBenefit_claimsInput = {
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    contributions?: contributionsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    user_info?: user_infoCreateNestedManyWithoutUserInput
    security_questions?: user_security_questionsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutBenefit_claimsInput = {
    userID?: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    contributions?: contributionsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    user_info?: user_infoUncheckedCreateNestedManyWithoutUserInput
    security_questions?: user_security_questionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutBenefit_claimsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBenefit_claimsInput, UsersUncheckedCreateWithoutBenefit_claimsInput>
  }

  export type agency_informationCreateWithoutBenefit_claimsInput = {
    agency_name: string
    description: string
    contact_info: string
    contributions?: contributionsCreateNestedManyWithoutSourceInput
    benefits_types?: benefits_typesCreateNestedManyWithoutAgencyInput
    notifications?: notificationsCreateNestedManyWithoutAgencyInput
  }

  export type agency_informationUncheckedCreateWithoutBenefit_claimsInput = {
    agency_id?: number
    agency_name: string
    description: string
    contact_info: string
    contributions?: contributionsUncheckedCreateNestedManyWithoutSourceInput
    benefits_types?: benefits_typesUncheckedCreateNestedManyWithoutAgencyInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type agency_informationCreateOrConnectWithoutBenefit_claimsInput = {
    where: agency_informationWhereUniqueInput
    create: XOR<agency_informationCreateWithoutBenefit_claimsInput, agency_informationUncheckedCreateWithoutBenefit_claimsInput>
  }

  export type benefits_typesCreateWithoutBenefit_claimsInput = {
    title: string
    content: string
    required_month: number
    agency: agency_informationCreateNestedOneWithoutBenefits_typesInput
  }

  export type benefits_typesUncheckedCreateWithoutBenefit_claimsInput = {
    btypes_id?: number
    title: string
    content: string
    required_month: number
    agency_id: number
  }

  export type benefits_typesCreateOrConnectWithoutBenefit_claimsInput = {
    where: benefits_typesWhereUniqueInput
    create: XOR<benefits_typesCreateWithoutBenefit_claimsInput, benefits_typesUncheckedCreateWithoutBenefit_claimsInput>
  }

  export type UsersUpsertWithoutBenefit_claimsInput = {
    update: XOR<UsersUpdateWithoutBenefit_claimsInput, UsersUncheckedUpdateWithoutBenefit_claimsInput>
    create: XOR<UsersCreateWithoutBenefit_claimsInput, UsersUncheckedCreateWithoutBenefit_claimsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutBenefit_claimsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutBenefit_claimsInput, UsersUncheckedUpdateWithoutBenefit_claimsInput>
  }

  export type UsersUpdateWithoutBenefit_claimsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: contributionsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    user_info?: user_infoUpdateManyWithoutUserNestedInput
    security_questions?: user_security_questionsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutBenefit_claimsInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: contributionsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    user_info?: user_infoUncheckedUpdateManyWithoutUserNestedInput
    security_questions?: user_security_questionsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type agency_informationUpsertWithoutBenefit_claimsInput = {
    update: XOR<agency_informationUpdateWithoutBenefit_claimsInput, agency_informationUncheckedUpdateWithoutBenefit_claimsInput>
    create: XOR<agency_informationCreateWithoutBenefit_claimsInput, agency_informationUncheckedCreateWithoutBenefit_claimsInput>
    where?: agency_informationWhereInput
  }

  export type agency_informationUpdateToOneWithWhereWithoutBenefit_claimsInput = {
    where?: agency_informationWhereInput
    data: XOR<agency_informationUpdateWithoutBenefit_claimsInput, agency_informationUncheckedUpdateWithoutBenefit_claimsInput>
  }

  export type agency_informationUpdateWithoutBenefit_claimsInput = {
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    contributions?: contributionsUpdateManyWithoutSourceNestedInput
    benefits_types?: benefits_typesUpdateManyWithoutAgencyNestedInput
    notifications?: notificationsUpdateManyWithoutAgencyNestedInput
  }

  export type agency_informationUncheckedUpdateWithoutBenefit_claimsInput = {
    agency_id?: IntFieldUpdateOperationsInput | number
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    contributions?: contributionsUncheckedUpdateManyWithoutSourceNestedInput
    benefits_types?: benefits_typesUncheckedUpdateManyWithoutAgencyNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type benefits_typesUpsertWithoutBenefit_claimsInput = {
    update: XOR<benefits_typesUpdateWithoutBenefit_claimsInput, benefits_typesUncheckedUpdateWithoutBenefit_claimsInput>
    create: XOR<benefits_typesCreateWithoutBenefit_claimsInput, benefits_typesUncheckedCreateWithoutBenefit_claimsInput>
    where?: benefits_typesWhereInput
  }

  export type benefits_typesUpdateToOneWithWhereWithoutBenefit_claimsInput = {
    where?: benefits_typesWhereInput
    data: XOR<benefits_typesUpdateWithoutBenefit_claimsInput, benefits_typesUncheckedUpdateWithoutBenefit_claimsInput>
  }

  export type benefits_typesUpdateWithoutBenefit_claimsInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    required_month?: IntFieldUpdateOperationsInput | number
    agency?: agency_informationUpdateOneRequiredWithoutBenefits_typesNestedInput
  }

  export type benefits_typesUncheckedUpdateWithoutBenefit_claimsInput = {
    btypes_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    required_month?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type faqs_categoryCreateWithoutFaqInput = {
    faq_categoryName: string
  }

  export type faqs_categoryUncheckedCreateWithoutFaqInput = {
    faq_cateforyId?: number
    faq_categoryName: string
  }

  export type faqs_categoryCreateOrConnectWithoutFaqInput = {
    where: faqs_categoryWhereUniqueInput
    create: XOR<faqs_categoryCreateWithoutFaqInput, faqs_categoryUncheckedCreateWithoutFaqInput>
  }

  export type faqs_categoryUpsertWithoutFaqInput = {
    update: XOR<faqs_categoryUpdateWithoutFaqInput, faqs_categoryUncheckedUpdateWithoutFaqInput>
    create: XOR<faqs_categoryCreateWithoutFaqInput, faqs_categoryUncheckedCreateWithoutFaqInput>
    where?: faqs_categoryWhereInput
  }

  export type faqs_categoryUpdateToOneWithWhereWithoutFaqInput = {
    where?: faqs_categoryWhereInput
    data: XOR<faqs_categoryUpdateWithoutFaqInput, faqs_categoryUncheckedUpdateWithoutFaqInput>
  }

  export type faqs_categoryUpdateWithoutFaqInput = {
    faq_categoryName?: StringFieldUpdateOperationsInput | string
  }

  export type faqs_categoryUncheckedUpdateWithoutFaqInput = {
    faq_cateforyId?: IntFieldUpdateOperationsInput | number
    faq_categoryName?: StringFieldUpdateOperationsInput | string
  }

  export type agency_informationCreateWithoutBenefits_typesInput = {
    agency_name: string
    description: string
    contact_info: string
    contributions?: contributionsCreateNestedManyWithoutSourceInput
    benefit_claims?: benefit_claimsCreateNestedManyWithoutAgencyInput
    notifications?: notificationsCreateNestedManyWithoutAgencyInput
  }

  export type agency_informationUncheckedCreateWithoutBenefits_typesInput = {
    agency_id?: number
    agency_name: string
    description: string
    contact_info: string
    contributions?: contributionsUncheckedCreateNestedManyWithoutSourceInput
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutAgencyInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type agency_informationCreateOrConnectWithoutBenefits_typesInput = {
    where: agency_informationWhereUniqueInput
    create: XOR<agency_informationCreateWithoutBenefits_typesInput, agency_informationUncheckedCreateWithoutBenefits_typesInput>
  }

  export type benefit_claimsCreateWithoutBenefits_typeInput = {
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    users: UsersCreateNestedOneWithoutBenefit_claimsInput
    agency: agency_informationCreateNestedOneWithoutBenefit_claimsInput
  }

  export type benefit_claimsUncheckedCreateWithoutBenefits_typeInput = {
    claim_id?: number
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    userID: number
    agency_id: number
  }

  export type benefit_claimsCreateOrConnectWithoutBenefits_typeInput = {
    where: benefit_claimsWhereUniqueInput
    create: XOR<benefit_claimsCreateWithoutBenefits_typeInput, benefit_claimsUncheckedCreateWithoutBenefits_typeInput>
  }

  export type benefit_claimsCreateManyBenefits_typeInputEnvelope = {
    data: benefit_claimsCreateManyBenefits_typeInput | benefit_claimsCreateManyBenefits_typeInput[]
    skipDuplicates?: boolean
  }

  export type agency_informationUpsertWithoutBenefits_typesInput = {
    update: XOR<agency_informationUpdateWithoutBenefits_typesInput, agency_informationUncheckedUpdateWithoutBenefits_typesInput>
    create: XOR<agency_informationCreateWithoutBenefits_typesInput, agency_informationUncheckedCreateWithoutBenefits_typesInput>
    where?: agency_informationWhereInput
  }

  export type agency_informationUpdateToOneWithWhereWithoutBenefits_typesInput = {
    where?: agency_informationWhereInput
    data: XOR<agency_informationUpdateWithoutBenefits_typesInput, agency_informationUncheckedUpdateWithoutBenefits_typesInput>
  }

  export type agency_informationUpdateWithoutBenefits_typesInput = {
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    contributions?: contributionsUpdateManyWithoutSourceNestedInput
    benefit_claims?: benefit_claimsUpdateManyWithoutAgencyNestedInput
    notifications?: notificationsUpdateManyWithoutAgencyNestedInput
  }

  export type agency_informationUncheckedUpdateWithoutBenefits_typesInput = {
    agency_id?: IntFieldUpdateOperationsInput | number
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    contributions?: contributionsUncheckedUpdateManyWithoutSourceNestedInput
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutAgencyNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type benefit_claimsUpsertWithWhereUniqueWithoutBenefits_typeInput = {
    where: benefit_claimsWhereUniqueInput
    update: XOR<benefit_claimsUpdateWithoutBenefits_typeInput, benefit_claimsUncheckedUpdateWithoutBenefits_typeInput>
    create: XOR<benefit_claimsCreateWithoutBenefits_typeInput, benefit_claimsUncheckedCreateWithoutBenefits_typeInput>
  }

  export type benefit_claimsUpdateWithWhereUniqueWithoutBenefits_typeInput = {
    where: benefit_claimsWhereUniqueInput
    data: XOR<benefit_claimsUpdateWithoutBenefits_typeInput, benefit_claimsUncheckedUpdateWithoutBenefits_typeInput>
  }

  export type benefit_claimsUpdateManyWithWhereWithoutBenefits_typeInput = {
    where: benefit_claimsScalarWhereInput
    data: XOR<benefit_claimsUpdateManyMutationInput, benefit_claimsUncheckedUpdateManyWithoutBenefits_typeInput>
  }

  export type faqCreateWithoutCategoryInput = {
    question: string
    answer: string
  }

  export type faqUncheckedCreateWithoutCategoryInput = {
    faq_id?: number
    question: string
    answer: string
  }

  export type faqCreateOrConnectWithoutCategoryInput = {
    where: faqWhereUniqueInput
    create: XOR<faqCreateWithoutCategoryInput, faqUncheckedCreateWithoutCategoryInput>
  }

  export type faqCreateManyCategoryInputEnvelope = {
    data: faqCreateManyCategoryInput | faqCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type faqUpsertWithWhereUniqueWithoutCategoryInput = {
    where: faqWhereUniqueInput
    update: XOR<faqUpdateWithoutCategoryInput, faqUncheckedUpdateWithoutCategoryInput>
    create: XOR<faqCreateWithoutCategoryInput, faqUncheckedCreateWithoutCategoryInput>
  }

  export type faqUpdateWithWhereUniqueWithoutCategoryInput = {
    where: faqWhereUniqueInput
    data: XOR<faqUpdateWithoutCategoryInput, faqUncheckedUpdateWithoutCategoryInput>
  }

  export type faqUpdateManyWithWhereWithoutCategoryInput = {
    where: faqScalarWhereInput
    data: XOR<faqUpdateManyMutationInput, faqUncheckedUpdateManyWithoutCategoryInput>
  }

  export type faqScalarWhereInput = {
    AND?: faqScalarWhereInput | faqScalarWhereInput[]
    OR?: faqScalarWhereInput[]
    NOT?: faqScalarWhereInput | faqScalarWhereInput[]
    faq_id?: IntFilter<"faq"> | number
    question?: StringFilter<"faq"> | string
    answer?: StringFilter<"faq"> | string
    category_id?: IntFilter<"faq"> | number
  }

  export type UsersCreateWithoutSecurity_questionsInput = {
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    contributions?: contributionsCreateNestedManyWithoutUserInput
    notifications?: notificationsCreateNestedManyWithoutUserInput
    benefit_claims?: benefit_claimsCreateNestedManyWithoutUsersInput
    user_info?: user_infoCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutSecurity_questionsInput = {
    userID?: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name?: string | null
    last_name: string
    date_of_birth: Date | string
    address?: string | null
    telephone_number?: string | null
    create_at?: Date | string
    updated_at?: Date | string | null
    status?: string
    isVerified?: number
    last_login?: Date | string | null
    workStartDate?: Date | string | null
    suffix?: string | null
    sex?: string | null
    barangay?: string | null
    city_municipal?: string | null
    postal_code?: number | null
    country?: string | null
    province?: string | null
    sss_id?: string | null
    pagibig_id?: string | null
    philhealth_id?: string | null
    tin?: string | null
    nationality?: string | null
    civil_status?: string | null
    placeof_birth?: string | null
    religion?: string | null
    subdivision?: string | null
    street?: string | null
    house?: string | null
    room?: string | null
    role_Id?: number | null
    contributions?: contributionsUncheckedCreateNestedManyWithoutUserInput
    notifications?: notificationsUncheckedCreateNestedManyWithoutUserInput
    benefit_claims?: benefit_claimsUncheckedCreateNestedManyWithoutUsersInput
    user_info?: user_infoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutSecurity_questionsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSecurity_questionsInput, UsersUncheckedCreateWithoutSecurity_questionsInput>
  }

  export type UsersUpsertWithoutSecurity_questionsInput = {
    update: XOR<UsersUpdateWithoutSecurity_questionsInput, UsersUncheckedUpdateWithoutSecurity_questionsInput>
    create: XOR<UsersCreateWithoutSecurity_questionsInput, UsersUncheckedCreateWithoutSecurity_questionsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSecurity_questionsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSecurity_questionsInput, UsersUncheckedUpdateWithoutSecurity_questionsInput>
  }

  export type UsersUpdateWithoutSecurity_questionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: contributionsUpdateManyWithoutUserNestedInput
    notifications?: notificationsUpdateManyWithoutUserNestedInput
    benefit_claims?: benefit_claimsUpdateManyWithoutUsersNestedInput
    user_info?: user_infoUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSecurity_questionsInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    telephone_number?: NullableStringFieldUpdateOperationsInput | string | null
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    isVerified?: IntFieldUpdateOperationsInput | number
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: NullableStringFieldUpdateOperationsInput | string | null
    city_municipal?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableIntFieldUpdateOperationsInput | number | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sss_id?: NullableStringFieldUpdateOperationsInput | string | null
    pagibig_id?: NullableStringFieldUpdateOperationsInput | string | null
    philhealth_id?: NullableStringFieldUpdateOperationsInput | string | null
    tin?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    civil_status?: NullableStringFieldUpdateOperationsInput | string | null
    placeof_birth?: NullableStringFieldUpdateOperationsInput | string | null
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    subdivision?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    house?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    role_Id?: NullableIntFieldUpdateOperationsInput | number | null
    contributions?: contributionsUncheckedUpdateManyWithoutUserNestedInput
    notifications?: notificationsUncheckedUpdateManyWithoutUserNestedInput
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutUsersNestedInput
    user_info?: user_infoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type contributionsCreateManyUserInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    agency_id: number
  }

  export type notificationsCreateManyUserInput = {
    notification_id?: number
    message: string
    is_read: number
    created_at?: Date | string
    Contribution_id: number
    agency_id: number
  }

  export type benefit_claimsCreateManyUsersInput = {
    claim_id?: number
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    agency_id: number
    btype_id: number
  }

  export type user_infoCreateManyUserInput = {
    id?: number
    first_name: string
    middle_name: string
    last_name: string
    suffix?: string | null
    DOB: Date | string
    relationship: string
    contact_number?: string | null
    user_sex?: string | null
    education?: string | null
  }

  export type user_security_questionsCreateManyUsersInput = {
    id?: number
    question: string
    answer: string
    create_at?: Date | string
  }

  export type contributionsUpdateWithoutUserInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: agency_informationUpdateOneRequiredWithoutContributionsNestedInput
    notifications?: notificationsUpdateManyWithoutContributionsNestedInput
  }

  export type contributionsUncheckedUpdateWithoutUserInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    agency_id?: IntFieldUpdateOperationsInput | number
    notifications?: notificationsUncheckedUpdateManyWithoutContributionsNestedInput
  }

  export type contributionsUncheckedUpdateManyWithoutUserInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type notificationsUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    contributions?: contributionsUpdateOneRequiredWithoutNotificationsNestedInput
    agency?: agency_informationUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutUserInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Contribution_id?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type notificationsUncheckedUpdateManyWithoutUserInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Contribution_id?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type benefit_claimsUpdateWithoutUsersInput = {
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    agency?: agency_informationUpdateOneRequiredWithoutBenefit_claimsNestedInput
    benefits_type?: benefits_typesUpdateOneRequiredWithoutBenefit_claimsNestedInput
  }

  export type benefit_claimsUncheckedUpdateWithoutUsersInput = {
    claim_id?: IntFieldUpdateOperationsInput | number
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    agency_id?: IntFieldUpdateOperationsInput | number
    btype_id?: IntFieldUpdateOperationsInput | number
  }

  export type benefit_claimsUncheckedUpdateManyWithoutUsersInput = {
    claim_id?: IntFieldUpdateOperationsInput | number
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    agency_id?: IntFieldUpdateOperationsInput | number
    btype_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_infoUpdateWithoutUserInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    DOB?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: StringFieldUpdateOperationsInput | string
    contact_number?: NullableStringFieldUpdateOperationsInput | string | null
    user_sex?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_infoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    DOB?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: StringFieldUpdateOperationsInput | string
    contact_number?: NullableStringFieldUpdateOperationsInput | string | null
    user_sex?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_infoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    DOB?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: StringFieldUpdateOperationsInput | string
    contact_number?: NullableStringFieldUpdateOperationsInput | string | null
    user_sex?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_security_questionsUpdateWithoutUsersInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_security_questionsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_security_questionsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationsCreateManyContributionsInput = {
    notification_id?: number
    message: string
    is_read: number
    created_at?: Date | string
    user_id: number
    agency_id: number
  }

  export type notificationsUpdateWithoutContributionsInput = {
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutNotificationsNestedInput
    agency?: agency_informationUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutContributionsInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type notificationsUncheckedUpdateManyWithoutContributionsInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type contributionsCreateManySourceInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    userID: number
  }

  export type benefit_claimsCreateManyAgencyInput = {
    claim_id?: number
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    userID: number
    btype_id: number
  }

  export type benefits_typesCreateManyAgencyInput = {
    btypes_id?: number
    title: string
    content: string
    required_month: number
  }

  export type notificationsCreateManyAgencyInput = {
    notification_id?: number
    message: string
    is_read: number
    created_at?: Date | string
    user_id: number
    Contribution_id: number
  }

  export type contributionsUpdateWithoutSourceInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutContributionsNestedInput
    notifications?: notificationsUpdateManyWithoutContributionsNestedInput
  }

  export type contributionsUncheckedUpdateWithoutSourceInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    notifications?: notificationsUncheckedUpdateManyWithoutContributionsNestedInput
  }

  export type contributionsUncheckedUpdateManyWithoutSourceInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
  }

  export type benefit_claimsUpdateWithoutAgencyInput = {
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutBenefit_claimsNestedInput
    benefits_type?: benefits_typesUpdateOneRequiredWithoutBenefit_claimsNestedInput
  }

  export type benefit_claimsUncheckedUpdateWithoutAgencyInput = {
    claim_id?: IntFieldUpdateOperationsInput | number
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    btype_id?: IntFieldUpdateOperationsInput | number
  }

  export type benefit_claimsUncheckedUpdateManyWithoutAgencyInput = {
    claim_id?: IntFieldUpdateOperationsInput | number
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    btype_id?: IntFieldUpdateOperationsInput | number
  }

  export type benefits_typesUpdateWithoutAgencyInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    required_month?: IntFieldUpdateOperationsInput | number
    benefit_claims?: benefit_claimsUpdateManyWithoutBenefits_typeNestedInput
  }

  export type benefits_typesUncheckedUpdateWithoutAgencyInput = {
    btypes_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    required_month?: IntFieldUpdateOperationsInput | number
    benefit_claims?: benefit_claimsUncheckedUpdateManyWithoutBenefits_typeNestedInput
  }

  export type benefits_typesUncheckedUpdateManyWithoutAgencyInput = {
    btypes_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    required_month?: IntFieldUpdateOperationsInput | number
  }

  export type notificationsUpdateWithoutAgencyInput = {
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutNotificationsNestedInput
    contributions?: contributionsUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type notificationsUncheckedUpdateWithoutAgencyInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    Contribution_id?: IntFieldUpdateOperationsInput | number
  }

  export type notificationsUncheckedUpdateManyWithoutAgencyInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    is_read?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    Contribution_id?: IntFieldUpdateOperationsInput | number
  }

  export type benefit_claimsCreateManyBenefits_typeInput = {
    claim_id?: number
    claim_amount: Decimal | DecimalJsLike | number | string
    claim_status?: number
    submitted_at?: Date | string
    processed_at?: Date | string | null
    remarks: string
    userID: number
    agency_id: number
  }

  export type benefit_claimsUpdateWithoutBenefits_typeInput = {
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutBenefit_claimsNestedInput
    agency?: agency_informationUpdateOneRequiredWithoutBenefit_claimsNestedInput
  }

  export type benefit_claimsUncheckedUpdateWithoutBenefits_typeInput = {
    claim_id?: IntFieldUpdateOperationsInput | number
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type benefit_claimsUncheckedUpdateManyWithoutBenefits_typeInput = {
    claim_id?: IntFieldUpdateOperationsInput | number
    claim_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    claim_status?: IntFieldUpdateOperationsInput | number
    submitted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    remarks?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type faqCreateManyCategoryInput = {
    faq_id?: number
    question: string
    answer: string
  }

  export type faqUpdateWithoutCategoryInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type faqUncheckedUpdateWithoutCategoryInput = {
    faq_id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type faqUncheckedUpdateManyWithoutCategoryInput = {
    faq_id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContributionsCountOutputTypeDefaultArgs instead
     */
    export type ContributionsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContributionsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Agency_informationCountOutputTypeDefaultArgs instead
     */
    export type Agency_informationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Agency_informationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Benefits_typesCountOutputTypeDefaultArgs instead
     */
    export type Benefits_typesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Benefits_typesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Faqs_categoryCountOutputTypeDefaultArgs instead
     */
    export type Faqs_categoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Faqs_categoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_infoDefaultArgs instead
     */
    export type user_infoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_infoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_rolesDefaultArgs instead
     */
    export type user_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_rolesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use contributionsDefaultArgs instead
     */
    export type contributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = contributionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use agency_informationDefaultArgs instead
     */
    export type agency_informationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = agency_informationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use notificationsDefaultArgs instead
     */
    export type notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = notificationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use benefit_claimsDefaultArgs instead
     */
    export type benefit_claimsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = benefit_claimsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use faqDefaultArgs instead
     */
    export type faqArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = faqDefaultArgs<ExtArgs>
    /**
     * @deprecated Use guides_tutorialsDefaultArgs instead
     */
    export type guides_tutorialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = guides_tutorialsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use benefits_typesDefaultArgs instead
     */
    export type benefits_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = benefits_typesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use faqs_categoryDefaultArgs instead
     */
    export type faqs_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = faqs_categoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_security_questionsDefaultArgs instead
     */
    export type user_security_questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_security_questionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use security_questionDefaultArgs instead
     */
    export type security_questionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = security_questionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}

/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model user_roles
 * 
 */
export type user_roles = $Result.DefaultSelection<Prisma.$user_rolesPayload>
/**
 * Model contributions
 * 
 */
export type contributions = $Result.DefaultSelection<Prisma.$contributionsPayload>
/**
 * Model agency_information
 * 
 */
export type agency_information = $Result.DefaultSelection<Prisma.$agency_informationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.user_roles`: Exposes CRUD operations for the **user_roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_roles
    * const user_roles = await prisma.user_roles.findMany()
    * ```
    */
  get user_roles(): Prisma.user_rolesDelegate<ExtArgs>;

  /**
   * `prisma.contributions`: Exposes CRUD operations for the **contributions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contributions
    * const contributions = await prisma.contributions.findMany()
    * ```
    */
  get contributions(): Prisma.contributionsDelegate<ExtArgs>;

  /**
   * `prisma.agency_information`: Exposes CRUD operations for the **agency_information** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agency_informations
    * const agency_informations = await prisma.agency_information.findMany()
    * ```
    */
  get agency_information(): Prisma.agency_informationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.1
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    user_roles: 'user_roles',
    contributions: 'contributions',
    agency_information: 'agency_information'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "user_roles" | "contributions" | "agency_information"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      user_roles: {
        payload: Prisma.$user_rolesPayload<ExtArgs>
        fields: Prisma.user_rolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_rolesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_rolesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          findFirst: {
            args: Prisma.user_rolesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_rolesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          findMany: {
            args: Prisma.user_rolesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>[]
          }
          create: {
            args: Prisma.user_rolesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          createMany: {
            args: Prisma.user_rolesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_rolesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>[]
          }
          delete: {
            args: Prisma.user_rolesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          update: {
            args: Prisma.user_rolesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          deleteMany: {
            args: Prisma.user_rolesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_rolesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.user_rolesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_rolesPayload>
          }
          aggregate: {
            args: Prisma.User_rolesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_roles>
          }
          groupBy: {
            args: Prisma.user_rolesGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_rolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_rolesCountArgs<ExtArgs>
            result: $Utils.Optional<User_rolesCountAggregateOutputType> | number
          }
        }
      }
      contributions: {
        payload: Prisma.$contributionsPayload<ExtArgs>
        fields: Prisma.contributionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.contributionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.contributionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          findFirst: {
            args: Prisma.contributionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.contributionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          findMany: {
            args: Prisma.contributionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>[]
          }
          create: {
            args: Prisma.contributionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          createMany: {
            args: Prisma.contributionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.contributionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>[]
          }
          delete: {
            args: Prisma.contributionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          update: {
            args: Prisma.contributionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          deleteMany: {
            args: Prisma.contributionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.contributionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.contributionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contributionsPayload>
          }
          aggregate: {
            args: Prisma.ContributionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContributions>
          }
          groupBy: {
            args: Prisma.contributionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContributionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.contributionsCountArgs<ExtArgs>
            result: $Utils.Optional<ContributionsCountAggregateOutputType> | number
          }
        }
      }
      agency_information: {
        payload: Prisma.$agency_informationPayload<ExtArgs>
        fields: Prisma.agency_informationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.agency_informationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.agency_informationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          findFirst: {
            args: Prisma.agency_informationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.agency_informationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          findMany: {
            args: Prisma.agency_informationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>[]
          }
          create: {
            args: Prisma.agency_informationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          createMany: {
            args: Prisma.agency_informationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.agency_informationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>[]
          }
          delete: {
            args: Prisma.agency_informationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          update: {
            args: Prisma.agency_informationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          deleteMany: {
            args: Prisma.agency_informationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.agency_informationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.agency_informationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agency_informationPayload>
          }
          aggregate: {
            args: Prisma.Agency_informationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgency_information>
          }
          groupBy: {
            args: Prisma.agency_informationGroupByArgs<ExtArgs>
            result: $Utils.Optional<Agency_informationGroupByOutputType>[]
          }
          count: {
            args: Prisma.agency_informationCountArgs<ExtArgs>
            result: $Utils.Optional<Agency_informationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    contributions: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | UsersCountOutputTypeCountContributionsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contributionsWhereInput
  }


  /**
   * Count Type Agency_informationCountOutputType
   */

  export type Agency_informationCountOutputType = {
    contributions: number
  }

  export type Agency_informationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | Agency_informationCountOutputTypeCountContributionsArgs
  }

  // Custom InputTypes
  /**
   * Agency_informationCountOutputType without action
   */
  export type Agency_informationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency_informationCountOutputType
     */
    select?: Agency_informationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Agency_informationCountOutputType without action
   */
  export type Agency_informationCountOutputTypeCountContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contributionsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    userID: number | null
    postal_code: number | null
    role_Id: number | null
  }

  export type UsersSumAggregateOutputType = {
    userID: number | null
    postal_code: number | null
    role_Id: number | null
  }

  export type UsersMinAggregateOutputType = {
    userID: number | null
    username: string | null
    password: string | null
    email: string | null
    phone_number: string | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    date_of_birth: Date | null
    address: string | null
    create_at: Date | null
    updated_at: Date | null
    status: string | null
    last_login: Date | null
    sex: string | null
    barangay: string | null
    city_municipal: string | null
    postal_code: number | null
    country: string | null
    province: string | null
    role_Id: number | null
  }

  export type UsersMaxAggregateOutputType = {
    userID: number | null
    username: string | null
    password: string | null
    email: string | null
    phone_number: string | null
    first_name: string | null
    middle_name: string | null
    last_name: string | null
    date_of_birth: Date | null
    address: string | null
    create_at: Date | null
    updated_at: Date | null
    status: string | null
    last_login: Date | null
    sex: string | null
    barangay: string | null
    city_municipal: string | null
    postal_code: number | null
    country: string | null
    province: string | null
    role_Id: number | null
  }

  export type UsersCountAggregateOutputType = {
    userID: number
    username: number
    password: number
    email: number
    phone_number: number
    first_name: number
    middle_name: number
    last_name: number
    date_of_birth: number
    address: number
    create_at: number
    updated_at: number
    status: number
    last_login: number
    sex: number
    barangay: number
    city_municipal: number
    postal_code: number
    country: number
    province: number
    role_Id: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    userID?: true
    postal_code?: true
    role_Id?: true
  }

  export type UsersSumAggregateInputType = {
    userID?: true
    postal_code?: true
    role_Id?: true
  }

  export type UsersMinAggregateInputType = {
    userID?: true
    username?: true
    password?: true
    email?: true
    phone_number?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    date_of_birth?: true
    address?: true
    create_at?: true
    updated_at?: true
    status?: true
    last_login?: true
    sex?: true
    barangay?: true
    city_municipal?: true
    postal_code?: true
    country?: true
    province?: true
    role_Id?: true
  }

  export type UsersMaxAggregateInputType = {
    userID?: true
    username?: true
    password?: true
    email?: true
    phone_number?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    date_of_birth?: true
    address?: true
    create_at?: true
    updated_at?: true
    status?: true
    last_login?: true
    sex?: true
    barangay?: true
    city_municipal?: true
    postal_code?: true
    country?: true
    province?: true
    role_Id?: true
  }

  export type UsersCountAggregateInputType = {
    userID?: true
    username?: true
    password?: true
    email?: true
    phone_number?: true
    first_name?: true
    middle_name?: true
    last_name?: true
    date_of_birth?: true
    address?: true
    create_at?: true
    updated_at?: true
    status?: true
    last_login?: true
    sex?: true
    barangay?: true
    city_municipal?: true
    postal_code?: true
    country?: true
    province?: true
    role_Id?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    userID: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name: string
    last_name: string
    date_of_birth: Date
    address: string
    create_at: Date
    updated_at: Date | null
    status: string
    last_login: Date | null
    sex: string
    barangay: string
    city_municipal: string
    postal_code: number
    country: string
    province: string
    role_Id: number
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userID?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phone_number?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    date_of_birth?: boolean
    address?: boolean
    create_at?: boolean
    updated_at?: boolean
    status?: boolean
    last_login?: boolean
    sex?: boolean
    barangay?: boolean
    city_municipal?: boolean
    postal_code?: boolean
    country?: boolean
    province?: boolean
    role_Id?: boolean
    contributions?: boolean | Users$contributionsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userID?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phone_number?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    date_of_birth?: boolean
    address?: boolean
    create_at?: boolean
    updated_at?: boolean
    status?: boolean
    last_login?: boolean
    sex?: boolean
    barangay?: boolean
    city_municipal?: boolean
    postal_code?: boolean
    country?: boolean
    province?: boolean
    role_Id?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    userID?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phone_number?: boolean
    first_name?: boolean
    middle_name?: boolean
    last_name?: boolean
    date_of_birth?: boolean
    address?: boolean
    create_at?: boolean
    updated_at?: boolean
    status?: boolean
    last_login?: boolean
    sex?: boolean
    barangay?: boolean
    city_municipal?: boolean
    postal_code?: boolean
    country?: boolean
    province?: boolean
    role_Id?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | Users$contributionsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      contributions: Prisma.$contributionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userID: number
      username: string
      password: string
      email: string
      phone_number: string
      first_name: string
      middle_name: string
      last_name: string
      date_of_birth: Date
      address: string
      create_at: Date
      updated_at: Date | null
      status: string
      last_login: Date | null
      sex: string
      barangay: string
      city_municipal: string
      postal_code: number
      country: string
      province: string
      role_Id: number
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `userID`
     * const usersWithUserIDOnly = await prisma.users.findMany({ select: { userID: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userID`
     * const usersWithUserIDOnly = await prisma.users.createManyAndReturn({ 
     *   select: { userID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contributions<T extends Users$contributionsArgs<ExtArgs> = {}>(args?: Subset<T, Users$contributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly userID: FieldRef<"Users", 'Int'>
    readonly username: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly phone_number: FieldRef<"Users", 'String'>
    readonly first_name: FieldRef<"Users", 'String'>
    readonly middle_name: FieldRef<"Users", 'String'>
    readonly last_name: FieldRef<"Users", 'String'>
    readonly date_of_birth: FieldRef<"Users", 'DateTime'>
    readonly address: FieldRef<"Users", 'String'>
    readonly create_at: FieldRef<"Users", 'DateTime'>
    readonly updated_at: FieldRef<"Users", 'DateTime'>
    readonly status: FieldRef<"Users", 'String'>
    readonly last_login: FieldRef<"Users", 'DateTime'>
    readonly sex: FieldRef<"Users", 'String'>
    readonly barangay: FieldRef<"Users", 'String'>
    readonly city_municipal: FieldRef<"Users", 'String'>
    readonly postal_code: FieldRef<"Users", 'Int'>
    readonly country: FieldRef<"Users", 'String'>
    readonly province: FieldRef<"Users", 'String'>
    readonly role_Id: FieldRef<"Users", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.contributions
   */
  export type Users$contributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    where?: contributionsWhereInput
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    cursor?: contributionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContributionsScalarFieldEnum | ContributionsScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model user_roles
   */

  export type AggregateUser_roles = {
    _count: User_rolesCountAggregateOutputType | null
    _avg: User_rolesAvgAggregateOutputType | null
    _sum: User_rolesSumAggregateOutputType | null
    _min: User_rolesMinAggregateOutputType | null
    _max: User_rolesMaxAggregateOutputType | null
  }

  export type User_rolesAvgAggregateOutputType = {
    id: number | null
  }

  export type User_rolesSumAggregateOutputType = {
    id: number | null
  }

  export type User_rolesMinAggregateOutputType = {
    id: number | null
    role_name: string | null
    description: string | null
  }

  export type User_rolesMaxAggregateOutputType = {
    id: number | null
    role_name: string | null
    description: string | null
  }

  export type User_rolesCountAggregateOutputType = {
    id: number
    role_name: number
    description: number
    _all: number
  }


  export type User_rolesAvgAggregateInputType = {
    id?: true
  }

  export type User_rolesSumAggregateInputType = {
    id?: true
  }

  export type User_rolesMinAggregateInputType = {
    id?: true
    role_name?: true
    description?: true
  }

  export type User_rolesMaxAggregateInputType = {
    id?: true
    role_name?: true
    description?: true
  }

  export type User_rolesCountAggregateInputType = {
    id?: true
    role_name?: true
    description?: true
    _all?: true
  }

  export type User_rolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_roles to aggregate.
     */
    where?: user_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_roles to fetch.
     */
    orderBy?: user_rolesOrderByWithRelationInput | user_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_roles
    **/
    _count?: true | User_rolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_rolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_rolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_rolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_rolesMaxAggregateInputType
  }

  export type GetUser_rolesAggregateType<T extends User_rolesAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_roles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_roles[P]>
      : GetScalarType<T[P], AggregateUser_roles[P]>
  }




  export type user_rolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_rolesWhereInput
    orderBy?: user_rolesOrderByWithAggregationInput | user_rolesOrderByWithAggregationInput[]
    by: User_rolesScalarFieldEnum[] | User_rolesScalarFieldEnum
    having?: user_rolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_rolesCountAggregateInputType | true
    _avg?: User_rolesAvgAggregateInputType
    _sum?: User_rolesSumAggregateInputType
    _min?: User_rolesMinAggregateInputType
    _max?: User_rolesMaxAggregateInputType
  }

  export type User_rolesGroupByOutputType = {
    id: number
    role_name: string
    description: string
    _count: User_rolesCountAggregateOutputType | null
    _avg: User_rolesAvgAggregateOutputType | null
    _sum: User_rolesSumAggregateOutputType | null
    _min: User_rolesMinAggregateOutputType | null
    _max: User_rolesMaxAggregateOutputType | null
  }

  type GetUser_rolesGroupByPayload<T extends user_rolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_rolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_rolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_rolesGroupByOutputType[P]>
            : GetScalarType<T[P], User_rolesGroupByOutputType[P]>
        }
      >
    >


  export type user_rolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role_name?: boolean
    description?: boolean
  }, ExtArgs["result"]["user_roles"]>

  export type user_rolesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role_name?: boolean
    description?: boolean
  }, ExtArgs["result"]["user_roles"]>

  export type user_rolesSelectScalar = {
    id?: boolean
    role_name?: boolean
    description?: boolean
  }


  export type $user_rolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_roles"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role_name: string
      description: string
    }, ExtArgs["result"]["user_roles"]>
    composites: {}
  }

  type user_rolesGetPayload<S extends boolean | null | undefined | user_rolesDefaultArgs> = $Result.GetResult<Prisma.$user_rolesPayload, S>

  type user_rolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_rolesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_rolesCountAggregateInputType | true
    }

  export interface user_rolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_roles'], meta: { name: 'user_roles' } }
    /**
     * Find zero or one User_roles that matches the filter.
     * @param {user_rolesFindUniqueArgs} args - Arguments to find a User_roles
     * @example
     * // Get one User_roles
     * const user_roles = await prisma.user_roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_rolesFindUniqueArgs>(args: SelectSubset<T, user_rolesFindUniqueArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User_roles that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {user_rolesFindUniqueOrThrowArgs} args - Arguments to find a User_roles
     * @example
     * // Get one User_roles
     * const user_roles = await prisma.user_roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_rolesFindUniqueOrThrowArgs>(args: SelectSubset<T, user_rolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesFindFirstArgs} args - Arguments to find a User_roles
     * @example
     * // Get one User_roles
     * const user_roles = await prisma.user_roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_rolesFindFirstArgs>(args?: SelectSubset<T, user_rolesFindFirstArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User_roles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesFindFirstOrThrowArgs} args - Arguments to find a User_roles
     * @example
     * // Get one User_roles
     * const user_roles = await prisma.user_roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_rolesFindFirstOrThrowArgs>(args?: SelectSubset<T, user_rolesFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more User_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_roles
     * const user_roles = await prisma.user_roles.findMany()
     * 
     * // Get first 10 User_roles
     * const user_roles = await prisma.user_roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_rolesWithIdOnly = await prisma.user_roles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_rolesFindManyArgs>(args?: SelectSubset<T, user_rolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User_roles.
     * @param {user_rolesCreateArgs} args - Arguments to create a User_roles.
     * @example
     * // Create one User_roles
     * const User_roles = await prisma.user_roles.create({
     *   data: {
     *     // ... data to create a User_roles
     *   }
     * })
     * 
     */
    create<T extends user_rolesCreateArgs>(args: SelectSubset<T, user_rolesCreateArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many User_roles.
     * @param {user_rolesCreateManyArgs} args - Arguments to create many User_roles.
     * @example
     * // Create many User_roles
     * const user_roles = await prisma.user_roles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_rolesCreateManyArgs>(args?: SelectSubset<T, user_rolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_roles and returns the data saved in the database.
     * @param {user_rolesCreateManyAndReturnArgs} args - Arguments to create many User_roles.
     * @example
     * // Create many User_roles
     * const user_roles = await prisma.user_roles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_roles and only return the `id`
     * const user_rolesWithIdOnly = await prisma.user_roles.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_rolesCreateManyAndReturnArgs>(args?: SelectSubset<T, user_rolesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User_roles.
     * @param {user_rolesDeleteArgs} args - Arguments to delete one User_roles.
     * @example
     * // Delete one User_roles
     * const User_roles = await prisma.user_roles.delete({
     *   where: {
     *     // ... filter to delete one User_roles
     *   }
     * })
     * 
     */
    delete<T extends user_rolesDeleteArgs>(args: SelectSubset<T, user_rolesDeleteArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User_roles.
     * @param {user_rolesUpdateArgs} args - Arguments to update one User_roles.
     * @example
     * // Update one User_roles
     * const user_roles = await prisma.user_roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_rolesUpdateArgs>(args: SelectSubset<T, user_rolesUpdateArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more User_roles.
     * @param {user_rolesDeleteManyArgs} args - Arguments to filter User_roles to delete.
     * @example
     * // Delete a few User_roles
     * const { count } = await prisma.user_roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_rolesDeleteManyArgs>(args?: SelectSubset<T, user_rolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_roles
     * const user_roles = await prisma.user_roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_rolesUpdateManyArgs>(args: SelectSubset<T, user_rolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_roles.
     * @param {user_rolesUpsertArgs} args - Arguments to update or create a User_roles.
     * @example
     * // Update or create a User_roles
     * const user_roles = await prisma.user_roles.upsert({
     *   create: {
     *     // ... data to create a User_roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_roles we want to update
     *   }
     * })
     */
    upsert<T extends user_rolesUpsertArgs>(args: SelectSubset<T, user_rolesUpsertArgs<ExtArgs>>): Prisma__user_rolesClient<$Result.GetResult<Prisma.$user_rolesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of User_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesCountArgs} args - Arguments to filter User_roles to count.
     * @example
     * // Count the number of User_roles
     * const count = await prisma.user_roles.count({
     *   where: {
     *     // ... the filter for the User_roles we want to count
     *   }
     * })
    **/
    count<T extends user_rolesCountArgs>(
      args?: Subset<T, user_rolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_rolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_rolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_rolesAggregateArgs>(args: Subset<T, User_rolesAggregateArgs>): Prisma.PrismaPromise<GetUser_rolesAggregateType<T>>

    /**
     * Group by User_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_rolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_rolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_rolesGroupByArgs['orderBy'] }
        : { orderBy?: user_rolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_rolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_rolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_roles model
   */
  readonly fields: user_rolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_rolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_roles model
   */ 
  interface user_rolesFieldRefs {
    readonly id: FieldRef<"user_roles", 'Int'>
    readonly role_name: FieldRef<"user_roles", 'String'>
    readonly description: FieldRef<"user_roles", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user_roles findUnique
   */
  export type user_rolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter, which user_roles to fetch.
     */
    where: user_rolesWhereUniqueInput
  }

  /**
   * user_roles findUniqueOrThrow
   */
  export type user_rolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter, which user_roles to fetch.
     */
    where: user_rolesWhereUniqueInput
  }

  /**
   * user_roles findFirst
   */
  export type user_rolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter, which user_roles to fetch.
     */
    where?: user_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_roles to fetch.
     */
    orderBy?: user_rolesOrderByWithRelationInput | user_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_roles.
     */
    cursor?: user_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_roles.
     */
    distinct?: User_rolesScalarFieldEnum | User_rolesScalarFieldEnum[]
  }

  /**
   * user_roles findFirstOrThrow
   */
  export type user_rolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter, which user_roles to fetch.
     */
    where?: user_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_roles to fetch.
     */
    orderBy?: user_rolesOrderByWithRelationInput | user_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_roles.
     */
    cursor?: user_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_roles.
     */
    distinct?: User_rolesScalarFieldEnum | User_rolesScalarFieldEnum[]
  }

  /**
   * user_roles findMany
   */
  export type user_rolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter, which user_roles to fetch.
     */
    where?: user_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_roles to fetch.
     */
    orderBy?: user_rolesOrderByWithRelationInput | user_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_roles.
     */
    cursor?: user_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_roles.
     */
    skip?: number
    distinct?: User_rolesScalarFieldEnum | User_rolesScalarFieldEnum[]
  }

  /**
   * user_roles create
   */
  export type user_rolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * The data needed to create a user_roles.
     */
    data: XOR<user_rolesCreateInput, user_rolesUncheckedCreateInput>
  }

  /**
   * user_roles createMany
   */
  export type user_rolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_roles.
     */
    data: user_rolesCreateManyInput | user_rolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_roles createManyAndReturn
   */
  export type user_rolesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many user_roles.
     */
    data: user_rolesCreateManyInput | user_rolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_roles update
   */
  export type user_rolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * The data needed to update a user_roles.
     */
    data: XOR<user_rolesUpdateInput, user_rolesUncheckedUpdateInput>
    /**
     * Choose, which user_roles to update.
     */
    where: user_rolesWhereUniqueInput
  }

  /**
   * user_roles updateMany
   */
  export type user_rolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_roles.
     */
    data: XOR<user_rolesUpdateManyMutationInput, user_rolesUncheckedUpdateManyInput>
    /**
     * Filter which user_roles to update
     */
    where?: user_rolesWhereInput
  }

  /**
   * user_roles upsert
   */
  export type user_rolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * The filter to search for the user_roles to update in case it exists.
     */
    where: user_rolesWhereUniqueInput
    /**
     * In case the user_roles found by the `where` argument doesn't exist, create a new user_roles with this data.
     */
    create: XOR<user_rolesCreateInput, user_rolesUncheckedCreateInput>
    /**
     * In case the user_roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_rolesUpdateInput, user_rolesUncheckedUpdateInput>
  }

  /**
   * user_roles delete
   */
  export type user_rolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
    /**
     * Filter which user_roles to delete.
     */
    where: user_rolesWhereUniqueInput
  }

  /**
   * user_roles deleteMany
   */
  export type user_rolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_roles to delete
     */
    where?: user_rolesWhereInput
  }

  /**
   * user_roles without action
   */
  export type user_rolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_roles
     */
    select?: user_rolesSelect<ExtArgs> | null
  }


  /**
   * Model contributions
   */

  export type AggregateContributions = {
    _count: ContributionsCountAggregateOutputType | null
    _avg: ContributionsAvgAggregateOutputType | null
    _sum: ContributionsSumAggregateOutputType | null
    _min: ContributionsMinAggregateOutputType | null
    _max: ContributionsMaxAggregateOutputType | null
  }

  export type ContributionsAvgAggregateOutputType = {
    contribution_id: number | null
    amount: Decimal | null
    userID: number | null
    agency_id: number | null
  }

  export type ContributionsSumAggregateOutputType = {
    contribution_id: number | null
    amount: Decimal | null
    userID: number | null
    agency_id: number | null
  }

  export type ContributionsMinAggregateOutputType = {
    contribution_id: number | null
    amount: Decimal | null
    post_date: Date | null
    status: string | null
    userID: number | null
    agency_id: number | null
  }

  export type ContributionsMaxAggregateOutputType = {
    contribution_id: number | null
    amount: Decimal | null
    post_date: Date | null
    status: string | null
    userID: number | null
    agency_id: number | null
  }

  export type ContributionsCountAggregateOutputType = {
    contribution_id: number
    amount: number
    post_date: number
    status: number
    userID: number
    agency_id: number
    _all: number
  }


  export type ContributionsAvgAggregateInputType = {
    contribution_id?: true
    amount?: true
    userID?: true
    agency_id?: true
  }

  export type ContributionsSumAggregateInputType = {
    contribution_id?: true
    amount?: true
    userID?: true
    agency_id?: true
  }

  export type ContributionsMinAggregateInputType = {
    contribution_id?: true
    amount?: true
    post_date?: true
    status?: true
    userID?: true
    agency_id?: true
  }

  export type ContributionsMaxAggregateInputType = {
    contribution_id?: true
    amount?: true
    post_date?: true
    status?: true
    userID?: true
    agency_id?: true
  }

  export type ContributionsCountAggregateInputType = {
    contribution_id?: true
    amount?: true
    post_date?: true
    status?: true
    userID?: true
    agency_id?: true
    _all?: true
  }

  export type ContributionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contributions to aggregate.
     */
    where?: contributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contributions to fetch.
     */
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: contributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contributions
    **/
    _count?: true | ContributionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContributionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContributionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContributionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContributionsMaxAggregateInputType
  }

  export type GetContributionsAggregateType<T extends ContributionsAggregateArgs> = {
        [P in keyof T & keyof AggregateContributions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContributions[P]>
      : GetScalarType<T[P], AggregateContributions[P]>
  }




  export type contributionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contributionsWhereInput
    orderBy?: contributionsOrderByWithAggregationInput | contributionsOrderByWithAggregationInput[]
    by: ContributionsScalarFieldEnum[] | ContributionsScalarFieldEnum
    having?: contributionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContributionsCountAggregateInputType | true
    _avg?: ContributionsAvgAggregateInputType
    _sum?: ContributionsSumAggregateInputType
    _min?: ContributionsMinAggregateInputType
    _max?: ContributionsMaxAggregateInputType
  }

  export type ContributionsGroupByOutputType = {
    contribution_id: number
    amount: Decimal
    post_date: Date
    status: string
    userID: number
    agency_id: number
    _count: ContributionsCountAggregateOutputType | null
    _avg: ContributionsAvgAggregateOutputType | null
    _sum: ContributionsSumAggregateOutputType | null
    _min: ContributionsMinAggregateOutputType | null
    _max: ContributionsMaxAggregateOutputType | null
  }

  type GetContributionsGroupByPayload<T extends contributionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContributionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContributionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContributionsGroupByOutputType[P]>
            : GetScalarType<T[P], ContributionsGroupByOutputType[P]>
        }
      >
    >


  export type contributionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    contribution_id?: boolean
    amount?: boolean
    post_date?: boolean
    status?: boolean
    userID?: boolean
    agency_id?: boolean
    source?: boolean | agency_informationDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contributions"]>

  export type contributionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    contribution_id?: boolean
    amount?: boolean
    post_date?: boolean
    status?: boolean
    userID?: boolean
    agency_id?: boolean
    source?: boolean | agency_informationDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contributions"]>

  export type contributionsSelectScalar = {
    contribution_id?: boolean
    amount?: boolean
    post_date?: boolean
    status?: boolean
    userID?: boolean
    agency_id?: boolean
  }

  export type contributionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    source?: boolean | agency_informationDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type contributionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    source?: boolean | agency_informationDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $contributionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "contributions"
    objects: {
      source: Prisma.$agency_informationPayload<ExtArgs>
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      contribution_id: number
      amount: Prisma.Decimal
      post_date: Date
      status: string
      userID: number
      agency_id: number
    }, ExtArgs["result"]["contributions"]>
    composites: {}
  }

  type contributionsGetPayload<S extends boolean | null | undefined | contributionsDefaultArgs> = $Result.GetResult<Prisma.$contributionsPayload, S>

  type contributionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<contributionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContributionsCountAggregateInputType | true
    }

  export interface contributionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['contributions'], meta: { name: 'contributions' } }
    /**
     * Find zero or one Contributions that matches the filter.
     * @param {contributionsFindUniqueArgs} args - Arguments to find a Contributions
     * @example
     * // Get one Contributions
     * const contributions = await prisma.contributions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends contributionsFindUniqueArgs>(args: SelectSubset<T, contributionsFindUniqueArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contributions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {contributionsFindUniqueOrThrowArgs} args - Arguments to find a Contributions
     * @example
     * // Get one Contributions
     * const contributions = await prisma.contributions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends contributionsFindUniqueOrThrowArgs>(args: SelectSubset<T, contributionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsFindFirstArgs} args - Arguments to find a Contributions
     * @example
     * // Get one Contributions
     * const contributions = await prisma.contributions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends contributionsFindFirstArgs>(args?: SelectSubset<T, contributionsFindFirstArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contributions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsFindFirstOrThrowArgs} args - Arguments to find a Contributions
     * @example
     * // Get one Contributions
     * const contributions = await prisma.contributions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends contributionsFindFirstOrThrowArgs>(args?: SelectSubset<T, contributionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contributions
     * const contributions = await prisma.contributions.findMany()
     * 
     * // Get first 10 Contributions
     * const contributions = await prisma.contributions.findMany({ take: 10 })
     * 
     * // Only select the `contribution_id`
     * const contributionsWithContribution_idOnly = await prisma.contributions.findMany({ select: { contribution_id: true } })
     * 
     */
    findMany<T extends contributionsFindManyArgs>(args?: SelectSubset<T, contributionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contributions.
     * @param {contributionsCreateArgs} args - Arguments to create a Contributions.
     * @example
     * // Create one Contributions
     * const Contributions = await prisma.contributions.create({
     *   data: {
     *     // ... data to create a Contributions
     *   }
     * })
     * 
     */
    create<T extends contributionsCreateArgs>(args: SelectSubset<T, contributionsCreateArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contributions.
     * @param {contributionsCreateManyArgs} args - Arguments to create many Contributions.
     * @example
     * // Create many Contributions
     * const contributions = await prisma.contributions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends contributionsCreateManyArgs>(args?: SelectSubset<T, contributionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contributions and returns the data saved in the database.
     * @param {contributionsCreateManyAndReturnArgs} args - Arguments to create many Contributions.
     * @example
     * // Create many Contributions
     * const contributions = await prisma.contributions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contributions and only return the `contribution_id`
     * const contributionsWithContribution_idOnly = await prisma.contributions.createManyAndReturn({ 
     *   select: { contribution_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends contributionsCreateManyAndReturnArgs>(args?: SelectSubset<T, contributionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contributions.
     * @param {contributionsDeleteArgs} args - Arguments to delete one Contributions.
     * @example
     * // Delete one Contributions
     * const Contributions = await prisma.contributions.delete({
     *   where: {
     *     // ... filter to delete one Contributions
     *   }
     * })
     * 
     */
    delete<T extends contributionsDeleteArgs>(args: SelectSubset<T, contributionsDeleteArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contributions.
     * @param {contributionsUpdateArgs} args - Arguments to update one Contributions.
     * @example
     * // Update one Contributions
     * const contributions = await prisma.contributions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends contributionsUpdateArgs>(args: SelectSubset<T, contributionsUpdateArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contributions.
     * @param {contributionsDeleteManyArgs} args - Arguments to filter Contributions to delete.
     * @example
     * // Delete a few Contributions
     * const { count } = await prisma.contributions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends contributionsDeleteManyArgs>(args?: SelectSubset<T, contributionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contributions
     * const contributions = await prisma.contributions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends contributionsUpdateManyArgs>(args: SelectSubset<T, contributionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contributions.
     * @param {contributionsUpsertArgs} args - Arguments to update or create a Contributions.
     * @example
     * // Update or create a Contributions
     * const contributions = await prisma.contributions.upsert({
     *   create: {
     *     // ... data to create a Contributions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contributions we want to update
     *   }
     * })
     */
    upsert<T extends contributionsUpsertArgs>(args: SelectSubset<T, contributionsUpsertArgs<ExtArgs>>): Prisma__contributionsClient<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsCountArgs} args - Arguments to filter Contributions to count.
     * @example
     * // Count the number of Contributions
     * const count = await prisma.contributions.count({
     *   where: {
     *     // ... the filter for the Contributions we want to count
     *   }
     * })
    **/
    count<T extends contributionsCountArgs>(
      args?: Subset<T, contributionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContributionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContributionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContributionsAggregateArgs>(args: Subset<T, ContributionsAggregateArgs>): Prisma.PrismaPromise<GetContributionsAggregateType<T>>

    /**
     * Group by Contributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contributionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends contributionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: contributionsGroupByArgs['orderBy'] }
        : { orderBy?: contributionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, contributionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContributionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the contributions model
   */
  readonly fields: contributionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for contributions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__contributionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    source<T extends agency_informationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, agency_informationDefaultArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the contributions model
   */ 
  interface contributionsFieldRefs {
    readonly contribution_id: FieldRef<"contributions", 'Int'>
    readonly amount: FieldRef<"contributions", 'Decimal'>
    readonly post_date: FieldRef<"contributions", 'DateTime'>
    readonly status: FieldRef<"contributions", 'String'>
    readonly userID: FieldRef<"contributions", 'Int'>
    readonly agency_id: FieldRef<"contributions", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * contributions findUnique
   */
  export type contributionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter, which contributions to fetch.
     */
    where: contributionsWhereUniqueInput
  }

  /**
   * contributions findUniqueOrThrow
   */
  export type contributionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter, which contributions to fetch.
     */
    where: contributionsWhereUniqueInput
  }

  /**
   * contributions findFirst
   */
  export type contributionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter, which contributions to fetch.
     */
    where?: contributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contributions to fetch.
     */
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contributions.
     */
    cursor?: contributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contributions.
     */
    distinct?: ContributionsScalarFieldEnum | ContributionsScalarFieldEnum[]
  }

  /**
   * contributions findFirstOrThrow
   */
  export type contributionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter, which contributions to fetch.
     */
    where?: contributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contributions to fetch.
     */
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contributions.
     */
    cursor?: contributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contributions.
     */
    distinct?: ContributionsScalarFieldEnum | ContributionsScalarFieldEnum[]
  }

  /**
   * contributions findMany
   */
  export type contributionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter, which contributions to fetch.
     */
    where?: contributionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contributions to fetch.
     */
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contributions.
     */
    cursor?: contributionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contributions.
     */
    skip?: number
    distinct?: ContributionsScalarFieldEnum | ContributionsScalarFieldEnum[]
  }

  /**
   * contributions create
   */
  export type contributionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * The data needed to create a contributions.
     */
    data: XOR<contributionsCreateInput, contributionsUncheckedCreateInput>
  }

  /**
   * contributions createMany
   */
  export type contributionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many contributions.
     */
    data: contributionsCreateManyInput | contributionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * contributions createManyAndReturn
   */
  export type contributionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many contributions.
     */
    data: contributionsCreateManyInput | contributionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * contributions update
   */
  export type contributionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * The data needed to update a contributions.
     */
    data: XOR<contributionsUpdateInput, contributionsUncheckedUpdateInput>
    /**
     * Choose, which contributions to update.
     */
    where: contributionsWhereUniqueInput
  }

  /**
   * contributions updateMany
   */
  export type contributionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update contributions.
     */
    data: XOR<contributionsUpdateManyMutationInput, contributionsUncheckedUpdateManyInput>
    /**
     * Filter which contributions to update
     */
    where?: contributionsWhereInput
  }

  /**
   * contributions upsert
   */
  export type contributionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * The filter to search for the contributions to update in case it exists.
     */
    where: contributionsWhereUniqueInput
    /**
     * In case the contributions found by the `where` argument doesn't exist, create a new contributions with this data.
     */
    create: XOR<contributionsCreateInput, contributionsUncheckedCreateInput>
    /**
     * In case the contributions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<contributionsUpdateInput, contributionsUncheckedUpdateInput>
  }

  /**
   * contributions delete
   */
  export type contributionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    /**
     * Filter which contributions to delete.
     */
    where: contributionsWhereUniqueInput
  }

  /**
   * contributions deleteMany
   */
  export type contributionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contributions to delete
     */
    where?: contributionsWhereInput
  }

  /**
   * contributions without action
   */
  export type contributionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
  }


  /**
   * Model agency_information
   */

  export type AggregateAgency_information = {
    _count: Agency_informationCountAggregateOutputType | null
    _avg: Agency_informationAvgAggregateOutputType | null
    _sum: Agency_informationSumAggregateOutputType | null
    _min: Agency_informationMinAggregateOutputType | null
    _max: Agency_informationMaxAggregateOutputType | null
  }

  export type Agency_informationAvgAggregateOutputType = {
    agency_id: number | null
  }

  export type Agency_informationSumAggregateOutputType = {
    agency_id: number | null
  }

  export type Agency_informationMinAggregateOutputType = {
    agency_id: number | null
    agency_name: string | null
    description: string | null
    contact_info: string | null
  }

  export type Agency_informationMaxAggregateOutputType = {
    agency_id: number | null
    agency_name: string | null
    description: string | null
    contact_info: string | null
  }

  export type Agency_informationCountAggregateOutputType = {
    agency_id: number
    agency_name: number
    description: number
    contact_info: number
    _all: number
  }


  export type Agency_informationAvgAggregateInputType = {
    agency_id?: true
  }

  export type Agency_informationSumAggregateInputType = {
    agency_id?: true
  }

  export type Agency_informationMinAggregateInputType = {
    agency_id?: true
    agency_name?: true
    description?: true
    contact_info?: true
  }

  export type Agency_informationMaxAggregateInputType = {
    agency_id?: true
    agency_name?: true
    description?: true
    contact_info?: true
  }

  export type Agency_informationCountAggregateInputType = {
    agency_id?: true
    agency_name?: true
    description?: true
    contact_info?: true
    _all?: true
  }

  export type Agency_informationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which agency_information to aggregate.
     */
    where?: agency_informationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agency_informations to fetch.
     */
    orderBy?: agency_informationOrderByWithRelationInput | agency_informationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: agency_informationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agency_informations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agency_informations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned agency_informations
    **/
    _count?: true | Agency_informationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Agency_informationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Agency_informationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Agency_informationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Agency_informationMaxAggregateInputType
  }

  export type GetAgency_informationAggregateType<T extends Agency_informationAggregateArgs> = {
        [P in keyof T & keyof AggregateAgency_information]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgency_information[P]>
      : GetScalarType<T[P], AggregateAgency_information[P]>
  }




  export type agency_informationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: agency_informationWhereInput
    orderBy?: agency_informationOrderByWithAggregationInput | agency_informationOrderByWithAggregationInput[]
    by: Agency_informationScalarFieldEnum[] | Agency_informationScalarFieldEnum
    having?: agency_informationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Agency_informationCountAggregateInputType | true
    _avg?: Agency_informationAvgAggregateInputType
    _sum?: Agency_informationSumAggregateInputType
    _min?: Agency_informationMinAggregateInputType
    _max?: Agency_informationMaxAggregateInputType
  }

  export type Agency_informationGroupByOutputType = {
    agency_id: number
    agency_name: string
    description: string
    contact_info: string
    _count: Agency_informationCountAggregateOutputType | null
    _avg: Agency_informationAvgAggregateOutputType | null
    _sum: Agency_informationSumAggregateOutputType | null
    _min: Agency_informationMinAggregateOutputType | null
    _max: Agency_informationMaxAggregateOutputType | null
  }

  type GetAgency_informationGroupByPayload<T extends agency_informationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Agency_informationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Agency_informationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Agency_informationGroupByOutputType[P]>
            : GetScalarType<T[P], Agency_informationGroupByOutputType[P]>
        }
      >
    >


  export type agency_informationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    agency_id?: boolean
    agency_name?: boolean
    description?: boolean
    contact_info?: boolean
    contributions?: boolean | agency_information$contributionsArgs<ExtArgs>
    _count?: boolean | Agency_informationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agency_information"]>

  export type agency_informationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    agency_id?: boolean
    agency_name?: boolean
    description?: boolean
    contact_info?: boolean
  }, ExtArgs["result"]["agency_information"]>

  export type agency_informationSelectScalar = {
    agency_id?: boolean
    agency_name?: boolean
    description?: boolean
    contact_info?: boolean
  }

  export type agency_informationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributions?: boolean | agency_information$contributionsArgs<ExtArgs>
    _count?: boolean | Agency_informationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type agency_informationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $agency_informationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "agency_information"
    objects: {
      contributions: Prisma.$contributionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      agency_id: number
      agency_name: string
      description: string
      contact_info: string
    }, ExtArgs["result"]["agency_information"]>
    composites: {}
  }

  type agency_informationGetPayload<S extends boolean | null | undefined | agency_informationDefaultArgs> = $Result.GetResult<Prisma.$agency_informationPayload, S>

  type agency_informationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<agency_informationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Agency_informationCountAggregateInputType | true
    }

  export interface agency_informationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['agency_information'], meta: { name: 'agency_information' } }
    /**
     * Find zero or one Agency_information that matches the filter.
     * @param {agency_informationFindUniqueArgs} args - Arguments to find a Agency_information
     * @example
     * // Get one Agency_information
     * const agency_information = await prisma.agency_information.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends agency_informationFindUniqueArgs>(args: SelectSubset<T, agency_informationFindUniqueArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Agency_information that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {agency_informationFindUniqueOrThrowArgs} args - Arguments to find a Agency_information
     * @example
     * // Get one Agency_information
     * const agency_information = await prisma.agency_information.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends agency_informationFindUniqueOrThrowArgs>(args: SelectSubset<T, agency_informationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Agency_information that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationFindFirstArgs} args - Arguments to find a Agency_information
     * @example
     * // Get one Agency_information
     * const agency_information = await prisma.agency_information.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends agency_informationFindFirstArgs>(args?: SelectSubset<T, agency_informationFindFirstArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Agency_information that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationFindFirstOrThrowArgs} args - Arguments to find a Agency_information
     * @example
     * // Get one Agency_information
     * const agency_information = await prisma.agency_information.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends agency_informationFindFirstOrThrowArgs>(args?: SelectSubset<T, agency_informationFindFirstOrThrowArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Agency_informations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agency_informations
     * const agency_informations = await prisma.agency_information.findMany()
     * 
     * // Get first 10 Agency_informations
     * const agency_informations = await prisma.agency_information.findMany({ take: 10 })
     * 
     * // Only select the `agency_id`
     * const agency_informationWithAgency_idOnly = await prisma.agency_information.findMany({ select: { agency_id: true } })
     * 
     */
    findMany<T extends agency_informationFindManyArgs>(args?: SelectSubset<T, agency_informationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Agency_information.
     * @param {agency_informationCreateArgs} args - Arguments to create a Agency_information.
     * @example
     * // Create one Agency_information
     * const Agency_information = await prisma.agency_information.create({
     *   data: {
     *     // ... data to create a Agency_information
     *   }
     * })
     * 
     */
    create<T extends agency_informationCreateArgs>(args: SelectSubset<T, agency_informationCreateArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Agency_informations.
     * @param {agency_informationCreateManyArgs} args - Arguments to create many Agency_informations.
     * @example
     * // Create many Agency_informations
     * const agency_information = await prisma.agency_information.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends agency_informationCreateManyArgs>(args?: SelectSubset<T, agency_informationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agency_informations and returns the data saved in the database.
     * @param {agency_informationCreateManyAndReturnArgs} args - Arguments to create many Agency_informations.
     * @example
     * // Create many Agency_informations
     * const agency_information = await prisma.agency_information.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agency_informations and only return the `agency_id`
     * const agency_informationWithAgency_idOnly = await prisma.agency_information.createManyAndReturn({ 
     *   select: { agency_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends agency_informationCreateManyAndReturnArgs>(args?: SelectSubset<T, agency_informationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Agency_information.
     * @param {agency_informationDeleteArgs} args - Arguments to delete one Agency_information.
     * @example
     * // Delete one Agency_information
     * const Agency_information = await prisma.agency_information.delete({
     *   where: {
     *     // ... filter to delete one Agency_information
     *   }
     * })
     * 
     */
    delete<T extends agency_informationDeleteArgs>(args: SelectSubset<T, agency_informationDeleteArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Agency_information.
     * @param {agency_informationUpdateArgs} args - Arguments to update one Agency_information.
     * @example
     * // Update one Agency_information
     * const agency_information = await prisma.agency_information.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends agency_informationUpdateArgs>(args: SelectSubset<T, agency_informationUpdateArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Agency_informations.
     * @param {agency_informationDeleteManyArgs} args - Arguments to filter Agency_informations to delete.
     * @example
     * // Delete a few Agency_informations
     * const { count } = await prisma.agency_information.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends agency_informationDeleteManyArgs>(args?: SelectSubset<T, agency_informationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agency_informations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agency_informations
     * const agency_information = await prisma.agency_information.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends agency_informationUpdateManyArgs>(args: SelectSubset<T, agency_informationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agency_information.
     * @param {agency_informationUpsertArgs} args - Arguments to update or create a Agency_information.
     * @example
     * // Update or create a Agency_information
     * const agency_information = await prisma.agency_information.upsert({
     *   create: {
     *     // ... data to create a Agency_information
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agency_information we want to update
     *   }
     * })
     */
    upsert<T extends agency_informationUpsertArgs>(args: SelectSubset<T, agency_informationUpsertArgs<ExtArgs>>): Prisma__agency_informationClient<$Result.GetResult<Prisma.$agency_informationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Agency_informations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationCountArgs} args - Arguments to filter Agency_informations to count.
     * @example
     * // Count the number of Agency_informations
     * const count = await prisma.agency_information.count({
     *   where: {
     *     // ... the filter for the Agency_informations we want to count
     *   }
     * })
    **/
    count<T extends agency_informationCountArgs>(
      args?: Subset<T, agency_informationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Agency_informationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agency_information.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Agency_informationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Agency_informationAggregateArgs>(args: Subset<T, Agency_informationAggregateArgs>): Prisma.PrismaPromise<GetAgency_informationAggregateType<T>>

    /**
     * Group by Agency_information.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agency_informationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends agency_informationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: agency_informationGroupByArgs['orderBy'] }
        : { orderBy?: agency_informationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, agency_informationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgency_informationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the agency_information model
   */
  readonly fields: agency_informationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for agency_information.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__agency_informationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contributions<T extends agency_information$contributionsArgs<ExtArgs> = {}>(args?: Subset<T, agency_information$contributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contributionsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the agency_information model
   */ 
  interface agency_informationFieldRefs {
    readonly agency_id: FieldRef<"agency_information", 'Int'>
    readonly agency_name: FieldRef<"agency_information", 'String'>
    readonly description: FieldRef<"agency_information", 'String'>
    readonly contact_info: FieldRef<"agency_information", 'String'>
  }
    

  // Custom InputTypes
  /**
   * agency_information findUnique
   */
  export type agency_informationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter, which agency_information to fetch.
     */
    where: agency_informationWhereUniqueInput
  }

  /**
   * agency_information findUniqueOrThrow
   */
  export type agency_informationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter, which agency_information to fetch.
     */
    where: agency_informationWhereUniqueInput
  }

  /**
   * agency_information findFirst
   */
  export type agency_informationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter, which agency_information to fetch.
     */
    where?: agency_informationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agency_informations to fetch.
     */
    orderBy?: agency_informationOrderByWithRelationInput | agency_informationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for agency_informations.
     */
    cursor?: agency_informationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agency_informations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agency_informations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of agency_informations.
     */
    distinct?: Agency_informationScalarFieldEnum | Agency_informationScalarFieldEnum[]
  }

  /**
   * agency_information findFirstOrThrow
   */
  export type agency_informationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter, which agency_information to fetch.
     */
    where?: agency_informationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agency_informations to fetch.
     */
    orderBy?: agency_informationOrderByWithRelationInput | agency_informationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for agency_informations.
     */
    cursor?: agency_informationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agency_informations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agency_informations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of agency_informations.
     */
    distinct?: Agency_informationScalarFieldEnum | Agency_informationScalarFieldEnum[]
  }

  /**
   * agency_information findMany
   */
  export type agency_informationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter, which agency_informations to fetch.
     */
    where?: agency_informationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agency_informations to fetch.
     */
    orderBy?: agency_informationOrderByWithRelationInput | agency_informationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing agency_informations.
     */
    cursor?: agency_informationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agency_informations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agency_informations.
     */
    skip?: number
    distinct?: Agency_informationScalarFieldEnum | Agency_informationScalarFieldEnum[]
  }

  /**
   * agency_information create
   */
  export type agency_informationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * The data needed to create a agency_information.
     */
    data: XOR<agency_informationCreateInput, agency_informationUncheckedCreateInput>
  }

  /**
   * agency_information createMany
   */
  export type agency_informationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many agency_informations.
     */
    data: agency_informationCreateManyInput | agency_informationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * agency_information createManyAndReturn
   */
  export type agency_informationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many agency_informations.
     */
    data: agency_informationCreateManyInput | agency_informationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * agency_information update
   */
  export type agency_informationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * The data needed to update a agency_information.
     */
    data: XOR<agency_informationUpdateInput, agency_informationUncheckedUpdateInput>
    /**
     * Choose, which agency_information to update.
     */
    where: agency_informationWhereUniqueInput
  }

  /**
   * agency_information updateMany
   */
  export type agency_informationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update agency_informations.
     */
    data: XOR<agency_informationUpdateManyMutationInput, agency_informationUncheckedUpdateManyInput>
    /**
     * Filter which agency_informations to update
     */
    where?: agency_informationWhereInput
  }

  /**
   * agency_information upsert
   */
  export type agency_informationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * The filter to search for the agency_information to update in case it exists.
     */
    where: agency_informationWhereUniqueInput
    /**
     * In case the agency_information found by the `where` argument doesn't exist, create a new agency_information with this data.
     */
    create: XOR<agency_informationCreateInput, agency_informationUncheckedCreateInput>
    /**
     * In case the agency_information was found with the provided `where` argument, update it with this data.
     */
    update: XOR<agency_informationUpdateInput, agency_informationUncheckedUpdateInput>
  }

  /**
   * agency_information delete
   */
  export type agency_informationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
    /**
     * Filter which agency_information to delete.
     */
    where: agency_informationWhereUniqueInput
  }

  /**
   * agency_information deleteMany
   */
  export type agency_informationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which agency_informations to delete
     */
    where?: agency_informationWhereInput
  }

  /**
   * agency_information.contributions
   */
  export type agency_information$contributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contributions
     */
    select?: contributionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contributionsInclude<ExtArgs> | null
    where?: contributionsWhereInput
    orderBy?: contributionsOrderByWithRelationInput | contributionsOrderByWithRelationInput[]
    cursor?: contributionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContributionsScalarFieldEnum | ContributionsScalarFieldEnum[]
  }

  /**
   * agency_information without action
   */
  export type agency_informationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agency_information
     */
    select?: agency_informationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: agency_informationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    userID: 'userID',
    username: 'username',
    password: 'password',
    email: 'email',
    phone_number: 'phone_number',
    first_name: 'first_name',
    middle_name: 'middle_name',
    last_name: 'last_name',
    date_of_birth: 'date_of_birth',
    address: 'address',
    create_at: 'create_at',
    updated_at: 'updated_at',
    status: 'status',
    last_login: 'last_login',
    sex: 'sex',
    barangay: 'barangay',
    city_municipal: 'city_municipal',
    postal_code: 'postal_code',
    country: 'country',
    province: 'province',
    role_Id: 'role_Id'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const User_rolesScalarFieldEnum: {
    id: 'id',
    role_name: 'role_name',
    description: 'description'
  };

  export type User_rolesScalarFieldEnum = (typeof User_rolesScalarFieldEnum)[keyof typeof User_rolesScalarFieldEnum]


  export const ContributionsScalarFieldEnum: {
    contribution_id: 'contribution_id',
    amount: 'amount',
    post_date: 'post_date',
    status: 'status',
    userID: 'userID',
    agency_id: 'agency_id'
  };

  export type ContributionsScalarFieldEnum = (typeof ContributionsScalarFieldEnum)[keyof typeof ContributionsScalarFieldEnum]


  export const Agency_informationScalarFieldEnum: {
    agency_id: 'agency_id',
    agency_name: 'agency_name',
    description: 'description',
    contact_info: 'contact_info'
  };

  export type Agency_informationScalarFieldEnum = (typeof Agency_informationScalarFieldEnum)[keyof typeof Agency_informationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    userID?: IntFilter<"Users"> | number
    username?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    phone_number?: StringFilter<"Users"> | string
    first_name?: StringFilter<"Users"> | string
    middle_name?: StringFilter<"Users"> | string
    last_name?: StringFilter<"Users"> | string
    date_of_birth?: DateTimeFilter<"Users"> | Date | string
    address?: StringFilter<"Users"> | string
    create_at?: DateTimeFilter<"Users"> | Date | string
    updated_at?: DateTimeNullableFilter<"Users"> | Date | string | null
    status?: StringFilter<"Users"> | string
    last_login?: DateTimeNullableFilter<"Users"> | Date | string | null
    sex?: StringFilter<"Users"> | string
    barangay?: StringFilter<"Users"> | string
    city_municipal?: StringFilter<"Users"> | string
    postal_code?: IntFilter<"Users"> | number
    country?: StringFilter<"Users"> | string
    province?: StringFilter<"Users"> | string
    role_Id?: IntFilter<"Users"> | number
    contributions?: ContributionsListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    address?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    status?: SortOrder
    last_login?: SortOrderInput | SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    city_municipal?: SortOrder
    postal_code?: SortOrder
    country?: SortOrder
    province?: SortOrder
    role_Id?: SortOrder
    contributions?: contributionsOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    userID?: number
    username?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    password?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    phone_number?: StringFilter<"Users"> | string
    first_name?: StringFilter<"Users"> | string
    middle_name?: StringFilter<"Users"> | string
    last_name?: StringFilter<"Users"> | string
    date_of_birth?: DateTimeFilter<"Users"> | Date | string
    address?: StringFilter<"Users"> | string
    create_at?: DateTimeFilter<"Users"> | Date | string
    updated_at?: DateTimeNullableFilter<"Users"> | Date | string | null
    status?: StringFilter<"Users"> | string
    last_login?: DateTimeNullableFilter<"Users"> | Date | string | null
    sex?: StringFilter<"Users"> | string
    barangay?: StringFilter<"Users"> | string
    city_municipal?: StringFilter<"Users"> | string
    postal_code?: IntFilter<"Users"> | number
    country?: StringFilter<"Users"> | string
    province?: StringFilter<"Users"> | string
    role_Id?: IntFilter<"Users"> | number
    contributions?: ContributionsListRelationFilter
  }, "userID" | "username">

  export type UsersOrderByWithAggregationInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    address?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    status?: SortOrder
    last_login?: SortOrderInput | SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    city_municipal?: SortOrder
    postal_code?: SortOrder
    country?: SortOrder
    province?: SortOrder
    role_Id?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    userID?: IntWithAggregatesFilter<"Users"> | number
    username?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    phone_number?: StringWithAggregatesFilter<"Users"> | string
    first_name?: StringWithAggregatesFilter<"Users"> | string
    middle_name?: StringWithAggregatesFilter<"Users"> | string
    last_name?: StringWithAggregatesFilter<"Users"> | string
    date_of_birth?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    address?: StringWithAggregatesFilter<"Users"> | string
    create_at?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
    status?: StringWithAggregatesFilter<"Users"> | string
    last_login?: DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
    sex?: StringWithAggregatesFilter<"Users"> | string
    barangay?: StringWithAggregatesFilter<"Users"> | string
    city_municipal?: StringWithAggregatesFilter<"Users"> | string
    postal_code?: IntWithAggregatesFilter<"Users"> | number
    country?: StringWithAggregatesFilter<"Users"> | string
    province?: StringWithAggregatesFilter<"Users"> | string
    role_Id?: IntWithAggregatesFilter<"Users"> | number
  }

  export type user_rolesWhereInput = {
    AND?: user_rolesWhereInput | user_rolesWhereInput[]
    OR?: user_rolesWhereInput[]
    NOT?: user_rolesWhereInput | user_rolesWhereInput[]
    id?: IntFilter<"user_roles"> | number
    role_name?: StringFilter<"user_roles"> | string
    description?: StringFilter<"user_roles"> | string
  }

  export type user_rolesOrderByWithRelationInput = {
    id?: SortOrder
    role_name?: SortOrder
    description?: SortOrder
  }

  export type user_rolesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: user_rolesWhereInput | user_rolesWhereInput[]
    OR?: user_rolesWhereInput[]
    NOT?: user_rolesWhereInput | user_rolesWhereInput[]
    role_name?: StringFilter<"user_roles"> | string
    description?: StringFilter<"user_roles"> | string
  }, "id">

  export type user_rolesOrderByWithAggregationInput = {
    id?: SortOrder
    role_name?: SortOrder
    description?: SortOrder
    _count?: user_rolesCountOrderByAggregateInput
    _avg?: user_rolesAvgOrderByAggregateInput
    _max?: user_rolesMaxOrderByAggregateInput
    _min?: user_rolesMinOrderByAggregateInput
    _sum?: user_rolesSumOrderByAggregateInput
  }

  export type user_rolesScalarWhereWithAggregatesInput = {
    AND?: user_rolesScalarWhereWithAggregatesInput | user_rolesScalarWhereWithAggregatesInput[]
    OR?: user_rolesScalarWhereWithAggregatesInput[]
    NOT?: user_rolesScalarWhereWithAggregatesInput | user_rolesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_roles"> | number
    role_name?: StringWithAggregatesFilter<"user_roles"> | string
    description?: StringWithAggregatesFilter<"user_roles"> | string
  }

  export type contributionsWhereInput = {
    AND?: contributionsWhereInput | contributionsWhereInput[]
    OR?: contributionsWhereInput[]
    NOT?: contributionsWhereInput | contributionsWhereInput[]
    contribution_id?: IntFilter<"contributions"> | number
    amount?: DecimalFilter<"contributions"> | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFilter<"contributions"> | Date | string
    status?: StringFilter<"contributions"> | string
    userID?: IntFilter<"contributions"> | number
    agency_id?: IntFilter<"contributions"> | number
    source?: XOR<Agency_informationRelationFilter, agency_informationWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type contributionsOrderByWithRelationInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    post_date?: SortOrder
    status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    source?: agency_informationOrderByWithRelationInput
    user?: UsersOrderByWithRelationInput
  }

  export type contributionsWhereUniqueInput = Prisma.AtLeast<{
    contribution_id?: number
    AND?: contributionsWhereInput | contributionsWhereInput[]
    OR?: contributionsWhereInput[]
    NOT?: contributionsWhereInput | contributionsWhereInput[]
    amount?: DecimalFilter<"contributions"> | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFilter<"contributions"> | Date | string
    status?: StringFilter<"contributions"> | string
    userID?: IntFilter<"contributions"> | number
    agency_id?: IntFilter<"contributions"> | number
    source?: XOR<Agency_informationRelationFilter, agency_informationWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "contribution_id">

  export type contributionsOrderByWithAggregationInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    post_date?: SortOrder
    status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
    _count?: contributionsCountOrderByAggregateInput
    _avg?: contributionsAvgOrderByAggregateInput
    _max?: contributionsMaxOrderByAggregateInput
    _min?: contributionsMinOrderByAggregateInput
    _sum?: contributionsSumOrderByAggregateInput
  }

  export type contributionsScalarWhereWithAggregatesInput = {
    AND?: contributionsScalarWhereWithAggregatesInput | contributionsScalarWhereWithAggregatesInput[]
    OR?: contributionsScalarWhereWithAggregatesInput[]
    NOT?: contributionsScalarWhereWithAggregatesInput | contributionsScalarWhereWithAggregatesInput[]
    contribution_id?: IntWithAggregatesFilter<"contributions"> | number
    amount?: DecimalWithAggregatesFilter<"contributions"> | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeWithAggregatesFilter<"contributions"> | Date | string
    status?: StringWithAggregatesFilter<"contributions"> | string
    userID?: IntWithAggregatesFilter<"contributions"> | number
    agency_id?: IntWithAggregatesFilter<"contributions"> | number
  }

  export type agency_informationWhereInput = {
    AND?: agency_informationWhereInput | agency_informationWhereInput[]
    OR?: agency_informationWhereInput[]
    NOT?: agency_informationWhereInput | agency_informationWhereInput[]
    agency_id?: IntFilter<"agency_information"> | number
    agency_name?: StringFilter<"agency_information"> | string
    description?: StringFilter<"agency_information"> | string
    contact_info?: StringFilter<"agency_information"> | string
    contributions?: ContributionsListRelationFilter
  }

  export type agency_informationOrderByWithRelationInput = {
    agency_id?: SortOrder
    agency_name?: SortOrder
    description?: SortOrder
    contact_info?: SortOrder
    contributions?: contributionsOrderByRelationAggregateInput
  }

  export type agency_informationWhereUniqueInput = Prisma.AtLeast<{
    agency_id?: number
    AND?: agency_informationWhereInput | agency_informationWhereInput[]
    OR?: agency_informationWhereInput[]
    NOT?: agency_informationWhereInput | agency_informationWhereInput[]
    agency_name?: StringFilter<"agency_information"> | string
    description?: StringFilter<"agency_information"> | string
    contact_info?: StringFilter<"agency_information"> | string
    contributions?: ContributionsListRelationFilter
  }, "agency_id">

  export type agency_informationOrderByWithAggregationInput = {
    agency_id?: SortOrder
    agency_name?: SortOrder
    description?: SortOrder
    contact_info?: SortOrder
    _count?: agency_informationCountOrderByAggregateInput
    _avg?: agency_informationAvgOrderByAggregateInput
    _max?: agency_informationMaxOrderByAggregateInput
    _min?: agency_informationMinOrderByAggregateInput
    _sum?: agency_informationSumOrderByAggregateInput
  }

  export type agency_informationScalarWhereWithAggregatesInput = {
    AND?: agency_informationScalarWhereWithAggregatesInput | agency_informationScalarWhereWithAggregatesInput[]
    OR?: agency_informationScalarWhereWithAggregatesInput[]
    NOT?: agency_informationScalarWhereWithAggregatesInput | agency_informationScalarWhereWithAggregatesInput[]
    agency_id?: IntWithAggregatesFilter<"agency_information"> | number
    agency_name?: StringWithAggregatesFilter<"agency_information"> | string
    description?: StringWithAggregatesFilter<"agency_information"> | string
    contact_info?: StringWithAggregatesFilter<"agency_information"> | string
  }

  export type UsersCreateInput = {
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name: string
    last_name: string
    date_of_birth: Date | string
    address: string
    create_at?: Date | string
    updated_at?: Date | string | null
    status: string
    last_login?: Date | string | null
    sex: string
    barangay: string
    city_municipal: string
    postal_code: number
    country: string
    province: string
    role_Id?: number
    contributions?: contributionsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    userID?: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name: string
    last_name: string
    date_of_birth: Date | string
    address: string
    create_at?: Date | string
    updated_at?: Date | string | null
    status: string
    last_login?: Date | string | null
    sex: string
    barangay: string
    city_municipal: string
    postal_code: number
    country: string
    province: string
    role_Id?: number
    contributions?: contributionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    city_municipal?: StringFieldUpdateOperationsInput | string
    postal_code?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    role_Id?: IntFieldUpdateOperationsInput | number
    contributions?: contributionsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    city_municipal?: StringFieldUpdateOperationsInput | string
    postal_code?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    role_Id?: IntFieldUpdateOperationsInput | number
    contributions?: contributionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    userID?: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name: string
    last_name: string
    date_of_birth: Date | string
    address: string
    create_at?: Date | string
    updated_at?: Date | string | null
    status: string
    last_login?: Date | string | null
    sex: string
    barangay: string
    city_municipal: string
    postal_code: number
    country: string
    province: string
    role_Id?: number
  }

  export type UsersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    city_municipal?: StringFieldUpdateOperationsInput | string
    postal_code?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    role_Id?: IntFieldUpdateOperationsInput | number
  }

  export type UsersUncheckedUpdateManyInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    city_municipal?: StringFieldUpdateOperationsInput | string
    postal_code?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    role_Id?: IntFieldUpdateOperationsInput | number
  }

  export type user_rolesCreateInput = {
    role_name: string
    description: string
  }

  export type user_rolesUncheckedCreateInput = {
    id?: number
    role_name: string
    description: string
  }

  export type user_rolesUpdateInput = {
    role_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type user_rolesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type user_rolesCreateManyInput = {
    id?: number
    role_name: string
    description: string
  }

  export type user_rolesUpdateManyMutationInput = {
    role_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type user_rolesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type contributionsCreateInput = {
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    source: agency_informationCreateNestedOneWithoutContributionsInput
    user: UsersCreateNestedOneWithoutContributionsInput
  }

  export type contributionsUncheckedCreateInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    userID: number
    agency_id: number
  }

  export type contributionsUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: agency_informationUpdateOneRequiredWithoutContributionsNestedInput
    user?: UsersUpdateOneRequiredWithoutContributionsNestedInput
  }

  export type contributionsUncheckedUpdateInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type contributionsCreateManyInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    userID: number
    agency_id: number
  }

  export type contributionsUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type contributionsUncheckedUpdateManyInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type agency_informationCreateInput = {
    agency_name: string
    description: string
    contact_info: string
    contributions?: contributionsCreateNestedManyWithoutSourceInput
  }

  export type agency_informationUncheckedCreateInput = {
    agency_id?: number
    agency_name: string
    description: string
    contact_info: string
    contributions?: contributionsUncheckedCreateNestedManyWithoutSourceInput
  }

  export type agency_informationUpdateInput = {
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    contributions?: contributionsUpdateManyWithoutSourceNestedInput
  }

  export type agency_informationUncheckedUpdateInput = {
    agency_id?: IntFieldUpdateOperationsInput | number
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
    contributions?: contributionsUncheckedUpdateManyWithoutSourceNestedInput
  }

  export type agency_informationCreateManyInput = {
    agency_id?: number
    agency_name: string
    description: string
    contact_info: string
  }

  export type agency_informationUpdateManyMutationInput = {
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
  }

  export type agency_informationUncheckedUpdateManyInput = {
    agency_id?: IntFieldUpdateOperationsInput | number
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ContributionsListRelationFilter = {
    every?: contributionsWhereInput
    some?: contributionsWhereInput
    none?: contributionsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type contributionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    address?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    last_login?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    city_municipal?: SortOrder
    postal_code?: SortOrder
    country?: SortOrder
    province?: SortOrder
    role_Id?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    userID?: SortOrder
    postal_code?: SortOrder
    role_Id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    address?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    last_login?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    city_municipal?: SortOrder
    postal_code?: SortOrder
    country?: SortOrder
    province?: SortOrder
    role_Id?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    userID?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    first_name?: SortOrder
    middle_name?: SortOrder
    last_name?: SortOrder
    date_of_birth?: SortOrder
    address?: SortOrder
    create_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    last_login?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    city_municipal?: SortOrder
    postal_code?: SortOrder
    country?: SortOrder
    province?: SortOrder
    role_Id?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    userID?: SortOrder
    postal_code?: SortOrder
    role_Id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type user_rolesCountOrderByAggregateInput = {
    id?: SortOrder
    role_name?: SortOrder
    description?: SortOrder
  }

  export type user_rolesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type user_rolesMaxOrderByAggregateInput = {
    id?: SortOrder
    role_name?: SortOrder
    description?: SortOrder
  }

  export type user_rolesMinOrderByAggregateInput = {
    id?: SortOrder
    role_name?: SortOrder
    description?: SortOrder
  }

  export type user_rolesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type Agency_informationRelationFilter = {
    is?: agency_informationWhereInput
    isNot?: agency_informationWhereInput
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type contributionsCountOrderByAggregateInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    post_date?: SortOrder
    status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
  }

  export type contributionsAvgOrderByAggregateInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
  }

  export type contributionsMaxOrderByAggregateInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    post_date?: SortOrder
    status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
  }

  export type contributionsMinOrderByAggregateInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    post_date?: SortOrder
    status?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
  }

  export type contributionsSumOrderByAggregateInput = {
    contribution_id?: SortOrder
    amount?: SortOrder
    userID?: SortOrder
    agency_id?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type agency_informationCountOrderByAggregateInput = {
    agency_id?: SortOrder
    agency_name?: SortOrder
    description?: SortOrder
    contact_info?: SortOrder
  }

  export type agency_informationAvgOrderByAggregateInput = {
    agency_id?: SortOrder
  }

  export type agency_informationMaxOrderByAggregateInput = {
    agency_id?: SortOrder
    agency_name?: SortOrder
    description?: SortOrder
    contact_info?: SortOrder
  }

  export type agency_informationMinOrderByAggregateInput = {
    agency_id?: SortOrder
    agency_name?: SortOrder
    description?: SortOrder
    contact_info?: SortOrder
  }

  export type agency_informationSumOrderByAggregateInput = {
    agency_id?: SortOrder
  }

  export type contributionsCreateNestedManyWithoutUserInput = {
    create?: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput> | contributionsCreateWithoutUserInput[] | contributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutUserInput | contributionsCreateOrConnectWithoutUserInput[]
    createMany?: contributionsCreateManyUserInputEnvelope
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
  }

  export type contributionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput> | contributionsCreateWithoutUserInput[] | contributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutUserInput | contributionsCreateOrConnectWithoutUserInput[]
    createMany?: contributionsCreateManyUserInputEnvelope
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type contributionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput> | contributionsCreateWithoutUserInput[] | contributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutUserInput | contributionsCreateOrConnectWithoutUserInput[]
    upsert?: contributionsUpsertWithWhereUniqueWithoutUserInput | contributionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: contributionsCreateManyUserInputEnvelope
    set?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    disconnect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    delete?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    update?: contributionsUpdateWithWhereUniqueWithoutUserInput | contributionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: contributionsUpdateManyWithWhereWithoutUserInput | contributionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
  }

  export type contributionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput> | contributionsCreateWithoutUserInput[] | contributionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutUserInput | contributionsCreateOrConnectWithoutUserInput[]
    upsert?: contributionsUpsertWithWhereUniqueWithoutUserInput | contributionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: contributionsCreateManyUserInputEnvelope
    set?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    disconnect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    delete?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    update?: contributionsUpdateWithWhereUniqueWithoutUserInput | contributionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: contributionsUpdateManyWithWhereWithoutUserInput | contributionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
  }

  export type agency_informationCreateNestedOneWithoutContributionsInput = {
    create?: XOR<agency_informationCreateWithoutContributionsInput, agency_informationUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: agency_informationCreateOrConnectWithoutContributionsInput
    connect?: agency_informationWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutContributionsInput = {
    create?: XOR<UsersCreateWithoutContributionsInput, UsersUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutContributionsInput
    connect?: UsersWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type agency_informationUpdateOneRequiredWithoutContributionsNestedInput = {
    create?: XOR<agency_informationCreateWithoutContributionsInput, agency_informationUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: agency_informationCreateOrConnectWithoutContributionsInput
    upsert?: agency_informationUpsertWithoutContributionsInput
    connect?: agency_informationWhereUniqueInput
    update?: XOR<XOR<agency_informationUpdateToOneWithWhereWithoutContributionsInput, agency_informationUpdateWithoutContributionsInput>, agency_informationUncheckedUpdateWithoutContributionsInput>
  }

  export type UsersUpdateOneRequiredWithoutContributionsNestedInput = {
    create?: XOR<UsersCreateWithoutContributionsInput, UsersUncheckedCreateWithoutContributionsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutContributionsInput
    upsert?: UsersUpsertWithoutContributionsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutContributionsInput, UsersUpdateWithoutContributionsInput>, UsersUncheckedUpdateWithoutContributionsInput>
  }

  export type contributionsCreateNestedManyWithoutSourceInput = {
    create?: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput> | contributionsCreateWithoutSourceInput[] | contributionsUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutSourceInput | contributionsCreateOrConnectWithoutSourceInput[]
    createMany?: contributionsCreateManySourceInputEnvelope
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
  }

  export type contributionsUncheckedCreateNestedManyWithoutSourceInput = {
    create?: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput> | contributionsCreateWithoutSourceInput[] | contributionsUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutSourceInput | contributionsCreateOrConnectWithoutSourceInput[]
    createMany?: contributionsCreateManySourceInputEnvelope
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
  }

  export type contributionsUpdateManyWithoutSourceNestedInput = {
    create?: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput> | contributionsCreateWithoutSourceInput[] | contributionsUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutSourceInput | contributionsCreateOrConnectWithoutSourceInput[]
    upsert?: contributionsUpsertWithWhereUniqueWithoutSourceInput | contributionsUpsertWithWhereUniqueWithoutSourceInput[]
    createMany?: contributionsCreateManySourceInputEnvelope
    set?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    disconnect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    delete?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    update?: contributionsUpdateWithWhereUniqueWithoutSourceInput | contributionsUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: contributionsUpdateManyWithWhereWithoutSourceInput | contributionsUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
  }

  export type contributionsUncheckedUpdateManyWithoutSourceNestedInput = {
    create?: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput> | contributionsCreateWithoutSourceInput[] | contributionsUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: contributionsCreateOrConnectWithoutSourceInput | contributionsCreateOrConnectWithoutSourceInput[]
    upsert?: contributionsUpsertWithWhereUniqueWithoutSourceInput | contributionsUpsertWithWhereUniqueWithoutSourceInput[]
    createMany?: contributionsCreateManySourceInputEnvelope
    set?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    disconnect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    delete?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    connect?: contributionsWhereUniqueInput | contributionsWhereUniqueInput[]
    update?: contributionsUpdateWithWhereUniqueWithoutSourceInput | contributionsUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: contributionsUpdateManyWithWhereWithoutSourceInput | contributionsUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type contributionsCreateWithoutUserInput = {
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    source: agency_informationCreateNestedOneWithoutContributionsInput
  }

  export type contributionsUncheckedCreateWithoutUserInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    agency_id: number
  }

  export type contributionsCreateOrConnectWithoutUserInput = {
    where: contributionsWhereUniqueInput
    create: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput>
  }

  export type contributionsCreateManyUserInputEnvelope = {
    data: contributionsCreateManyUserInput | contributionsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type contributionsUpsertWithWhereUniqueWithoutUserInput = {
    where: contributionsWhereUniqueInput
    update: XOR<contributionsUpdateWithoutUserInput, contributionsUncheckedUpdateWithoutUserInput>
    create: XOR<contributionsCreateWithoutUserInput, contributionsUncheckedCreateWithoutUserInput>
  }

  export type contributionsUpdateWithWhereUniqueWithoutUserInput = {
    where: contributionsWhereUniqueInput
    data: XOR<contributionsUpdateWithoutUserInput, contributionsUncheckedUpdateWithoutUserInput>
  }

  export type contributionsUpdateManyWithWhereWithoutUserInput = {
    where: contributionsScalarWhereInput
    data: XOR<contributionsUpdateManyMutationInput, contributionsUncheckedUpdateManyWithoutUserInput>
  }

  export type contributionsScalarWhereInput = {
    AND?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
    OR?: contributionsScalarWhereInput[]
    NOT?: contributionsScalarWhereInput | contributionsScalarWhereInput[]
    contribution_id?: IntFilter<"contributions"> | number
    amount?: DecimalFilter<"contributions"> | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFilter<"contributions"> | Date | string
    status?: StringFilter<"contributions"> | string
    userID?: IntFilter<"contributions"> | number
    agency_id?: IntFilter<"contributions"> | number
  }

  export type agency_informationCreateWithoutContributionsInput = {
    agency_name: string
    description: string
    contact_info: string
  }

  export type agency_informationUncheckedCreateWithoutContributionsInput = {
    agency_id?: number
    agency_name: string
    description: string
    contact_info: string
  }

  export type agency_informationCreateOrConnectWithoutContributionsInput = {
    where: agency_informationWhereUniqueInput
    create: XOR<agency_informationCreateWithoutContributionsInput, agency_informationUncheckedCreateWithoutContributionsInput>
  }

  export type UsersCreateWithoutContributionsInput = {
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name: string
    last_name: string
    date_of_birth: Date | string
    address: string
    create_at?: Date | string
    updated_at?: Date | string | null
    status: string
    last_login?: Date | string | null
    sex: string
    barangay: string
    city_municipal: string
    postal_code: number
    country: string
    province: string
    role_Id?: number
  }

  export type UsersUncheckedCreateWithoutContributionsInput = {
    userID?: number
    username: string
    password: string
    email: string
    phone_number: string
    first_name: string
    middle_name: string
    last_name: string
    date_of_birth: Date | string
    address: string
    create_at?: Date | string
    updated_at?: Date | string | null
    status: string
    last_login?: Date | string | null
    sex: string
    barangay: string
    city_municipal: string
    postal_code: number
    country: string
    province: string
    role_Id?: number
  }

  export type UsersCreateOrConnectWithoutContributionsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutContributionsInput, UsersUncheckedCreateWithoutContributionsInput>
  }

  export type agency_informationUpsertWithoutContributionsInput = {
    update: XOR<agency_informationUpdateWithoutContributionsInput, agency_informationUncheckedUpdateWithoutContributionsInput>
    create: XOR<agency_informationCreateWithoutContributionsInput, agency_informationUncheckedCreateWithoutContributionsInput>
    where?: agency_informationWhereInput
  }

  export type agency_informationUpdateToOneWithWhereWithoutContributionsInput = {
    where?: agency_informationWhereInput
    data: XOR<agency_informationUpdateWithoutContributionsInput, agency_informationUncheckedUpdateWithoutContributionsInput>
  }

  export type agency_informationUpdateWithoutContributionsInput = {
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
  }

  export type agency_informationUncheckedUpdateWithoutContributionsInput = {
    agency_id?: IntFieldUpdateOperationsInput | number
    agency_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    contact_info?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUpsertWithoutContributionsInput = {
    update: XOR<UsersUpdateWithoutContributionsInput, UsersUncheckedUpdateWithoutContributionsInput>
    create: XOR<UsersCreateWithoutContributionsInput, UsersUncheckedCreateWithoutContributionsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutContributionsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutContributionsInput, UsersUncheckedUpdateWithoutContributionsInput>
  }

  export type UsersUpdateWithoutContributionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    city_municipal?: StringFieldUpdateOperationsInput | string
    postal_code?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    role_Id?: IntFieldUpdateOperationsInput | number
  }

  export type UsersUncheckedUpdateWithoutContributionsInput = {
    userID?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    middle_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    create_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    city_municipal?: StringFieldUpdateOperationsInput | string
    postal_code?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    role_Id?: IntFieldUpdateOperationsInput | number
  }

  export type contributionsCreateWithoutSourceInput = {
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    user: UsersCreateNestedOneWithoutContributionsInput
  }

  export type contributionsUncheckedCreateWithoutSourceInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    userID: number
  }

  export type contributionsCreateOrConnectWithoutSourceInput = {
    where: contributionsWhereUniqueInput
    create: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput>
  }

  export type contributionsCreateManySourceInputEnvelope = {
    data: contributionsCreateManySourceInput | contributionsCreateManySourceInput[]
    skipDuplicates?: boolean
  }

  export type contributionsUpsertWithWhereUniqueWithoutSourceInput = {
    where: contributionsWhereUniqueInput
    update: XOR<contributionsUpdateWithoutSourceInput, contributionsUncheckedUpdateWithoutSourceInput>
    create: XOR<contributionsCreateWithoutSourceInput, contributionsUncheckedCreateWithoutSourceInput>
  }

  export type contributionsUpdateWithWhereUniqueWithoutSourceInput = {
    where: contributionsWhereUniqueInput
    data: XOR<contributionsUpdateWithoutSourceInput, contributionsUncheckedUpdateWithoutSourceInput>
  }

  export type contributionsUpdateManyWithWhereWithoutSourceInput = {
    where: contributionsScalarWhereInput
    data: XOR<contributionsUpdateManyMutationInput, contributionsUncheckedUpdateManyWithoutSourceInput>
  }

  export type contributionsCreateManyUserInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    agency_id: number
  }

  export type contributionsUpdateWithoutUserInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    source?: agency_informationUpdateOneRequiredWithoutContributionsNestedInput
  }

  export type contributionsUncheckedUpdateWithoutUserInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type contributionsUncheckedUpdateManyWithoutUserInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    agency_id?: IntFieldUpdateOperationsInput | number
  }

  export type contributionsCreateManySourceInput = {
    contribution_id?: number
    amount: Decimal | DecimalJsLike | number | string
    post_date: Date | string
    status: string
    userID: number
  }

  export type contributionsUpdateWithoutSourceInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutContributionsNestedInput
  }

  export type contributionsUncheckedUpdateWithoutSourceInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
  }

  export type contributionsUncheckedUpdateManyWithoutSourceInput = {
    contribution_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    post_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userID?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Agency_informationCountOutputTypeDefaultArgs instead
     */
    export type Agency_informationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Agency_informationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_rolesDefaultArgs instead
     */
    export type user_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_rolesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use contributionsDefaultArgs instead
     */
    export type contributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = contributionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use agency_informationDefaultArgs instead
     */
    export type agency_informationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = agency_informationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}